<?xml version="1.0"?>
<doc>
  <assembly>
    <name>C1.Win.C1Editor.4</name>
  </assembly>
  <members>
    <member name="T:C1.Win.Xhtml.StyleType">
      <summary>
            Specifies the types of content to which the inline style will be applied.
            </summary>
    </member>
    <member name="F:C1.Win.Xhtml.StyleType.Character">
      <summary>
            Style is applied only to characters in the range.
            </summary>
    </member>
    <member name="F:C1.Win.Xhtml.StyleType.Paragraph">
      <summary>
            Style is applied only to whole paragraphs containing the text range.
            </summary>
    </member>
    <member name="F:C1.Win.Xhtml.StyleType.Table">
      <summary>
            Style is applied only to tables containing the range.
            </summary>
    </member>
    <member name="F:C1.Win.Xhtml.StyleType.List">
      <summary>
            Style is applied only to lists containing the range.
            </summary>
    </member>
    <member name="F:C1.Win.Xhtml.StyleType.Any">
      <summary>
            Style is applied to any kind of content.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.OLECMDID">
      <summary>
            This type is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_ALLOWUILESSSAVEAS">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_CLEARSELECTION">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_CLOSE">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_COPY">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_CUT">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_DELETE">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_DONTDOWNLOADCSS">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_ENABLE_INTERACTION">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_FIND">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_FOCUSVIEWCONTROLS">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_FOCUSVIEWCONTROLSQUERY">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_GETPRINTTEMPLATE">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_GETZOOMRANGE">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_HIDETOOLBARS">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_HTTPEQUIV">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_HTTPEQUIV_DONE">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_NEW">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_ONTOOLBARACTIVATED">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_ONUNLOAD">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_OPEN">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_PAGEACTIONBLOCKED">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_PAGEACTIONUIQUERY">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_PAGESETUP">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_PASTE">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_PASTESPECIAL">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_PREREFRESH">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_PRINT">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_PRINT2">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_PRINTPREVIEW">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_PRINTPREVIEW2">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_PROPERTIES">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_PROPERTYBAG2">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_REDO">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_REFRESH">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SAVE">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SAVEAS">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SAVECOPYAS">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SELECTALL">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SETDOWNLOADSTATE">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SETPRINTTEMPLATE">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SETPROGRESSMAX">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SETPROGRESSPOS">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SETPROGRESSTEXT">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SETTITLE">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SHOWFIND">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SHOWMESSAGE">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SHOWPAGEACTIONMENU">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SHOWPAGESETUP">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SHOWPRINT">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SHOWSCRIPTERROR">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_SPELL">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_STOP">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_STOPDOWNLOAD">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_UNDO">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_UPDATECOMMANDS">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_UPDATEPAGESTATUS">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDID.OLECMDID_ZOOM">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.OLECMDF">
      <summary>
            This type is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDF.OLECMDF_DEFHIDEONCTXTMENU">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDF.OLECMDF_ENABLED">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDF.OLECMDF_INVISIBLE">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDF.OLECMDF_LATCHED">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDF.OLECMDF_NINCHED">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDF.OLECMDF_SUPPORTED">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.OLECMDEXECOPT">
      <summary>
            This type is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDEXECOPT.OLECMDEXECOPT_DODEFAULT">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDEXECOPT.OLECMDEXECOPT_DONTPROMPTUSER">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDEXECOPT.OLECMDEXECOPT_PROMPTUSER">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.OLECMDEXECOPT.OLECMDEXECOPT_SHOWHELP">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.tagREADYSTATE">
      <summary>
            This type is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.tagREADYSTATE.READYSTATE_COMPLETE">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.tagREADYSTATE.READYSTATE_INTERACTIVE">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.tagREADYSTATE.READYSTATE_LOADED">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.tagREADYSTATE.READYSTATE_LOADING">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.tagREADYSTATE.READYSTATE_UNINITIALIZED">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.IWebBrowser">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.IWebBrowser.GoBack">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.IWebBrowser.GoForward">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.IWebBrowser.GoHome">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.IWebBrowser.GoSearch">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.IWebBrowser.Navigate(System.String,System.Object@,System.Object@,System.Object@,System.Object@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.IWebBrowser.Refresh">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.IWebBrowser.Refresh2(System.Object@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.IWebBrowser.Stop">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser.Application">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser.Parent">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser.Container">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser.Document">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser.TopLevelContainer">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser.Type">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser.Left">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser.Top">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser.Width">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser.Height">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser.LocationName">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser.LocationURL">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser.Busy">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.IWebBrowserApp">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.IWebBrowserApp.Quit">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.IWebBrowserApp.ClientToWindow(System.Int32@,System.Int32@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.IWebBrowserApp.PutProperty(System.String,System.Object)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.IWebBrowserApp.GetProperty(System.String)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowserApp.Name">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowserApp.HWND">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowserApp.FullName">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowserApp.Path">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowserApp.Visible">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowserApp.StatusBar">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowserApp.StatusText">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowserApp.ToolBar">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowserApp.MenuBar">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowserApp.FullScreen">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.IWebBrowser2">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.GoBack">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.GoForward">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.GoHome">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.GoSearch">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.Navigate(System.String,System.Object@,System.Object@,System.Object@,System.Object@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.Refresh">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.Refresh2(System.Object@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.Stop">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Application">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Parent">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Container">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Document">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.TopLevelContainer">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Type">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Left">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Top">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Width">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Height">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.LocationName">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.LocationURL">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Busy">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.Quit">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.ClientToWindow(System.Int32@,System.Int32@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.PutProperty(System.String,System.Object)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.GetProperty(System.String)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Name">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.HWND">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.FullName">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Path">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Visible">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.StatusBar">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.StatusText">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.ToolBar">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.MenuBar">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.FullScreen">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.Navigate2(System.Object@,System.Object@,System.Object@,System.Object@,System.Object@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.QueryStatusWB(C1.Win.C1Editor.Internal.OLECMDID)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.ExecWB(C1.Win.C1Editor.Internal.OLECMDID,C1.Win.C1Editor.Internal.OLECMDEXECOPT,System.Object@,System.Object@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.IWebBrowser2.ShowBrowserBar(System.Object@,System.Object@,System.Object@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.ReadyState">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Offline">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Silent">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.RegisterAsBrowser">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.RegisterAsDropTarget">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.TheaterMode">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.AddressBar">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.IWebBrowser2.Resizable">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.tagOLECONTF">
      <summary>
            This type is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagOLECONTF.OLECONTF_EMBEDDINGS">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagOLECONTF.OLECONTF_LINKS">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagOLECONTF.OLECONTF_OTHERS">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagOLECONTF.OLECONTF_ONLYUSER">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagOLECONTF.OLECONTF_ONLYIFRUNNING">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.MARKUP_CONTEXT_TYPE">
      <summary>
            This type is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.MARKUP_CONTEXT_TYPE.CONTEXT_TYPE_None">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.MARKUP_CONTEXT_TYPE.CONTEXT_TYPE_Text">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.MARKUP_CONTEXT_TYPE.CONTEXT_TYPE_EnterScope">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.MARKUP_CONTEXT_TYPE.CONTEXT_TYPE_ExitScope">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.MARKUP_CONTEXT_TYPE.CONTEXT_TYPE_NoScope">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.MARKUP_CONTEXT_TYPE.MARKUP_CONTEXT_TYPE_Max">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.NODE_TYPES">
      <summary>
            This type is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.NODE_TYPES.ELEMENT">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.NODE_TYPES.TEXT">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLCurrentStyle">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLCurrentStyle.color">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLCurrentStyle.backgroundColor">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLCurrentStyle.fontFamily">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLCurrentStyle.fontStyle">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLCurrentStyle.fontVariant">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLCurrentStyle.fontWeight">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLCurrentStyle.fontSize">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLCurrentStyle.textAlign">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLCurrentStyle.textDecoration">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement">
      <summary>
            This type is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.isMap">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.useMap">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.mimeType">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.fileSize">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.fileCreatedDate">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.fileModifiedDate">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.fileUpdatedDate">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.protocol">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.href">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.nameProp">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.border">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.vspace">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.hspace">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.alt">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.src">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.lowsrc">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.vrml">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.dynsrc">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.readyState">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.complete">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.loop">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.align">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.onload">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.onerror">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.onabort">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.name">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.width">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.height">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLImgElement.start">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.fontFamily">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.fontStyle">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.fontVariant">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.fontWeight">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.fontSize">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.font">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.color">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.background">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.backgroundColor">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.backgroundImage">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.backgroundRepeat">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.backgroundAttachment">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.backgroundPosition">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.backgroundPositionX">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.backgroundPositionY">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.wordSpacing">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.letterSpacing">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.textDecoration">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.textDecorationNone">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.textDecorationUnderline">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.textDecorationOverline">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.textDecorationLineThrough">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.textDecorationBlink">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.verticalAlign">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.textTransform">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.textAlign">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.textIndent">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.lineHeight">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.marginTop">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.marginRight">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.marginBottom">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.marginLeft">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.margin">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.paddingTop">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.paddingRight">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.paddingBottom">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.paddingLeft">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.padding">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.border">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderTop">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderRight">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderBottom">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderLeft">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderColor">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderTopColor">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderRightColor">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderBottomColor">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderLeftColor">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderWidth">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderTopWidth">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderRightWidth">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderBottomWidth">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderLeftWidth">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderStyle">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderTopStyle">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderRightStyle">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderBottomStyle">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.borderLeftStyle">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.width">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.height">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.styleFloat">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.clear">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.display">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.visibility">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.listStyleType">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.listStylePosition">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.listStyleImage">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.listStyle">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.whiteSpace">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.top">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.left">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.position">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.zIndex">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.overflow">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.pageBreakBefore">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.pageBreakAfter">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.cssText">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.cursor">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.clip">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.filter">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.setAttribute(System.String,System.Object,System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.getAttribute(System.String,System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLRuleStyle.removeAttribute(System.String,System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLScriptElement">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLScriptElement.src">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLScriptElement.htmlFor">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLScriptElement.scriptevent">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLScriptElement.text">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLScriptElement.defer">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLScriptElement.readyState">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLScriptElement.onerror">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLScriptElement.type">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheetRule">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheetRule.selectorText">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheetRule.style">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheetRule.readOnly">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLTitleElement">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTitleElement.text">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.EventReceiverHTMLDocument">
      <summary>
            This class is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.EventReceiverHTMLDocument.OnDocumentEventHandler">
      <summary>
            This member is for internal use only.
            
            Delegate for initializing event onpropertychange.
            </summary>
      <param name="pEvtObj">
      </param>
    </member>
    <member name="E:C1.Win.C1Editor.Internal.HTML.EventReceiverHTMLDocument.OnPropertyChange">
      <summary>
            This member is for internal use only.
            
            Event for receiving onpropertychange from element.
            </summary>
    </member>
    <member name="E:C1.Win.C1Editor.Internal.HTML.EventReceiverHTMLDocument.OnBeforeCut">
      <summary>
            This member is for internal use only.
            
            Event for receiving onbeforecut from element.
            </summary>
    </member>
    <member name="E:C1.Win.C1Editor.Internal.HTML.EventReceiverHTMLDocument.OnBeforeCopy">
      <summary>
            This member is for internal use only.
            
            Event for receiving onbeforecopy from element.
            </summary>
    </member>
    <member name="E:C1.Win.C1Editor.Internal.HTML.EventReceiverHTMLDocument.OnBeforePaste">
      <summary>
            This member is for internal use only.
            
            Event for receiving onbeforepaste from element.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.EventReceiverHTMLDocument.Connect(C1.Win.C1Editor.Internal.HTML.IHTMLDocument2)">
      <summary>
            This member is for internal use only.
            
            Connect to all elements in HTMLDocument.
            </summary>
      <param name="document">Input HTMLDocument</param>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.EventReceiverHTMLDocument.Disconnect">
      <summary>
            Disconnect from all elements in HTMLDocument
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.EventReceiverHTMLDocument.Add(C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
      <summary>
            Adds new element for receiving events and conects to its events
            </summary>
      <param name="element">element to add</param>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.EventReceiverHTMLDocument.DisconnectElement(C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
      <summary>
            This member is for internal use only
            </summary>
      <param name="htmlElement">htmlElement</param>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IAsyncMoniker">
      <summary>
            For internal use only
            
            Helper interface to indicate to MSHTML that
            LoadHTMLMoniker class is capable of Async operations
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IBinding">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IBinding.Abort">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IBinding.Suspend">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IBinding.Resume">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IBinding.SetPriority(System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IBinding.GetPriority(System.Int32@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IBinding.GetBindResult(System.Guid@,System.UInt32@,System.String@,System.UInt32@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IBindStatusCallback">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IBindStatusCallback.OnStartBinding(System.UInt32,C1.Win.C1Editor.Internal.HTML.IBinding)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IBindStatusCallback.GetPriority(System.Int32@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IBindStatusCallback.OnLowResource(System.UInt32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IBindStatusCallback.OnProgress(System.UInt32,System.UInt32,System.UInt32,System.String)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IBindStatusCallback.OnStopBinding(System.UInt32,System.String)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IBindStatusCallback.GetBindInfo(System.UInt32@,C1.Win.C1Editor.Internal.HTML.BINDINFO@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IBindStatusCallback.OnDataAvailable(System.UInt32,System.UInt32,System.Runtime.InteropServices.ComTypes.FORMATETC@,C1.Win.C1Editor.Internal.HTML.STGMEDIUM@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IBindStatusCallback.OnObjectAvailable(System.Guid@,System.Object)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.ShowContextMenu(System.UInt32,C1.Win.C1Editor.Internal.HTML.tagPOINT@,System.Object,System.Object)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.GetHostInfo(C1.Win.C1Editor.Internal.HTML.DOCHOSTUIINFO@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.ShowUI(System.Int32,C1.Win.C1Editor.Internal.HTML.IOleInPlaceActiveObject,C1.Win.C1Editor.Internal.HTML.IOleCommandTarget,C1.Win.C1Editor.Internal.HTML.IOleInPlaceFrame,C1.Win.C1Editor.Internal.HTML.IOleInPlaceUIWindow)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.HideUI">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.UpdateUI">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.EnableModeless(System.Boolean)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.OnDocWindowActivate(System.Boolean)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.OnFrameWindowActivate(System.Boolean)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.ResizeBorder(C1.Win.C1Editor.Internal.HTML.tagRECT@,C1.Win.C1Editor.Internal.HTML.IOleInPlaceUIWindow,System.Boolean)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.TranslateAccelerator(C1.Win.C1Editor.Internal.HTML.tagMSG@,System.Guid@,System.UInt32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.GetOptionKeyPath(System.String@,System.UInt32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.GetDropTarget(C1.Win.C1Editor.Internal.HTML.IDropTarget,C1.Win.C1Editor.Internal.HTML.IDropTarget@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.GetExternal(System.Object@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.TranslateUrl(System.UInt32,System.String,System.String@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDocHostUIHandler.FilterDataObject(System.Runtime.InteropServices.ComTypes.IDataObject,System.Runtime.InteropServices.ComTypes.IDataObject@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IDropTarget">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDropTarget.DragEnter(System.Runtime.InteropServices.ComTypes.IDataObject,System.UInt32,C1.Win.C1Editor.Internal.HTML.tagPOINT,System.UInt32@)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDropTarget.DragOver(System.UInt32,C1.Win.C1Editor.Internal.HTML.tagPOINT,System.UInt32@)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDropTarget.DragLeave">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDropTarget.Drop(System.Runtime.InteropServices.ComTypes.IDataObject,System.UInt32,C1.Win.C1Editor.Internal.HTML.tagPOINT,System.UInt32@)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IEnumUnknown">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IEnumUnknown.Next(System.Int32,System.Object@,System.Int32@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IEnumUnknown.Skip(System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IEnumUnknown.Reset">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IEnumUnknown.Clone(C1.Win.C1Editor.Internal.HTML.IEnumUnknown@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IMalloc">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMalloc.Alloc(System.UInt32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMalloc.Realloc(System.IntPtr,System.UInt32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMalloc.Free(System.IntPtr)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMalloc.GetSize(System.IntPtr)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMalloc.DidAlloc(System.IntPtr)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMalloc.HeapMinimize">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IOleCommandTarget">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleCommandTarget.QueryStatus(System.IntPtr,System.UInt32,C1.Win.C1Editor.Internal.HTML.tagOLECMD@,System.IntPtr)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleCommandTarget.Exec(System.IntPtr,System.UInt32,System.UInt32,System.Object@,System.IntPtr)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IPersistMoniker">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IPersistMoniker.GetClassID(System.Guid@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IPersistMoniker.IsDirty">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IPersistMoniker.Load(System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker,System.Object,System.UInt32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IPersistMoniker.SaveCompleted(System.Runtime.InteropServices.ComTypes.IMoniker,System.Object)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IPersistMoniker.GetCurMoniker">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IServiceProvider">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IServiceProvider.QueryService(System.Guid@,System.Guid@,System.IntPtr@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLAnchorEvents2">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLAnchorEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLAreaEvents2">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLAreaEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLButtonElementEvents2">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLButtonElementEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLControlElementEvents2">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLControlElementEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onhelp(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onclick(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.ondblclick(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onkeydown(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onkeyup(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onkeypress(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onmousedown(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onmousemove(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onmouseup(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onmouseout(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onmouseover(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onreadystatechange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onbeforeupdate(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onafterupdate(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onrowexit(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onrowenter(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.ondragstart(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onselectstart(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onerrorupdate(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.oncontextmenu(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onstop(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onrowsdelete(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onrowsinserted(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.oncellchange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.ondatasetchanged(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.ondataavailable(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.ondatasetcomplete(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onbeforeeditfocus(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onselectionchange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.oncontrolselect(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onmousewheel(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onfocusin(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onfocusout(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onactivate(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.ondeactivate(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onbeforeactivate(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLDocumentEvents2.onbeforedeactivate(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLElementEvents2">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLElementEvents2.onbeforecopy(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only
            </summary>
      <param name="pEvtObj">Event object.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLElementEvents2.onbeforecut(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
      <param name="pEvtObj">Event object.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLElementEvents2.onbeforepaste(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLElementEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
      <param name="pEvtObj">Event object.</param>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLFormElementEvents2">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLFormElementEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLImgEvents2">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLImgEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLInputFileElementEvents2">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLInputFileElementEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLInputImageEvents2">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLInputImageEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLInputTextElementEvents2">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLInputTextElementEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLLabelEvents2">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLLabelEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLMapEvents2">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLMapEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLMarqueeElementEvents2">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLMarqueeElementEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLOptionButtonElementEvents2">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLOptionButtonElementEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLScriptEvents2">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLScriptEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLSelectElementEvents2">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLSelectElementEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLTableEvents2">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLTableEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.HTMLTextContainerEvents2">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.HTMLTextContainerEvents2.onpropertychange(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IDisplayPointer">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.MoveToPoint(C1.Win.C1Editor.Internal.HTML.tagPOINT,System.Int32,C1.Win.C1Editor.Internal.HTML.IHTMLElement,System.UInt32,System.UInt32@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.MoveUnit(System.Int32,System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.PositionMarkupPointer(C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.MoveToPointer(C1.Win.C1Editor.Internal.HTML.IDisplayPointer)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.SetPointerGravity(System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.GetPointerGravity(System.Int32@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.SetDisplayGravity(System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.GetDisplayGravity(System.Int32@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.IsPositioned(System.Boolean@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.Unposition">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.IsEqualTo(C1.Win.C1Editor.Internal.HTML.IDisplayPointer,System.Boolean@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.IsLeftOf(C1.Win.C1Editor.Internal.HTML.IDisplayPointer,System.Boolean@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.IsRightOf(C1.Win.C1Editor.Internal.HTML.IDisplayPointer,System.Boolean@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.IsAtBOL(System.Boolean@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.MoveToMarkupPointer(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IDisplayPointer)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.ScrollIntoView">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.GetLineInfo(C1.Win.C1Editor.Internal.HTML.ILineInfo@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.GetFlowElement(C1.Win.C1Editor.Internal.HTML.IHTMLElement@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayPointer.QueryBreaks(System.UInt32@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IDisplayServices">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayServices.CreateDisplayPointer(C1.Win.C1Editor.Internal.HTML.IDisplayPointer@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayServices.TransformRect(C1.Win.C1Editor.Internal.HTML.tagRECT@,System.Int32,System.Int32,C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayServices.TransformPoint(C1.Win.C1Editor.Internal.HTML.tagPOINT@,System.Int32,System.Int32,C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayServices.GetCaret(C1.Win.C1Editor.Internal.HTML.IHTMLCaret@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayServices.GetComputedStyle(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayServices.ScrollRectIntoView(C1.Win.C1Editor.Internal.HTML.IHTMLElement,C1.Win.C1Editor.Internal.HTML.tagRECT)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IDisplayServices.HasFlowLayout(C1.Win.C1Editor.Internal.HTML.IHTMLElement,System.Boolean@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IElementBehavior">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IElementBehavior.Init(C1.Win.C1Editor.Internal.HTML.IElementBehaviorSite)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IElementBehavior.Notify(System.Int32,System.IntPtr)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IElementBehavior.Detach">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IElementBehaviorFactory">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IElementBehaviorFactory.FindBehavior(System.String,System.String,C1.Win.C1Editor.Internal.HTML.IElementBehaviorSite)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IElementBehaviorSite">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IElementBehaviorSite.GetElement">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IElementBehaviorSite.RegisterNotification(System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IElementSegment">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IElementSegment.GetPointers(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IElementSegment.GetElement(C1.Win.C1Editor.Internal.HTML.IHTMLElement@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IElementSegment.SetPrimary(System.Boolean)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IElementSegment.IsPrimary(System.Boolean@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHighlightRenderingServices">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHighlightRenderingServices.AddSegment(C1.Win.C1Editor.Internal.HTML.IDisplayPointer,C1.Win.C1Editor.Internal.HTML.IDisplayPointer,C1.Win.C1Editor.Internal.HTML.IHTMLRenderStyle,C1.Win.C1Editor.Internal.HTML.IHighlightSegment@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHighlightRenderingServices.MoveSegmentToPointers(C1.Win.C1Editor.Internal.HTML.IHighlightSegment,C1.Win.C1Editor.Internal.HTML.IDisplayPointer,C1.Win.C1Editor.Internal.HTML.IDisplayPointer)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHighlightRenderingServices.RemoveSegment(C1.Win.C1Editor.Internal.HTML.IHighlightSegment)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHighlightSegment">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHighlightSegment.GetPointers(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLAttributeCollection">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLAttributeCollection.length">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLAttributeCollection.GetEnumerator">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLAttributeCollection.item(System.Object)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement">
      <summary>
        <para>
          <c>IHTMLBodyElement</c> interface.</para>
      </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.createTextRange">
      <summary>
        <para>
          <c>createTextRange</c> method of <c>IHTMLBodyElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>createTextRange</c> method was the following:  <c>HRESULT createTextRange ([out, retval] IHTMLTxtRange** ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.aLink">
      <summary>
        <para>
          <c>aLink</c> property of <c>IHTMLBodyElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>aLink</c> property was the following:  <c>VARIANT aLink</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.background">
      <summary>
        <para>
          <c>background</c> property of <c>IHTMLBodyElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>background</c> property was the following:  <c>BSTR background</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.bgColor">
      <summary>
        <para>
          <c>bgColor</c> property of <c>IHTMLBodyElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>bgColor</c> property was the following:  <c>VARIANT bgColor</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.bgProperties">
      <summary>
        <para>
          <c>bgProperties</c> property of <c>IHTMLBodyElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>bgProperties</c> property was the following:  <c>BSTR bgProperties</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.bottomMargin">
      <summary>
        <para>
          <c>bottomMargin</c> property of <c>IHTMLBodyElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>bottomMargin</c> property was the following:  <c>VARIANT bottomMargin</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.leftMargin">
      <summary>
        <para>
          <c>leftMargin</c> property of <c>IHTMLBodyElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>leftMargin</c> property was the following:  <c>VARIANT leftMargin</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.link">
      <summary>
        <para>
          <c>link</c> property of <c>IHTMLBodyElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>link</c> property was the following:  <c>VARIANT link</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.noWrap">
      <summary>
        <para>
          <c>noWrap</c> property of <c>IHTMLBodyElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>noWrap</c> property was the following:  <c>VARIANT_BOOL noWrap</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.onbeforeunload">
      <summary>
        <para>
          <c>onbeforeunload</c> property of <c>IHTMLBodyElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onbeforeunload</c> property was the following:  <c>VARIANT onbeforeunload</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.onload">
      <summary>
        <para>
          <c>onload</c> property of <c>IHTMLBodyElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onload</c> property was the following:  <c>VARIANT onload</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.onselect">
      <summary>
        <para>
          <c>onselect</c> property of <c>IHTMLBodyElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onselect</c> property was the following:  <c>VARIANT onselect</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.onunload">
      <summary>
        <para>
          <c>onunload</c> property of <c>IHTMLBodyElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onunload</c> property was the following:  <c>VARIANT onunload</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.rightMargin">
      <summary>
        <para>
          <c>rightMargin</c> property of <c>IHTMLBodyElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>rightMargin</c> property was the following:  <c>VARIANT rightMargin</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.scroll">
      <summary>
        <para>
          <c>scroll</c> property of <c>IHTMLBodyElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>scroll</c> property was the following:  <c>BSTR scroll</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.text">
      <summary>
        <para>
          <c>text</c> property of <c>IHTMLBodyElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>text</c> property was the following:  <c>VARIANT text</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.topMargin">
      <summary>
        <para>
          <c>topMargin</c> property of <c>IHTMLBodyElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>topMargin</c> property was the following:  <c>VARIANT topMargin</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLBodyElement.vLink">
      <summary>
        <para>
          <c>vLink</c> property of <c>IHTMLBodyElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>vLink</c> property was the following:  <c>VARIANT vLink</c>;</para>
      </remarks>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLCaret">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLCaret.MoveCaretToPointer(C1.Win.C1Editor.Internal.HTML.IDisplayPointer,System.Boolean,System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLCaret.MoveCaretToPointerEx(C1.Win.C1Editor.Internal.HTML.IDisplayPointer,System.Boolean,System.Boolean,System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLCaret.MoveMarkupPointerToCaret(C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLCaret.MoveDisplayPointerToCaret(C1.Win.C1Editor.Internal.HTML.IDisplayPointer)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLCaret.IsVisible(System.Boolean@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLCaret.Show(System.Boolean)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLCaret.Hide">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLCaret.InsertText(System.String,System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLCaret.ScrollIntoView">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLCaret.GetLocation(C1.Win.C1Editor.Internal.HTML.tagPOINT@,System.Boolean)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLCaret.GetCaretDirection(System.Int32@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLCaret.SetCaretDirection(System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLChangeLog">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLChangeLog.GetNextChange">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLChangeSink">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLChangeSink.Notify">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.bold">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.italic">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.underline">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.overline">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.strikeOut">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.subScript">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.superScript">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.explicitFace">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.fontWeight">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.fontSize">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.fontName">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.hasBgColor">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.textColor">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.backgroundColor">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.preFormatted">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.direction">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.blockDirection">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.OL">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle.IsEqual(C1.Win.C1Editor.Internal.HTML.IHTMLComputedStyle,System.Boolean@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLControlElement">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLControlElement.TabIndex">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlElement.Focus">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLControlElement.AccessKey">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLControlElement.OnBlur">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLControlElement.OnFocus">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLControlElement.OnResize">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlElement.Blur">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlElement.AddFilter(System.Object)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlElement.RemoveFilter(System.Object)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLControlElement.ClientHeight">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLControlElement.ClientWidth">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLControlElement.ClientTop">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLControlElement.ClientLeft">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.Select">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.Add(C1.Win.C1Editor.Internal.HTML.IHTMLControlElement)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.Remove(System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.Item(System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.ScrollIntoView(System.Object)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.QueryCommandSupported(System.String)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.QueryCommandEnabled(System.String)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.QueryCommandState(System.String)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.QueryCommandIndeterm(System.String)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.QueryCommandText(System.String)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.QueryCommandValue(System.String)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.ExecCommand(System.String,System.Boolean,System.Object)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.ExecCommandShowHelp(System.String)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.CommonParentElement">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLControlRange.Length">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLDocument">
      <summary>
        <para>
          <c>IHTMLDocument</c> interface.</para>
      </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument.Script">
      <summary>
        <para>
          <c>Script</c> property of <c>IHTMLDocument</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>Script</c> property was the following:  <c>IDispatch* Script</c>;</para>
      </remarks>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2">
      <summary>
        <para>
          <c>IHTMLDocument2</c> interface.</para>
      </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.write(System.Object)">
      <summary>
        <para>
          <c>write</c> method of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>write</c> method was the following:  <c>HRESULT write (SAFEARRAY() psarray)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.writeln(System.Object)">
      <summary>
        <para>
          <c>writeln</c> method of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>writeln</c> method was the following:  <c>HRESULT writeln (SAFEARRAY() psarray)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.open(System.String,System.Object,System.Object,System.Object)">
      <summary>
        <para>
          <c>open</c> method of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>open</c> method was the following:  <c>HRESULT open ([optional, defaultvalue("text/html")] BSTR url, [optional] VARIANT name, [optional] VARIANT features, [optional] VARIANT replace, [out, retval] IDispatch** ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.close">
      <summary>
        <para>
          <c>close</c> method of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>close</c> method was the following:  <c>HRESULT close (void)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.clear">
      <summary>
        <para>
          <c>clear</c> method of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>clear</c> method was the following:  <c>HRESULT clear (void)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.queryCommandSupported(System.String)">
      <summary>
        <para>
          <c>queryCommandSupported</c> method of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>queryCommandSupported</c> method was the following:  <c>HRESULT queryCommandSupported (BSTR cmdID, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.queryCommandEnabled(System.String)">
      <summary>
        <para>
          <c>queryCommandEnabled</c> method of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>queryCommandEnabled</c> method was the following:  <c>HRESULT queryCommandEnabled (BSTR cmdID, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.queryCommandState(System.String)">
      <summary>
        <para>
          <c>queryCommandState</c> method of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>queryCommandState</c> method was the following:  <c>HRESULT queryCommandState (BSTR cmdID, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.queryCommandIndeterm(System.String)">
      <summary>
        <para>
          <c>queryCommandIndeterm</c> method of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>queryCommandIndeterm</c> method was the following:  <c>HRESULT queryCommandIndeterm (BSTR cmdID, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.queryCommandText(System.String)">
      <summary>
        <para>
          <c>queryCommandText</c> method of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>queryCommandText</c> method was the following:  <c>HRESULT queryCommandText (BSTR cmdID, [out, retval] BSTR* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.queryCommandValue(System.String)">
      <summary>
        <para>
          <c>queryCommandValue</c> method of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>queryCommandValue</c> method was the following:  <c>HRESULT queryCommandValue (BSTR cmdID, [out, retval] VARIANT* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.execCommand(System.String,System.Boolean,System.Object)">
      <summary>
        <para>
          <c>execCommand</c> method of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>execCommand</c> method was the following:  <c>HRESULT execCommand (BSTR cmdID, [optional, defaultvalue(0)] VARIANT_BOOL showUI, [optional] VARIANT value, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.execCommandShowHelp(System.String)">
      <summary>
        <para>
          <c>execCommandShowHelp</c> method of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>execCommandShowHelp</c> method was the following:  <c>HRESULT execCommandShowHelp (BSTR cmdID, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.createElement(System.String)">
      <summary>
        <para>
          <c>createElement</c> method of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>createElement</c> method was the following:  <c>HRESULT createElement (BSTR eTag, [out, retval] IHTMLElement** ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.elementFromPoint(System.Int32,System.Int32)">
      <summary>
        <para>
          <c>elementFromPoint</c> method of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>elementFromPoint</c> method was the following:  <c>HRESULT elementFromPoint (long x, long y, [out, retval] IHTMLElement** ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.toString">
      <summary>
        <para>
          <c>toString</c> method of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>toString</c> method was the following:  <c>HRESULT toString ([out, retval] BSTR* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.createStyleSheet(System.String,System.Int32)">
      <summary>
        <para>
          <c>createStyleSheet</c> method of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>createStyleSheet</c> method was the following:  <c>HRESULT createStyleSheet ([optional, defaultvalue("")] BSTR bstrHref, [optional, defaultvalue(-1)] long lIndex, [out, retval] IHTMLStyleSheet** ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.activeElement">
      <summary>
        <para>
          <c>activeElement</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>activeElement</c> property was the following:  <c>IHTMLElement* activeElement</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.alinkColor">
      <summary>
        <para>
          <c>alinkColor</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>alinkColor</c> property was the following:  <c>VARIANT alinkColor</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.all">
      <summary>
        <para>
          <c>all</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>all</c> property was the following:  <c>IHTMLElementCollection* all</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.anchors">
      <summary>
        <para>
          <c>anchors</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>anchors</c> property was the following:  <c>IHTMLElementCollection* anchors</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.applets">
      <summary>
        <para>
          <c>applets</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>applets</c> property was the following:  <c>IHTMLElementCollection* applets</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.bgColor">
      <summary>
        <para>
          <c>bgColor</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>bgColor</c> property was the following:  <c>VARIANT bgColor</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.body">
      <summary>
        <para>
          <c>body</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>body</c> property was the following:  <c>IHTMLElement* body</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.charset">
      <summary>
        <para>
          <c>charset</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>charset</c> property was the following:  <c>BSTR charset</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.cookie">
      <summary>
        <para>
          <c>cookie</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>cookie</c> property was the following:  <c>BSTR cookie</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.defaultCharset">
      <summary>
        <para>
          <c>defaultCharset</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>defaultCharset</c> property was the following:  <c>BSTR defaultCharset</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.designMode">
      <summary>
        <para>
          <c>designMode</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>designMode</c> property was the following:  <c>BSTR designMode</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.domain">
      <summary>
        <para>
          <c>domain</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>domain</c> property was the following:  <c>BSTR domain</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.embeds">
      <summary>
        <para>
          <c>embeds</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>embeds</c> property was the following:  <c>IHTMLElementCollection* embeds</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.expando">
      <summary>
        <para>
          <c>expando</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>expando</c> property was the following:  <c>VARIANT_BOOL expando</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.fgColor">
      <summary>
        <para>
          <c>fgColor</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>fgColor</c> property was the following:  <c>VARIANT fgColor</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.fileCreatedDate">
      <summary>
        <para>
          <c>fileCreatedDate</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>fileCreatedDate</c> property was the following:  <c>BSTR fileCreatedDate</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.fileModifiedDate">
      <summary>
        <para>
          <c>fileModifiedDate</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>fileModifiedDate</c> property was the following:  <c>BSTR fileModifiedDate</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.fileSize">
      <summary>
        <para>
          <c>fileSize</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>fileSize</c> property was the following:  <c>BSTR fileSize</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.fileUpdatedDate">
      <summary>
        <para>
          <c>fileUpdatedDate</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>fileUpdatedDate</c> property was the following:  <c>BSTR fileUpdatedDate</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.forms">
      <summary>
        <para>
          <c>forms</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>forms</c> property was the following:  <c>IHTMLElementCollection* forms</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.frames">
      <summary>
        <para>
          <c>frames</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>frames</c> property was the following:  <c>IHTMLFramesCollection2* frames</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.images">
      <summary>
        <para>
          <c>images</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>images</c> property was the following:  <c>IHTMLElementCollection* images</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.lastModified">
      <summary>
        <para>
          <c>lastModified</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>lastModified</c> property was the following:  <c>BSTR lastModified</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.linkColor">
      <summary>
        <para>
          <c>linkColor</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>linkColor</c> property was the following:  <c>VARIANT linkColor</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.links">
      <summary>
        <para>
          <c>links</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>links</c> property was the following:  <c>IHTMLElementCollection* links</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.location">
      <summary>
        <para>
          <c>location</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>location</c> property was the following:  <c>IHTMLLocation* location</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.mimeType">
      <summary>
        <para>
          <c>mimeType</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>mimeType</c> property was the following:  <c>BSTR mimeType</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.nameProp">
      <summary>
        <para>
          <c>nameProp</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>nameProp</c> property was the following:  <c>BSTR nameProp</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onafterupdate">
      <summary>
        <para>
          <c>onafterupdate</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onafterupdate</c> property was the following:  <c>VARIANT onafterupdate</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onbeforeupdate">
      <summary>
        <para>
          <c>onbeforeupdate</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onbeforeupdate</c> property was the following:  <c>VARIANT onbeforeupdate</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onclick">
      <summary>
        <para>
          <c>onclick</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onclick</c> property was the following:  <c>VARIANT onclick</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.ondblclick">
      <summary>
        <para>
          <c>ondblclick</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>ondblclick</c> property was the following:  <c>VARIANT ondblclick</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.ondragstart">
      <summary>
        <para>
          <c>ondragstart</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>ondragstart</c> property was the following:  <c>VARIANT ondragstart</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onerrorupdate">
      <summary>
        <para>
          <c>onerrorupdate</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onerrorupdate</c> property was the following:  <c>VARIANT onerrorupdate</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onhelp">
      <summary>
        <para>
          <c>onhelp</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onhelp</c> property was the following:  <c>VARIANT onhelp</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onkeydown">
      <summary>
        <para>
          <c>onkeydown</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onkeydown</c> property was the following:  <c>VARIANT onkeydown</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onkeypress">
      <summary>
        <para>
          <c>onkeypress</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onkeypress</c> property was the following:  <c>VARIANT onkeypress</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onkeyup">
      <summary>
        <para>
          <c>onkeyup</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onkeyup</c> property was the following:  <c>VARIANT onkeyup</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onmousedown">
      <summary>
        <para>
          <c>onmousedown</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onmousedown</c> property was the following:  <c>VARIANT onmousedown</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onmousemove">
      <summary>
        <para>
          <c>onmousemove</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onmousemove</c> property was the following:  <c>VARIANT onmousemove</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onmouseout">
      <summary>
        <para>
          <c>onmouseout</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onmouseout</c> property was the following:  <c>VARIANT onmouseout</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onmouseover">
      <summary>
        <para>
          <c>onmouseover</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onmouseover</c> property was the following:  <c>VARIANT onmouseover</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onmouseup">
      <summary>
        <para>
          <c>onmouseup</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onmouseup</c> property was the following:  <c>VARIANT onmouseup</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onreadystatechange">
      <summary>
        <para>
          <c>onreadystatechange</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onreadystatechange</c> property was the following:  <c>VARIANT onreadystatechange</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onrowenter">
      <summary>
        <para>
          <c>onrowenter</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onrowenter</c> property was the following:  <c>VARIANT onrowenter</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onrowexit">
      <summary>
        <para>
          <c>onrowexit</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onrowexit</c> property was the following:  <c>VARIANT onrowexit</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.onselectstart">
      <summary>
        <para>
          <c>onselectstart</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onselectstart</c> property was the following:  <c>VARIANT onselectstart</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.parentWindow">
      <summary>
        <para>
          <c>parentWindow</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>parentWindow</c> property was the following:  <c>IHTMLWindow2* parentWindow</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.plugins">
      <summary>
        <para>
          <c>plugins</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>plugins</c> property was the following:  <c>IHTMLElementCollection* plugins</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.protocol">
      <summary>
        <para>
          <c>protocol</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>protocol</c> property was the following:  <c>BSTR protocol</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.readyState">
      <summary>
        <para>
          <c>readyState</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>readyState</c> property was the following:  <c>BSTR readyState</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.referrer">
      <summary>
        <para>
          <c>referrer</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>referrer</c> property was the following:  <c>BSTR referrer</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.Script">
      <summary>
        <para>
          <c>Script</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>Script</c> property was the following:  <c>IDispatch* Script</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.scripts">
      <summary>
        <para>
          <c>scripts</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>scripts</c> property was the following:  <c>IHTMLElementCollection* scripts</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.security">
      <summary>
        <para>
          <c>security</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>security</c> property was the following:  <c>BSTR security</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.selection">
      <summary>
        <para>
          <c>selection</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>selection</c> property was the following:  <c>IHTMLSelectionObject* selection</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.styleSheets">
      <summary>
        <para>
          <c>styleSheets</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>styleSheets</c> property was the following:  <c>IHTMLStyleSheetsCollection* styleSheets</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.title">
      <summary>
        <para>
          <c>title</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>title</c> property was the following:  <c>BSTR title</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.url">
      <summary>
        <para>
          <c>url</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>url</c> property was the following:  <c>BSTR url</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument2.vlinkColor">
      <summary>
        <para>
          <c>vlinkColor</c> property of <c>IHTMLDocument2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>vlinkColor</c> property was the following:  <c>VARIANT vlinkColor</c>;</para>
      </remarks>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3">
      <summary>
        <para>
          <c>IHTMLDocument3</c> interface.</para>
      </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.releaseCapture">
      <summary>
        <para>
          <c>releaseCapture</c> method of <c>IHTMLDocument3</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>releaseCapture</c> method was the following:  <c>HRESULT releaseCapture (void)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.recalc(System.Boolean)">
      <summary>
        <para>
          <c>recalc</c> method of <c>IHTMLDocument3</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>recalc</c> method was the following:  <c>HRESULT recalc ([optional, defaultvalue(0)] VARIANT_BOOL fForce)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.createTextNode(System.String)">
      <summary>
        <para>
          <c>createTextNode</c> method of <c>IHTMLDocument3</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>createTextNode</c> method was the following:  <c>HRESULT createTextNode (BSTR text, [out, retval] IHTMLDOMNode** ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.attachEvent(System.String,System.Object)">
      <summary>
        <para>
          <c>attachEvent</c> method of <c>IHTMLDocument3</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>attachEvent</c> method was the following:  <c>HRESULT attachEvent (BSTR event, IDispatch* pdisp, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.detachEvent(System.String,System.Object)">
      <summary>
        <para>
          <c>detachEvent</c> method of <c>IHTMLDocument3</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>detachEvent</c> method was the following:  <c>HRESULT detachEvent (BSTR event, IDispatch* pdisp)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.createDocumentFragment">
      <summary>
        <para>
          <c>createDocumentFragment</c> method of <c>IHTMLDocument3</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>createDocumentFragment</c> method was the following:  <c>HRESULT createDocumentFragment ([out, retval] IHTMLDocument2** ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.getElementsByName(System.String)">
      <summary>
        <para>
          <c>getElementsByName</c> method of <c>IHTMLDocument3</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>getElementsByName</c> method was the following:  <c>HRESULT getElementsByName (BSTR v, [out, retval] IHTMLElementCollection** ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.getElementById(System.String)">
      <summary>
        <para>
          <c>getElementById</c> method of <c>IHTMLDocument3</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>getElementById</c> method was the following:  <c>HRESULT getElementById (BSTR v, [out, retval] IHTMLElement** ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.getElementsByTagName(System.String)">
      <summary>
        <para>
          <c>getElementsByTagName</c> method of <c>IHTMLDocument3</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>getElementsByTagName</c> method was the following:  <c>HRESULT getElementsByTagName (BSTR v, [out, retval] IHTMLElementCollection** ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.baseUrl">
      <summary>
        <para>
          <c>baseUrl</c> property of <c>IHTMLDocument3</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>baseUrl</c> property was the following:  <c>BSTR baseUrl</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.childNodes">
      <summary>
        <para>
          <c>childNodes</c> property of <c>IHTMLDocument3</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>childNodes</c> property was the following:  <c>IDispatch* childNodes</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.dir">
      <summary>
        <para>
          <c>dir</c> property of <c>IHTMLDocument3</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>dir</c> property was the following:  <c>BSTR dir</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.documentElement">
      <summary>
        <para>
          <c>documentElement</c> property of <c>IHTMLDocument3</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>documentElement</c> property was the following:  <c>IHTMLElement* documentElement</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.enableDownload">
      <summary>
        <para>
          <c>enableDownload</c> property of <c>IHTMLDocument3</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>enableDownload</c> property was the following:  <c>VARIANT_BOOL enableDownload</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.inheritStyleSheets">
      <summary>
        <para>
          <c>inheritStyleSheets</c> property of <c>IHTMLDocument3</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>inheritStyleSheets</c> property was the following:  <c>VARIANT_BOOL inheritStyleSheets</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.onbeforeeditfocus">
      <summary>
        <para>
          <c>onbeforeeditfocus</c> property of <c>IHTMLDocument3</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onbeforeeditfocus</c> property was the following:  <c>VARIANT onbeforeeditfocus</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.oncellchange">
      <summary>
        <para>
          <c>oncellchange</c> property of <c>IHTMLDocument3</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>oncellchange</c> property was the following:  <c>VARIANT oncellchange</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.oncontextmenu">
      <summary>
        <para>
          <c>oncontextmenu</c> property of <c>IHTMLDocument3</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>oncontextmenu</c> property was the following:  <c>VARIANT oncontextmenu</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.ondataavailable">
      <summary>
        <para>
          <c>ondataavailable</c> property of <c>IHTMLDocument3</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>ondataavailable</c> property was the following:  <c>VARIANT ondataavailable</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.ondatasetchanged">
      <summary>
        <para>
          <c>ondatasetchanged</c> property of <c>IHTMLDocument3</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>ondatasetchanged</c> property was the following:  <c>VARIANT ondatasetchanged</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.ondatasetcomplete">
      <summary>
        <para>
          <c>ondatasetcomplete</c> property of <c>IHTMLDocument3</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>ondatasetcomplete</c> property was the following:  <c>VARIANT ondatasetcomplete</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.onpropertychange">
      <summary>
        <para>
          <c>onpropertychange</c> property of <c>IHTMLDocument3</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onpropertychange</c> property was the following:  <c>VARIANT onpropertychange</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.onrowsdelete">
      <summary>
        <para>
          <c>onrowsdelete</c> property of <c>IHTMLDocument3</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onrowsdelete</c> property was the following:  <c>VARIANT onrowsdelete</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.onrowsinserted">
      <summary>
        <para>
          <c>onrowsinserted</c> property of <c>IHTMLDocument3</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onrowsinserted</c> property was the following:  <c>VARIANT onrowsinserted</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.onstop">
      <summary>
        <para>
          <c>onstop</c> property of <c>IHTMLDocument3</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onstop</c> property was the following:  <c>VARIANT onstop</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.parentDocument">
      <summary>
        <para>
          <c>parentDocument</c> property of <c>IHTMLDocument3</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>parentDocument</c> property was the following:  <c>IHTMLDocument2* parentDocument</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument3.uniqueID">
      <summary>
        <para>
          <c>uniqueID</c> property of <c>IHTMLDocument3</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>uniqueID</c> property was the following:  <c>BSTR uniqueID</c>;</para>
      </remarks>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLDocument4">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument4.focus">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument4.hasFocus">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument4.onselectionchange">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument4.namespaces">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument4.createDocumentFromUrl(System.String,System.String)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument4.media">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument4.createEventObject">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument4.fireEvent(System.String,System.Object)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDocument4.createRenderStyle(System.IntPtr)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument4.oncontrolselect">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDocument4.URLUnencoded">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLDOMAttribute">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDOMAttribute.nodeName">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDOMAttribute.nodeValue">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDOMAttribute.specified">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLDOMChildrenCollection">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDOMChildrenCollection.length">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDOMChildrenCollection.GetEnumerator">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDOMChildrenCollection.item(System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.nodeType">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.parentNode">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.hasChildNodes">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.childNodes">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.attributes">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.insertBefore(C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode,System.Object)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.removeChild(C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.replaceChild(C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode,C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.cloneNode(System.Boolean)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.removeNode(System.Boolean)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.swapNode(C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.replaceNode(C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.appendChild(C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.nodeName">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.nodeValue">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.firstChild">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.lastChild">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.previousSibling">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLDOMNode.nextSibling">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLEditDesigner">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLEditDesigner.PreHandleEvent(System.Int32,C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLEditDesigner.PostHandleEvent(System.Int32,C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLEditDesigner.TranslateAccelerator(System.Int32,C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLEditDesigner.PostEditorEventNotify(System.Int32,C1.Win.C1Editor.Internal.HTML.IHTMLEventObj)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLEditHost">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLEditHost.SnapRect(C1.Win.C1Editor.Internal.HTML.IHTMLElement,C1.Win.C1Editor.Internal.HTML.tagRECT@,System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLEditServices">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLEditServices.AddDesigner(C1.Win.C1Editor.Internal.HTML.IHTMLEditDesigner)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLEditServices.RemoveDesigner(C1.Win.C1Editor.Internal.HTML.IHTMLEditDesigner)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLEditServices.GetSelectionServices(C1.Win.C1Editor.Internal.HTML.IMarkupContainer,C1.Win.C1Editor.Internal.HTML.ISelectionServices@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLEditServices.MoveToSelectionAnchor(C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLEditServices.MoveToSelectionEnd(C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLEditServices.SelectRange(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLElement">
      <summary>
        <para>
          <c>IHTMLElement</c> interface.</para>
      </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement.setAttribute(System.String,System.Object,System.Int32)">
      <summary>
        <para>
          <c>setAttribute</c> method of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>setAttribute</c> method was the following:  <c>HRESULT setAttribute (BSTR strAttributeName, VARIANT AttributeValue, [optional, defaultvalue(1)] long lFlags)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement.getAttribute(System.String,System.Int32)">
      <summary>
        <para>
          <c>getAttribute</c> method of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>getAttribute</c> method was the following:  <c>HRESULT getAttribute (BSTR strAttributeName, [optional, defaultvalue(0)] long lFlags, [out, retval] VARIANT* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement.removeAttribute(System.String,System.Int32)">
      <summary>
        <para>
          <c>removeAttribute</c> method of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>removeAttribute</c> method was the following:  <c>HRESULT removeAttribute (BSTR strAttributeName, [optional, defaultvalue(1)] long lFlags, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement.scrollIntoView(System.Object)">
      <summary>
        <para>
          <c>scrollIntoView</c> method of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>scrollIntoView</c> method was the following:  <c>HRESULT scrollIntoView ([optional] VARIANT varargStart)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement.contains(C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
      <summary>
        <para>
          <c>contains</c> method of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>contains</c> method was the following:  <c>HRESULT contains (IHTMLElement* pChild, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement.insertAdjacentHTML(System.String,System.String)">
      <summary>
        <para>
          <c>insertAdjacentHTML</c> method of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>insertAdjacentHTML</c> method was the following:  <c>HRESULT insertAdjacentHTML (BSTR where, BSTR html)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement.insertAdjacentText(System.String,System.String)">
      <summary>
        <para>
          <c>insertAdjacentText</c> method of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>insertAdjacentText</c> method was the following:  <c>HRESULT insertAdjacentText (BSTR where, BSTR text)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement.click">
      <summary>
        <para>
          <c>click</c> method of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>click</c> method was the following:  <c>HRESULT click (void)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement.toString">
      <summary>
        <para>
          <c>toString</c> method of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>toString</c> method was the following:  <c>HRESULT toString ([out, retval] BSTR* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.all">
      <summary>
        <para>
          <c>all</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>all</c> property was the following:  <c>IDispatch* all</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.children">
      <summary>
        <para>
          <c>children</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>children</c> property was the following:  <c>IDispatch* children</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.className">
      <summary>
        <para>
          <c>className</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>className</c> property was the following:  <c>BSTR className</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.document">
      <summary>
        <para>
          <c>document</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>document</c> property was the following:  <c>IDispatch* document</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.filters">
      <summary>
        <para>
          <c>filters</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>filters</c> property was the following:  <c>IHTMLFiltersCollection* filters</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.id">
      <summary>
        <para>
          <c>id</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>id</c> property was the following:  <c>BSTR id</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.innerHTML">
      <summary>
        <para>
          <c>innerHTML</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>innerHTML</c> property was the following:  <c>BSTR innerHTML</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.innerText">
      <summary>
        <para>
          <c>innerText</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>innerText</c> property was the following:  <c>BSTR innerText</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.isTextEdit">
      <summary>
        <para>
          <c>isTextEdit</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>isTextEdit</c> property was the following:  <c>VARIANT_BOOL isTextEdit</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.lang">
      <summary>
        <para>
          <c>lang</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>lang</c> property was the following:  <c>BSTR lang</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.language">
      <summary>
        <para>
          <c>language</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>language</c> property was the following:  <c>BSTR language</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.offsetHeight">
      <summary>
        <para>
          <c>offsetHeight</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>offsetHeight</c> property was the following:  <c>long offsetHeight</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.offsetLeft">
      <summary>
        <para>
          <c>offsetLeft</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>offsetLeft</c> property was the following:  <c>long offsetLeft</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.offsetParent">
      <summary>
        <para>
          <c>offsetParent</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>offsetParent</c> property was the following:  <c>IHTMLElement* offsetParent</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.offsetTop">
      <summary>
        <para>
          <c>offsetTop</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>offsetTop</c> property was the following:  <c>long offsetTop</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.offsetWidth">
      <summary>
        <para>
          <c>offsetWidth</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>offsetWidth</c> property was the following:  <c>long offsetWidth</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onafterupdate">
      <summary>
        <para>
          <c>onafterupdate</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onafterupdate</c> property was the following:  <c>VARIANT onafterupdate</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onbeforeupdate">
      <summary>
        <para>
          <c>onbeforeupdate</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onbeforeupdate</c> property was the following:  <c>VARIANT onbeforeupdate</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onclick">
      <summary>
        <para>
          <c>onclick</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onclick</c> property was the following:  <c>VARIANT onclick</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.ondataavailable">
      <summary>
        <para>
          <c>ondataavailable</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>ondataavailable</c> property was the following:  <c>VARIANT ondataavailable</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.ondatasetchanged">
      <summary>
        <para>
          <c>ondatasetchanged</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>ondatasetchanged</c> property was the following:  <c>VARIANT ondatasetchanged</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.ondatasetcomplete">
      <summary>
        <para>
          <c>ondatasetcomplete</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>ondatasetcomplete</c> property was the following:  <c>VARIANT ondatasetcomplete</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.ondblclick">
      <summary>
        <para>
          <c>ondblclick</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>ondblclick</c> property was the following:  <c>VARIANT ondblclick</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.ondragstart">
      <summary>
        <para>
          <c>ondragstart</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>ondragstart</c> property was the following:  <c>VARIANT ondragstart</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onerrorupdate">
      <summary>
        <para>
          <c>onerrorupdate</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onerrorupdate</c> property was the following:  <c>VARIANT onerrorupdate</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onfilterchange">
      <summary>
        <para>
          <c>onfilterchange</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onfilterchange</c> property was the following:  <c>VARIANT onfilterchange</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onhelp">
      <summary>
        <para>
          <c>onhelp</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onhelp</c> property was the following:  <c>VARIANT onhelp</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onkeydown">
      <summary>
        <para>
          <c>onkeydown</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onkeydown</c> property was the following:  <c>VARIANT onkeydown</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onkeypress">
      <summary>
        <para>
          <c>onkeypress</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onkeypress</c> property was the following:  <c>VARIANT onkeypress</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onkeyup">
      <summary>
        <para>
          <c>onkeyup</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onkeyup</c> property was the following:  <c>VARIANT onkeyup</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onmousedown">
      <summary>
        <para>
          <c>onmousedown</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onmousedown</c> property was the following:  <c>VARIANT onmousedown</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onmousemove">
      <summary>
        <para>
          <c>onmousemove</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onmousemove</c> property was the following:  <c>VARIANT onmousemove</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onmouseout">
      <summary>
        <para>
          <c>onmouseout</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onmouseout</c> property was the following:  <c>VARIANT onmouseout</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onmouseover">
      <summary>
        <para>
          <c>onmouseover</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onmouseover</c> property was the following:  <c>VARIANT onmouseover</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onmouseup">
      <summary>
        <para>
          <c>onmouseup</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onmouseup</c> property was the following:  <c>VARIANT onmouseup</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onrowenter">
      <summary>
        <para>
          <c>onrowenter</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onrowenter</c> property was the following:  <c>VARIANT onrowenter</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onrowexit">
      <summary>
        <para>
          <c>onrowexit</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onrowexit</c> property was the following:  <c>VARIANT onrowexit</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.onselectstart">
      <summary>
        <para>
          <c>onselectstart</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onselectstart</c> property was the following:  <c>VARIANT onselectstart</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.outerHTML">
      <summary>
        <para>
          <c>outerHTML</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>outerHTML</c> property was the following:  <c>BSTR outerHTML</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.outerText">
      <summary>
        <para>
          <c>outerText</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>outerText</c> property was the following:  <c>BSTR outerText</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.parentElement">
      <summary>
        <para>
          <c>parentElement</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>parentElement</c> property was the following:  <c>IHTMLElement* parentElement</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.parentTextEdit">
      <summary>
        <para>
          <c>parentTextEdit</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>parentTextEdit</c> property was the following:  <c>IHTMLElement* parentTextEdit</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.recordNumber">
      <summary>
        <para>
          <c>recordNumber</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>recordNumber</c> property was the following:  <c>VARIANT recordNumber</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.sourceIndex">
      <summary>
        <para>
          <c>sourceIndex</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>sourceIndex</c> property was the following:  <c>long sourceIndex</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.style">
      <summary>
        <para>
          <c>style</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>style</c> property was the following:  <c>IHTMLStyle* style</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.tagName">
      <summary>
        <para>
          <c>tagName</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>tagName</c> property was the following:  <c>BSTR tagName</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement.title">
      <summary>
        <para>
          <c>title</c> property of <c>IHTMLElement</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>title</c> property was the following:  <c>BSTR title</c>;</para>
      </remarks>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLElement2">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.scopeName">
      <summary>
        <para>
          <c>scopeName</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>scopeName</c> property was the following:  <c>BSTR scopeName</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.setCapture(System.Boolean)">
      <summary>
        <para>
          <c>setCapture</c> method of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>setCapture</c> method was the following:  <c>HRESULT setCapture ([optional, defaultvalue(-1)] VARIANT_BOOL containerCapture)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.releaseCapture">
      <summary>
        <para>
          <c>releaseCapture</c> method of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>releaseCapture</c> method was the following:  <c>HRESULT releaseCapture (void)</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.onlosecapture">
      <summary>
        <para>
          <c>onlosecapture</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onlosecapture</c> property was the following:  <c>VARIANT onlosecapture</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.componentFromPoint(System.Int32,System.Int32)">
      <summary>
        <para>
          <c>componentFromPoint</c> method of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>componentFromPoint</c> method was the following:  <c>HRESULT componentFromPoint (long x, long y, [out, retval] BSTR* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.doScroll(System.Object)">
      <summary>
        <para>
          <c>doScroll</c> method of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>doScroll</c> method was the following:  <c>HRESULT doScroll ([optional] VARIANT component)</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.onscroll">
      <summary>
        <para>
          <c>onscroll</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onscroll</c> property was the following:  <c>VARIANT onscroll</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.ondrag">
      <summary>
        <para>
          <c>ondrag</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>ondrag</c> property was the following:  <c>VARIANT ondrag</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.ondragend">
      <summary>
        <para>
          <c>ondragend</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>ondragend</c> property was the following:  <c>VARIANT ondragend</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.ondragenter">
      <summary>
        <para>
          <c>ondragenter</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>ondragenter</c> property was the following:  <c>VARIANT ondragenter</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.ondragover">
      <summary>
        <para>
          <c>ondragover</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>ondragover</c> property was the following:  <c>VARIANT ondragover</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.ondragleave">
      <summary>
        <para>
          <c>ondragleave</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>ondragleave</c> property was the following:  <c>VARIANT ondragleave</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.ondrop">
      <summary>
        <para>
          <c>ondrop</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>ondrop</c> property was the following:  <c>VARIANT ondrop</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.onbeforecut">
      <summary>
        <para>
          <c>onbeforecut</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onbeforecut</c> property was the following:  <c>VARIANT onbeforecut</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.oncut">
      <summary>
        <para>
          <c>oncut</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>oncut</c> property was the following:  <c>VARIANT oncut</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.onbeforecopy">
      <summary>
        <para>
          <c>onbeforecopy</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onbeforecopy</c> property was the following:  <c>VARIANT onbeforecopy</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.oncopy">
      <summary>
        <para>
          <c>oncopy</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>oncopy</c> property was the following:  <c>VARIANT oncopy</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.onbeforepaste">
      <summary>
        <para>
          <c>onbeforepaste</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onbeforepaste</c> property was the following:  <c>VARIANT onbeforepaste</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.onpaste">
      <summary>
        <para>
          <c>onpaste</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onpaste</c> property was the following:  <c>VARIANT onpaste</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.currentStyle">
      <summary>
        <para>
          <c>currentStyle</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>currentStyle</c> property was the following:  <c>IHTMLCurrentStyle* currentStyle</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.onpropertychange">
      <summary>
        <para>
          <c>onpropertychange</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onpropertychange</c> property was the following:  <c>VARIANT onpropertychange</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.getClientRects">
      <summary>
        <para>
          <c>getClientRects</c> method of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>getClientRects</c> method was the following:  <c>HRESULT getClientRects ([out, retval] IHTMLRectCollection** ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.getBoundingClientRect">
      <summary>
        <para>
          <c>getBoundingClientRect</c> method of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>getBoundingClientRect</c> method was the following:  <c>HRESULT getBoundingClientRect ([out, retval] IHTMLRect** ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.setExpression(System.String,System.String,System.String)">
      <summary>
        <para>
          <c>setExpression</c> method of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>setExpression</c> method was the following:  <c>HRESULT setExpression (BSTR propname, BSTR expression, [optional, defaultvalue("")] BSTR language)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.getExpression(System.String)">
      <summary>
        <para>
          <c>getExpression</c> method of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>getExpression</c> method was the following:  <c>HRESULT getExpression (BSTR propname, [out, retval] VARIANT* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.removeExpression(System.String)">
      <summary>
        <para>
          <c>removeExpression</c> method of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>removeExpression</c> method was the following:  <c>HRESULT removeExpression (BSTR propname, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.tabIndex">
      <summary>
        <para>
          <c>tabIndex</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>tabIndex</c> property was the following:  <c>short tabIndex</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.focus">
      <summary>
        <para>
          <c>focus</c> method of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>focus</c> method was the following:  <c>HRESULT focus (void)</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.accessKey">
      <summary>
        <para>
          <c>accessKey</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>accessKey</c> property was the following:  <c>BSTR accessKey</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.onblur">
      <summary>
        <para>
          <c>onblur</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onblur</c> property was the following:  <c>VARIANT onblur</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.onfocus">
      <summary>
        <para>
          <c>onfocus</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onfocus</c> property was the following:  <c>VARIANT onfocus</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.onresize">
      <summary>
        <para>
          <c>onresize</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onresize</c> property was the following:  <c>VARIANT onresize</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.blur">
      <summary>
        <para>
          <c>blur</c> method of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>blur</c> method was the following:  <c>HRESULT blur (void)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.addFilter(System.Object)">
      <summary>
        <para>
          <c>addFilter</c> method of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>addFilter</c> method was the following:  <c>HRESULT addFilter (IUnknown* pUnk)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.removeFilter(System.Object)">
      <summary>
        <para>
          <c>removeFilter</c> method of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>removeFilter</c> method was the following:  <c>HRESULT removeFilter (IUnknown* pUnk)</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.clientHeight">
      <summary>
        <para>
          <c>clientHeight</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>clientHeight</c> property was the following:  <c>long clientHeight</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.clientWidth">
      <summary>
        <para>
          <c>clientWidth</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>clientWidth</c> property was the following:  <c>long clientWidth</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.clientTop">
      <summary>
        <para>
          <c>clientTop</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>clientTop</c> property was the following:  <c>long clientTop</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.clientLeft">
      <summary>
        <para>
          <c>clientLeft</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>clientLeft</c> property was the following:  <c>long clientLeft</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.attachEvent(System.String,System.Object)">
      <summary>
        <para>
          <c>attachEvent</c> method of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>attachEvent</c> method was the following:  <c>HRESULT attachEvent (BSTR event, IDispatch* pdisp, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.detachEvent(System.String,System.Object)">
      <summary>
        <para>
          <c>detachEvent</c> method of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>detachEvent</c> method was the following:  <c>HRESULT detachEvent (BSTR event, IDispatch* pdisp)</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.readyState">
      <summary>
        <para>
          <c>readyState</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>readyState</c> property was the following:  <c>VARIANT readyState</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.onreadystatechange">
      <summary>
        <para>
          <c>onreadystatechange</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onreadystatechange</c> property was the following:  <c>VARIANT onreadystatechange</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.onrowsdelete">
      <summary>
        <para>
          <c>onrowsdelete</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onrowsdelete</c> property was the following:  <c>VARIANT onrowsdelete</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.onrowsinserted">
      <summary>
        <para>
          <c>onrowsinserted</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onrowsinserted</c> property was the following:  <c>VARIANT onrowsinserted</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.oncellchange">
      <summary>
        <para>
          <c>oncellchange</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>oncellchange</c> property was the following:  <c>VARIANT oncellchange</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.dir">
      <summary>
        <para>
          <c>dir</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>dir</c> property was the following:  <c>BSTR dir</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.createControlRange">
      <summary>
        <para>
          <c>createControlRange</c> method of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>createControlRange</c> method was the following:  <c>HRESULT createControlRange ([out, retval] IDispatch** ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.scrollHeight">
      <summary>
        <para>
          <c>scrollHeight</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>scrollHeight</c> property was the following:  <c>long scrollHeight</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.scrollWidth">
      <summary>
        <para>
          <c>scrollWidth</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>scrollWidth</c> property was the following:  <c>long scrollWidth</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.scrollTop">
      <summary>
        <para>
          <c>scrollTop</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>scrollTop</c> property was the following:  <c>long scrollTop</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.scrollLeft">
      <summary>
        <para>
          <c>scrollLeft</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>scrollLeft</c> property was the following:  <c>long scrollLeft</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.clearAttributes">
      <summary>
        <para>
          <c>clearAttributes</c> method of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>clearAttributes</c> method was the following:  <c>HRESULT clearAttributes (void)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.mergeAttributes(C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
      <summary>
        <para>
          <c>mergeAttributes</c> method of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>mergeAttributes</c> method was the following:  <c>HRESULT mergeAttributes (IHTMLElement* mergeThis)</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.oncontextmenu">
      <summary>
        <para>
          <c>oncontextmenu</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>oncontextmenu</c> property was the following:  <c>VARIANT oncontextmenu</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.insertAdjacentElement(System.String,C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
      <summary>
        <para>
          <c>insertAdjacentElement</c> method of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>insertAdjacentElement</c> method was the following:  <c>HRESULT insertAdjacentElement (BSTR where, IHTMLElement* insertedElement, [out, retval] IHTMLElement** ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.applyElement(C1.Win.C1Editor.Internal.HTML.IHTMLElement,System.String)">
      <summary>
        <para>
          <c>applyElement</c> method of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>applyElement</c> method was the following:  <c>HRESULT applyElement (IHTMLElement* apply, BSTR where, [out, retval] IHTMLElement** ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.getAdjacentText(System.String)">
      <summary>
        <para>
          <c>getAdjacentText</c> method of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>getAdjacentText</c> method was the following:  <c>HRESULT getAdjacentText (BSTR where, [out, retval] BSTR* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.replaceAdjacentText(System.String,System.String)">
      <summary>
        <para>
          <c>replaceAdjacentText</c> method of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>replaceAdjacentText</c> method was the following:  <c>HRESULT replaceAdjacentText (BSTR where, BSTR newText, [out, retval] BSTR* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.canHaveChildren">
      <summary>
        <para>
          <c>canHaveChildren</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>canHaveChildren</c> property was the following:  <c>VARIANT_BOOL canHaveChildren</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.addBehavior(System.String,System.Object@)">
      <summary>
        <para>
          <c>addBehavior</c> method of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>addBehavior</c> method was the following:  <c>HRESULT addBehavior (BSTR bstrUrl, [in, optional] VARIANT* pvarFactory, [out, retval] long* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.removeBehavior(System.Int32)">
      <summary>
        <para>
          <c>removeBehavior</c> method of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>removeBehavior</c> method was the following:  <c>HRESULT removeBehavior (long cookie, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.runtimeStyle">
      <summary>
        <para>
          <c>runtimeStyle</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>runtimeStyle</c> property was the following:  <c>IHTMLStyle* runtimeStyle</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.behaviorUrns">
      <summary>
        <para>
          <c>behaviorUrns</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>behaviorUrns</c> property was the following:  <c>IDispatch* behaviorUrns</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.tagUrn">
      <summary>
        <para>
          <c>tagUrn</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>tagUrn</c> property was the following:  <c>BSTR tagUrn</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.onbeforeeditfocus">
      <summary>
        <para>
          <c>onbeforeeditfocus</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>onbeforeeditfocus</c> property was the following:  <c>VARIANT onbeforeeditfocus</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.readyStateValue">
      <summary>
        <para>
          <c>readyStateValue</c> property of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>readyStateValue</c> property was the following:  <c>long readyStateValue</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElement2.getElementsByTagName(System.String)">
      <summary>
        <para>
          <c>getElementsByTagName</c> method of <c>IHTMLElement2</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>getElementsByTagName</c> method was the following:  <c>HRESULT getElementsByTagName (BSTR v, [out, retval] IHTMLElementCollection** ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLElementCollection">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElementCollection.toString">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLElementCollection.length">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElementCollection.GetEnumerator">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElementCollection.item(System.Object,System.Object)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLElementCollection.tags(System.Object)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.SrcElement">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.AltKey">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.CtrlKey">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.ShiftKey">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.ReturnValue">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.CancelBubble">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.FromElement">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.ToElement">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.keyCode">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.Button">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.EventType">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.Qualifier">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.Reason">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.X">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.Y">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.ClientX">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.ClientY">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.OffsetX">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.OffsetY">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.ScreenX">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.ScreenY">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj.SrcFilter">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.setAttribute(System.String,System.Object,System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.getAttribute(System.String,System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.removeAttribute(System.String,System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.propertyName">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.bookmarks">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.recordset">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.dataFld">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.boundElements">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.repeat">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.srcUrn">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.SrcElement">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.AltKey">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.CtrlKey">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.ShiftKey">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.FromElement">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.ToElement">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.Button">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.EventType">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.Qualifier">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.reason">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.x">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.y">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.ClientX">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.clientY">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.offsetX">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.offsetY">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.screenX">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.screenY">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.srcFilter">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLEventObj2.dataTransfer">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.action">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.dir">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.elements">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.encoding">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.length">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.method">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.name">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.onreset">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.onsubmit">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.target">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.GetEnumerator">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.item(System.Object,System.Object)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.reset">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.submit">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLFormElement.tags(System.Object)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.align">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.alt">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.border">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.checked">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.complete">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.defaultChecked">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.defaultValue">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.disabled">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.dynsrc">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.form">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.height">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.hspace">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.indeterminate">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.loop">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.lowsrc">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.maxLength">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.name">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.onabort">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.onchange">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.onerror">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.onload">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.onselect">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.readOnly">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.readyState">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.size">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.src">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.Start">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.status">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.type">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.value">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.vrml">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.vspace">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.width">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.createTextRange">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLInputElement.select">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLPainter">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLPainter.Draw(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLPainter.OnResize(System.Int32,System.Int32)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLPainter.GetPainterInfo(C1.Win.C1Editor.Internal.HTML.HTML_PAINTER_INFO)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLPainter.HitTestPoint(System.Int32,System.Int32,System.Int32[],System.Int32[])">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLPaintSite">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLPaintSite.InvalidatePainterInfo">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLPaintSite.InvalidateRect(System.IntPtr)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLPaintSite.InvalidateRegion(System.IntPtr)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLPaintSite.GetDrawInfo(System.Int32,C1.Win.C1Editor.Internal.HTML.HTML_PAINT_DRAW_INFO@)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLPaintSite.TransformGlobalToLocal(C1.Win.C1Editor.Internal.HTML.POINT,C1.Win.C1Editor.Internal.HTML.POINT@)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLPaintSite.TransformLocalToGlobal(C1.Win.C1Editor.Internal.HTML.POINT,C1.Win.C1Editor.Internal.HTML.POINT@)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLPaintSite.GetHitTestCookie(System.Int32@)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLRect">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRect.bottom">
      <summary>
        <para>
          <c>bottom</c> property of <c>IHTMLRect</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>bottom</c> property was the following:  <c>long bottom</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRect.left">
      <summary>
        <para>
          <c>left</c> property of <c>IHTMLRect</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>left</c> property was the following:  <c>long left</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRect.right">
      <summary>
        <para>
          <c>right</c> property of <c>IHTMLRect</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>right</c> property was the following:  <c>long right</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRect.top">
      <summary>
        <para>
          <c>top</c> property of <c>IHTMLRect</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>top</c> property was the following:  <c>long top</c>;</para>
      </remarks>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLRectCollection">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLRectCollection.item(System.Object@)">
      <summary>
        <para>
          <c>item</c> method of <c>IHTMLRectCollection</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>item</c> method was the following:  <c>HRESULT item ([in] VARIANT* pvarIndex, [out, retval] VARIANT* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRectCollection._newEnum">
      <summary>
        <para>
          <c>_newEnum</c> property of <c>IHTMLRectCollection</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>_newEnum</c> property was the following:  <c>IUnknown* _newEnum</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRectCollection.length">
      <summary>
        <para>
          <c>length</c> property of <c>IHTMLRectCollection</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>length</c> property was the following:  <c>long length</c>;</para>
      </remarks>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLRenderStyle">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRenderStyle.textLineThroughStyle">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRenderStyle.textUnderlineStyle">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRenderStyle.textEffect">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRenderStyle.textColor">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRenderStyle.textBackgroundColor">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRenderStyle.textDecorationColor">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRenderStyle.renderingPriority">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRenderStyle.defaultTextSelection">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLRenderStyle.textDecoration">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLSelectionObject">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLSelectionObject.CreateRange">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLSelectionObject.Empty">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLSelectionObject.Clear">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLSelectionObject.EventType">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLSelectionObject2">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLSelectionObject2.createRangeCollection">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLSelectionObject2.typeDetail">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLStyle">
      <summary>
        <para>
          <c>IHTMLStyle</c> interface.</para>
      </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.setAttribute(System.String,System.Object,System.Int32)">
      <summary>
        <para>
          <c>setAttribute</c> method of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>setAttribute</c> method was the following:  <c>HRESULT setAttribute (BSTR strAttributeName, VARIANT AttributeValue, [optional, defaultvalue(1)] long lFlags)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.getAttribute(System.String,System.Int32)">
      <summary>
        <para>
          <c>getAttribute</c> method of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>getAttribute</c> method was the following:  <c>HRESULT getAttribute (BSTR strAttributeName, [optional, defaultvalue(0)] long lFlags, [out, retval] VARIANT* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.removeAttribute(System.String,System.Int32)">
      <summary>
        <para>
          <c>removeAttribute</c> method of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>removeAttribute</c> method was the following:  <c>HRESULT removeAttribute (BSTR strAttributeName, [optional, defaultvalue(1)] long lFlags, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.toString">
      <summary>
        <para>
          <c>toString</c> method of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>toString</c> method was the following:  <c>HRESULT toString ([out, retval] BSTR* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.background">
      <summary>
        <para>
          <c>background</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>background</c> property was the following:  <c>BSTR background</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.backgroundAttachment">
      <summary>
        <para>
          <c>backgroundAttachment</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>backgroundAttachment</c> property was the following:  <c>BSTR backgroundAttachment</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.backgroundColor">
      <summary>
        <para>
          <c>backgroundColor</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>backgroundColor</c> property was the following:  <c>VARIANT backgroundColor</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.backgroundImage">
      <summary>
        <para>
          <c>backgroundImage</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>backgroundImage</c> property was the following:  <c>BSTR backgroundImage</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.backgroundPosition">
      <summary>
        <para>
          <c>backgroundPosition</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>backgroundPosition</c> property was the following:  <c>BSTR backgroundPosition</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.backgroundPositionX">
      <summary>
        <para>
          <c>backgroundPositionX</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>backgroundPositionX</c> property was the following:  <c>VARIANT backgroundPositionX</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.backgroundPositionY">
      <summary>
        <para>
          <c>backgroundPositionY</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>backgroundPositionY</c> property was the following:  <c>VARIANT backgroundPositionY</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.backgroundRepeat">
      <summary>
        <para>
          <c>backgroundRepeat</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>backgroundRepeat</c> property was the following:  <c>BSTR backgroundRepeat</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.border">
      <summary>
        <para>
          <c>border</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>border</c> property was the following:  <c>BSTR border</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderBottom">
      <summary>
        <para>
          <c>borderBottom</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>borderBottom</c> property was the following:  <c>BSTR borderBottom</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderBottomColor">
      <summary>
        <para>
          <c>borderBottomColor</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>borderBottomColor</c> property was the following:  <c>VARIANT borderBottomColor</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderBottomStyle">
      <summary>
        <para>
          <c>borderBottomStyle</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>borderBottomStyle</c> property was the following:  <c>BSTR borderBottomStyle</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderBottomWidth">
      <summary>
        <para>
          <c>borderBottomWidth</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>borderBottomWidth</c> property was the following:  <c>VARIANT borderBottomWidth</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderColor">
      <summary>
        <para>
          <c>borderColor</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>borderColor</c> property was the following:  <c>BSTR borderColor</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderLeft">
      <summary>
        <para>
          <c>borderLeft</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>borderLeft</c> property was the following:  <c>BSTR borderLeft</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderLeftColor">
      <summary>
        <para>
          <c>borderLeftColor</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>borderLeftColor</c> property was the following:  <c>VARIANT borderLeftColor</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderLeftStyle">
      <summary>
        <para>
          <c>borderLeftStyle</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>borderLeftStyle</c> property was the following:  <c>BSTR borderLeftStyle</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderLeftWidth">
      <summary>
        <para>
          <c>borderLeftWidth</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>borderLeftWidth</c> property was the following:  <c>VARIANT borderLeftWidth</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderRight">
      <summary>
        <para>
          <c>borderRight</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>borderRight</c> property was the following:  <c>BSTR borderRight</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderRightColor">
      <summary>
        <para>
          <c>borderRightColor</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>borderRightColor</c> property was the following:  <c>VARIANT borderRightColor</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderRightStyle">
      <summary>
        <para>
          <c>borderRightStyle</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>borderRightStyle</c> property was the following:  <c>BSTR borderRightStyle</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderRightWidth">
      <summary>
        <para>
          <c>borderRightWidth</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>borderRightWidth</c> property was the following:  <c>VARIANT borderRightWidth</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderStyle">
      <summary>
        <para>
          <c>borderStyle</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>borderStyle</c> property was the following:  <c>BSTR borderStyle</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderTop">
      <summary>
        <para>
          <c>borderTop</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>borderTop</c> property was the following:  <c>BSTR borderTop</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderTopColor">
      <summary>
        <para>
          <c>borderTopColor</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>borderTopColor</c> property was the following:  <c>VARIANT borderTopColor</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderTopStyle">
      <summary>
        <para>
          <c>borderTopStyle</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>borderTopStyle</c> property was the following:  <c>BSTR borderTopStyle</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderTopWidth">
      <summary>
        <para>
          <c>borderTopWidth</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>borderTopWidth</c> property was the following:  <c>VARIANT borderTopWidth</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.borderWidth">
      <summary>
        <para>
          <c>borderWidth</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>borderWidth</c> property was the following:  <c>BSTR borderWidth</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.clear">
      <summary>
        <para>
          <c>clear</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>clear</c> property was the following:  <c>BSTR clear</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.clip">
      <summary>
        <para>
          <c>clip</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>clip</c> property was the following:  <c>BSTR clip</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.color">
      <summary>
        <para>
          <c>color</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>color</c> property was the following:  <c>VARIANT color</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.cssText">
      <summary>
        <para>
          <c>cssText</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>cssText</c> property was the following:  <c>BSTR cssText</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.cursor">
      <summary>
        <para>
          <c>cursor</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>cursor</c> property was the following:  <c>BSTR cursor</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.display">
      <summary>
        <para>
          <c>display</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>display</c> property was the following:  <c>BSTR display</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.filter">
      <summary>
        <para>
          <c>filter</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>filter</c> property was the following:  <c>BSTR filter</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.font">
      <summary>
        <para>
          <c>font</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>font</c> property was the following:  <c>BSTR font</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.fontFamily">
      <summary>
        <para>
          <c>fontFamily</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>fontFamily</c> property was the following:  <c>BSTR fontFamily</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.fontSize">
      <summary>
        <para>
          <c>fontSize</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>fontSize</c> property was the following:  <c>VARIANT fontSize</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.fontStyle">
      <summary>
        <para>
          <c>fontStyle</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>fontStyle</c> property was the following:  <c>BSTR fontStyle</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.fontVariant">
      <summary>
        <para>
          <c>fontVariant</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>fontVariant</c> property was the following:  <c>BSTR fontVariant</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.fontWeight">
      <summary>
        <para>
          <c>fontWeight</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>fontWeight</c> property was the following:  <c>BSTR fontWeight</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.height">
      <summary>
        <para>
          <c>height</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>height</c> property was the following:  <c>VARIANT height</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.left">
      <summary>
        <para>
          <c>left</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>left</c> property was the following:  <c>VARIANT left</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.letterSpacing">
      <summary>
        <para>
          <c>letterSpacing</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>letterSpacing</c> property was the following:  <c>VARIANT letterSpacing</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.lineHeight">
      <summary>
        <para>
          <c>lineHeight</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>lineHeight</c> property was the following:  <c>VARIANT lineHeight</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.listStyle">
      <summary>
        <para>
          <c>listStyle</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>listStyle</c> property was the following:  <c>BSTR listStyle</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.listStyleImage">
      <summary>
        <para>
          <c>listStyleImage</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>listStyleImage</c> property was the following:  <c>BSTR listStyleImage</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.listStylePosition">
      <summary>
        <para>
          <c>listStylePosition</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>listStylePosition</c> property was the following:  <c>BSTR listStylePosition</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.listStyleType">
      <summary>
        <para>
          <c>listStyleType</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>listStyleType</c> property was the following:  <c>BSTR listStyleType</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.margin">
      <summary>
        <para>
          <c>margin</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>margin</c> property was the following:  <c>BSTR margin</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.marginBottom">
      <summary>
        <para>
          <c>marginBottom</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>marginBottom</c> property was the following:  <c>VARIANT marginBottom</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.marginLeft">
      <summary>
        <para>
          <c>marginLeft</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>marginLeft</c> property was the following:  <c>VARIANT marginLeft</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.marginRight">
      <summary>
        <para>
          <c>marginRight</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>marginRight</c> property was the following:  <c>VARIANT marginRight</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.marginTop">
      <summary>
        <para>
          <c>marginTop</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>marginTop</c> property was the following:  <c>VARIANT marginTop</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.overflow">
      <summary>
        <para>
          <c>overflow</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>overflow</c> property was the following:  <c>BSTR overflow</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.padding">
      <summary>
        <para>
          <c>padding</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>padding</c> property was the following:  <c>BSTR padding</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.paddingBottom">
      <summary>
        <para>
          <c>paddingBottom</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>paddingBottom</c> property was the following:  <c>VARIANT paddingBottom</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.paddingLeft">
      <summary>
        <para>
          <c>paddingLeft</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>paddingLeft</c> property was the following:  <c>VARIANT paddingLeft</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.paddingRight">
      <summary>
        <para>
          <c>paddingRight</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>paddingRight</c> property was the following:  <c>VARIANT paddingRight</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.paddingTop">
      <summary>
        <para>
          <c>paddingTop</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>paddingTop</c> property was the following:  <c>VARIANT paddingTop</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.pageBreakAfter">
      <summary>
        <para>
          <c>pageBreakAfter</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>pageBreakAfter</c> property was the following:  <c>BSTR pageBreakAfter</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.pageBreakBefore">
      <summary>
        <para>
          <c>pageBreakBefore</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>pageBreakBefore</c> property was the following:  <c>BSTR pageBreakBefore</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.pixelHeight">
      <summary>
        <para>
          <c>pixelHeight</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>pixelHeight</c> property was the following:  <c>long pixelHeight</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.pixelLeft">
      <summary>
        <para>
          <c>pixelLeft</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>pixelLeft</c> property was the following:  <c>long pixelLeft</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.pixelTop">
      <summary>
        <para>
          <c>pixelTop</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>pixelTop</c> property was the following:  <c>long pixelTop</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.pixelWidth">
      <summary>
        <para>
          <c>pixelWidth</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>pixelWidth</c> property was the following:  <c>long pixelWidth</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.posHeight">
      <summary>
        <para>
          <c>posHeight</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>posHeight</c> property was the following:  <c>float posHeight</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.position">
      <summary>
        <para>
          <c>position</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>position</c> property was the following:  <c>BSTR position</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.posLeft">
      <summary>
        <para>
          <c>posLeft</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>posLeft</c> property was the following:  <c>float posLeft</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.posTop">
      <summary>
        <para>
          <c>posTop</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>posTop</c> property was the following:  <c>float posTop</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.posWidth">
      <summary>
        <para>
          <c>posWidth</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>posWidth</c> property was the following:  <c>float posWidth</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.styleFloat">
      <summary>
        <para>
          <c>styleFloat</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>styleFloat</c> property was the following:  <c>BSTR styleFloat</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.textAlign">
      <summary>
        <para>
          <c>textAlign</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>textAlign</c> property was the following:  <c>BSTR textAlign</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.textDecoration">
      <summary>
        <para>
          <c>textDecoration</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>textDecoration</c> property was the following:  <c>BSTR textDecoration</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.textDecorationBlink">
      <summary>
        <para>
          <c>textDecorationBlink</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>textDecorationBlink</c> property was the following:  <c>VARIANT_BOOL textDecorationBlink</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.textDecorationLineThrough">
      <summary>
        <para>
          <c>textDecorationLineThrough</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>textDecorationLineThrough</c> property was the following:  <c>VARIANT_BOOL textDecorationLineThrough</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.textDecorationNone">
      <summary>
        <para>
          <c>textDecorationNone</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>textDecorationNone</c> property was the following:  <c>VARIANT_BOOL textDecorationNone</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.textDecorationOverline">
      <summary>
        <para>
          <c>textDecorationOverline</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>textDecorationOverline</c> property was the following:  <c>VARIANT_BOOL textDecorationOverline</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.textDecorationUnderline">
      <summary>
        <para>
          <c>textDecorationUnderline</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>textDecorationUnderline</c> property was the following:  <c>VARIANT_BOOL textDecorationUnderline</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.textIndent">
      <summary>
        <para>
          <c>textIndent</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>textIndent</c> property was the following:  <c>VARIANT textIndent</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.textTransform">
      <summary>
        <para>
          <c>textTransform</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>textTransform</c> property was the following:  <c>BSTR textTransform</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.top">
      <summary>
        <para>
          <c>top</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>top</c> property was the following:  <c>VARIANT top</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.verticalAlign">
      <summary>
        <para>
          <c>verticalAlign</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>verticalAlign</c> property was the following:  <c>VARIANT verticalAlign</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.visibility">
      <summary>
        <para>
          <c>visibility</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>visibility</c> property was the following:  <c>BSTR visibility</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.whiteSpace">
      <summary>
        <para>
          <c>whiteSpace</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>whiteSpace</c> property was the following:  <c>BSTR whiteSpace</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.width">
      <summary>
        <para>
          <c>width</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>width</c> property was the following:  <c>VARIANT width</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.wordSpacing">
      <summary>
        <para>
          <c>wordSpacing</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>wordSpacing</c> property was the following:  <c>VARIANT wordSpacing</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyle.zIndex">
      <summary>
        <para>
          <c>zIndex</c> property of <c>IHTMLStyle</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>zIndex</c> property was the following:  <c>VARIANT zIndex</c>;</para>
      </remarks>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.title">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.parentStyleSheet">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.owningElement">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.disabled">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.readOnly">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.imports">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.href">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.type">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.id">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.addImport(System.String,System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.addRule(System.String,System.String,System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.removeImport(System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.removeRule(System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.media">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.cssText">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheet.rules">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheetRulesCollection">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheetRulesCollection.length">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheetRulesCollection.item(System.Object)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheetsCollection">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheetsCollection.length">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheetsCollection.GetEnumerator">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLStyleSheetsCollection.item(System.Object)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLTable">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.cols">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.border">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.frame">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.rules">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.cellSpacing">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.cellPadding">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.background">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.bgColor">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.borderColor">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.borderColorLight">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.borderColorDark">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.align">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTable.refresh">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.rows">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.width">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.height">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.dataPageSize">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTable.nextPage">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTable.previousPage">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.tHead">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.tFoot">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.tBodies">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.caption">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTable.createTHead">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTable.deleteTHead">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTable.createTFoot">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTable.deleteTFoot">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTable.createCaption">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTable.deleteCaption">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTable.insertRow(System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTable.deleteRow(System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.readyState">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTable.onreadystatechange">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLTableCell">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableCell.rowSpan">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableCell.colSpan">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableCell.align">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableCell.vAlign">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableCell.bgColor">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableCell.noWrap">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableCell.background">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableCell.borderColor">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableCell.borderColorLight">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableCell.borderColorDark">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableCell.width">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableCell.height">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableCell.cellIndex">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLTableRow">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableRow.align">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableRow.vAlign">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableRow.bgColor">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableRow.borderColor">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableRow.borderColorLight">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableRow.borderColorDark">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableRow.rowIndex">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableRow.sectionRowIndex">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTableRow.cells">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTableRow.insertCell(System.Int32)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTableRow.deleteCell(System.Int32)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange">
      <summary>
        <para>
          <c>IHTMLTxtRange</c> interface.</para>
      </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.parentElement">
      <summary>
        <para>
          <c>parentElement</c> method of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>parentElement</c> method was the following:  <c>HRESULT parentElement ([out, retval] IHTMLElement** ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.duplicate">
      <summary>
        <para>
          <c>duplicate</c> method of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>duplicate</c> method was the following:  <c>HRESULT duplicate ([out, retval] IHTMLTxtRange** ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.inRange(C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange)">
      <summary>
        <para>
          <c>inRange</c> method of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>inRange</c> method was the following:  <c>HRESULT inRange (IHTMLTxtRange* range, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.isEqual(C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange)">
      <summary>
        <para>
          <c>isEqual</c> method of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>isEqual</c> method was the following:  <c>HRESULT isEqual (IHTMLTxtRange* range, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.scrollIntoView(System.Boolean)">
      <summary>
        <para>
          <c>scrollIntoView</c> method of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>scrollIntoView</c> method was the following:  <c>HRESULT scrollIntoView ([optional, defaultvalue(-1)] VARIANT_BOOL fStart)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.collapse(System.Boolean)">
      <summary>
        <para>
          <c>collapse</c> method of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>collapse</c> method was the following:  <c>HRESULT collapse ([optional, defaultvalue(-1)] VARIANT_BOOL Start)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.expand(System.String)">
      <summary>
        <para>
          <c>expand</c> method of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>expand</c> method was the following:  <c>HRESULT expand (BSTR Unit, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.move(System.String,System.Int32)">
      <summary>
        <para>
          <c>move</c> method of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>move</c> method was the following:  <c>HRESULT move (BSTR Unit, [optional, defaultvalue(1)] long Count, [out, retval] long* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.moveStart(System.String,System.Int32)">
      <summary>
        <para>
          <c>moveStart</c> method of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>moveStart</c> method was the following:  <c>HRESULT moveStart (BSTR Unit, [optional, defaultvalue(1)] long Count, [out, retval] long* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.moveEnd(System.String,System.Int32)">
      <summary>
        <para>
          <c>moveEnd</c> method of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>moveEnd</c> method was the following:  <c>HRESULT moveEnd (BSTR Unit, [optional, defaultvalue(1)] long Count, [out, retval] long* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.select">
      <summary>
        <para>
          <c>select</c> method of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>select</c> method was the following:  <c>HRESULT select (void)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.pasteHTML(System.String)">
      <summary>
        <para>
          <c>pasteHTML</c> method of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>pasteHTML</c> method was the following:  <c>HRESULT pasteHTML (BSTR html)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.moveToElementText(C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
      <summary>
        <para>
          <c>moveToElementText</c> method of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>moveToElementText</c> method was the following:  <c>HRESULT moveToElementText (IHTMLElement* element)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.setEndPoint(System.String,C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange)">
      <summary>
        <para>
          <c>setEndPoint</c> method of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>setEndPoint</c> method was the following:  <c>HRESULT setEndPoint (BSTR how, IHTMLTxtRange* SourceRange)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.compareEndPoints(System.String,C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange)">
      <summary>
        <para>
          <c>compareEndPoints</c> method of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>compareEndPoints</c> method was the following:  <c>HRESULT compareEndPoints (BSTR how, IHTMLTxtRange* SourceRange, [out, retval] long* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.findText(System.String,System.Int32,System.Int32)">
      <summary>
        <para>
          <c>findText</c> method of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>findText</c> method was the following:  <c>HRESULT findText (BSTR String, [optional, defaultvalue(1073741823)] long Count, [optional, defaultvalue(0)] long Flags, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.moveToPoint(System.Int32,System.Int32)">
      <summary>
        <para>
          <c>moveToPoint</c> method of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>moveToPoint</c> method was the following:  <c>HRESULT moveToPoint (long x, long y)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.getBookmark">
      <summary>
        <para>
          <c>getBookmark</c> method of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>getBookmark</c> method was the following:  <c>HRESULT getBookmark ([out, retval] BSTR* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.moveToBookmark(System.String)">
      <summary>
        <para>
          <c>moveToBookmark</c> method of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>moveToBookmark</c> method was the following:  <c>HRESULT moveToBookmark (BSTR Bookmark, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.queryCommandSupported(System.String)">
      <summary>
        <para>
          <c>queryCommandSupported</c> method of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>queryCommandSupported</c> method was the following:  <c>HRESULT queryCommandSupported (BSTR cmdID, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.queryCommandEnabled(System.String)">
      <summary>
        <para>
          <c>queryCommandEnabled</c> method of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>queryCommandEnabled</c> method was the following:  <c>HRESULT queryCommandEnabled (BSTR cmdID, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.queryCommandState(System.String)">
      <summary>
        <para>
          <c>queryCommandState</c> method of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>queryCommandState</c> method was the following:  <c>HRESULT queryCommandState (BSTR cmdID, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.queryCommandIndeterm(System.String)">
      <summary>
        <para>
          <c>queryCommandIndeterm</c> method of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>queryCommandIndeterm</c> method was the following:  <c>HRESULT queryCommandIndeterm (BSTR cmdID, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.queryCommandText(System.String)">
      <summary>
        <para>
          <c>queryCommandText</c> method of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>queryCommandText</c> method was the following:  <c>HRESULT queryCommandText (BSTR cmdID, [out, retval] BSTR* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.queryCommandValue(System.String)">
      <summary>
        <para>
          <c>queryCommandValue</c> method of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>queryCommandValue</c> method was the following:  <c>HRESULT queryCommandValue (BSTR cmdID, [out, retval] VARIANT* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.execCommand(System.String,System.Boolean,System.Object)">
      <summary>
        <para>
          <c>execCommand</c> method of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>execCommand</c> method was the following:  <c>HRESULT execCommand (BSTR cmdID, [optional, defaultvalue(0)] VARIANT_BOOL showUI, [optional] VARIANT value, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.execCommandShowHelp(System.String)">
      <summary>
        <para>
          <c>execCommandShowHelp</c> method of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>execCommandShowHelp</c> method was the following:  <c>HRESULT execCommandShowHelp (BSTR cmdID, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.htmlText">
      <summary>
        <para>
          <c>htmlText</c> property of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>htmlText</c> property was the following:  <c>BSTR htmlText</c>;</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange.text">
      <summary>
        <para>
          <c>text</c> property of <c>IHTMLTxtRange</c> interface.</para>
      </summary>
      <remarks>
        <para>An original IDL definition of <c>text</c> property was the following:  <c>BSTR text</c>;</para>
      </remarks>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRangeCollection">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRangeCollection.length">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRangeCollection.GetEnumerator">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IHTMLTxtRangeCollection.item(System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.ILineInfo">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.ILineInfo.x">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.ILineInfo.baseLine">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.ILineInfo.textDescent">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.ILineInfo.textHeight">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.HTML.ILineInfo.lineDirection">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IMarkupContainer">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupContainer.OwningDoc(C1.Win.C1Editor.Internal.HTML.IHTMLDocument2@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IMarkupContainer2">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupContainer2.owningDoc(C1.Win.C1Editor.Internal.HTML.IHTMLDocument2)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupContainer2.createChangeLog(C1.Win.C1Editor.Internal.HTML.IHTMLChangeSink,C1.Win.C1Editor.Internal.HTML.IHTMLChangeLog@,System.Boolean,System.Boolean)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupContainer2.RegisterForDirtyRange(C1.Win.C1Editor.Internal.HTML.IHTMLChangeSink,System.UInt32@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupContainer2.UnRegisterForDirtyRange(System.UInt32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupContainer2.GetAndClearDirtyRange(System.UInt32,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupContainer2.GetVersionNumber">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupContainer2.GetMasterElement(C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IMarkupPointer">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.OwningDoc(C1.Win.C1Editor.Internal.HTML.IHTMLDocument2@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.Gravity(System.Int32@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.SetGravity(System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.Cling(System.Boolean@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.SetCling(System.Boolean)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.Unposition">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.IsPositioned(System.Boolean@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.GetContainer(C1.Win.C1Editor.Internal.HTML.IMarkupContainer@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.MoveAdjacentToElement(C1.Win.C1Editor.Internal.HTML.IHTMLElement,System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.MoveToPointer(C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.MoveToContainer(C1.Win.C1Editor.Internal.HTML.IMarkupContainer,System.Boolean)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.Left(System.Boolean,C1.Win.C1Editor.Internal.HTML.MARKUP_CONTEXT_TYPE@,C1.Win.C1Editor.Internal.HTML.IHTMLElement@,System.Int32@,System.String@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.Right(System.Boolean,C1.Win.C1Editor.Internal.HTML.MARKUP_CONTEXT_TYPE@,C1.Win.C1Editor.Internal.HTML.IHTMLElement@,System.Int32@,System.String@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.CurrentScope(C1.Win.C1Editor.Internal.HTML.IHTMLElement@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.IsLeftOf(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,System.Boolean@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.IsLeftOfOrEqualTo(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,System.Boolean@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.IsRightOf(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,System.Boolean@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.IsRightOfOrEqualTo(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,System.Boolean@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.IsEqualTo(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,System.Boolean@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.MoveUnit(System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupPointer.FindText(System.String,System.UInt32,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IMarkupServices">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.CreateMarkupPointer(C1.Win.C1Editor.Internal.HTML.IMarkupPointer@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.CreateMarkupContainer(C1.Win.C1Editor.Internal.HTML.IMarkupContainer@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.CreateElement(System.Int32,System.String,C1.Win.C1Editor.Internal.HTML.IHTMLElement@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.CloneElement(C1.Win.C1Editor.Internal.HTML.IHTMLElement,C1.Win.C1Editor.Internal.HTML.IHTMLElement@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.InsertElement(C1.Win.C1Editor.Internal.HTML.IHTMLElement,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.RemoveElement(C1.Win.C1Editor.Internal.HTML.IHTMLElement)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.Remove(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.Copy(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.Move(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.InsertText(System.String,System.Int32,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.ParseString(System.String,System.UInt32,C1.Win.C1Editor.Internal.HTML.IMarkupContainer@,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.ParseGlobal(System.IntPtr,System.UInt32,C1.Win.C1Editor.Internal.HTML.IMarkupContainer@,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.IsScopedElement(C1.Win.C1Editor.Internal.HTML.IHTMLElement,System.Boolean@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.GetElementTagId(C1.Win.C1Editor.Internal.HTML.IHTMLElement,System.Int32@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.GetTagIDForName(System.String,System.Int32@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.GetNameForTagID(System.Int32,System.String@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.MovePointersToRange(C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.MoveRangeToPointers(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IHTMLTxtRange)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.BeginUndoUnit(System.String)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IMarkupServices.EndUndoUnit">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.ISegment">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.ISegment.GetPointers(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.ISegmentList">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.ISegmentList.CreateIterator(C1.Win.C1Editor.Internal.HTML.ISegmentListIterator@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.ISegmentList.GetType(System.Int32@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.ISegmentList.IsEmpty(System.Boolean@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.ISegmentListIterator">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.ISegmentListIterator.Current(C1.Win.C1Editor.Internal.HTML.ISegment@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.ISegmentListIterator.First">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.ISegmentListIterator.IsDone">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.ISegmentListIterator.Advance">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.ISelectionServices">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.ISelectionServices.SetSelectionType(System.Int32,C1.Win.C1Editor.Internal.HTML.ISelectionServicesListener)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.ISelectionServices.GetMarkupContainer(C1.Win.C1Editor.Internal.HTML.IMarkupContainer@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.ISelectionServices.AddSegment(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.ISegment@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.ISelectionServices.AddElementSegment(C1.Win.C1Editor.Internal.HTML.IHTMLElement,C1.Win.C1Editor.Internal.HTML.IElementSegment@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.ISelectionServices.RemoveSegment(C1.Win.C1Editor.Internal.HTML.ISegment)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.ISelectionServices.GetSelectionServicesListener(C1.Win.C1Editor.Internal.HTML.ISelectionServicesListener@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.ISelectionServicesListener">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.ISelectionServicesListener.BeginSelectionUndo">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.ISelectionServicesListener.EndSelectionUndo">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.ISelectionServicesListener.OnSelectedElementExit(C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer,C1.Win.C1Editor.Internal.HTML.IMarkupPointer)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.ISelectionServicesListener.OnChangeType(System.Int32,C1.Win.C1Editor.Internal.HTML.ISelectionServicesListener)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.ISelectionServicesListener.GetTypeDetail(System.String@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IEnumOleUndoUnits">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IEnumOleUndoUnits.Next(System.Int32,System.IntPtr@,System.Int32@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IEnumOleUndoUnits.Bogus">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IEnumOleUndoUnits.Skip(System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IEnumOleUndoUnits.Reset">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IEnumOleUndoUnits.Clone(C1.Win.C1Editor.Internal.HTML.IEnumOleUndoUnits)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IOleClientSite">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleClientSite.SaveObject">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleClientSite.GetMoniker(System.UInt32,System.UInt32,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleClientSite.GetContainer(C1.Win.C1Editor.Internal.HTML.IOleContainer@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleClientSite.ShowObject">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleClientSite.OnShowWindow(System.Boolean)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleClientSite.RequestNewObjectLayout">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IOleContainer">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleContainer.ParseDisplayName(System.Object,System.String,System.Int32[],System.Object[])">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleContainer.EnumObjects(C1.Win.C1Editor.Internal.HTML.tagOLECONTF,C1.Win.C1Editor.Internal.HTML.IEnumUnknown@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleContainer.LockContainer(System.Boolean)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IOleInPlaceActiveObject">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceActiveObject.GetWindow(System.IntPtr@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceActiveObject.ContextSensitiveHelp(System.Boolean)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceActiveObject.TranslateAccelerator(C1.Win.C1Editor.Internal.HTML.tagMSG@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceActiveObject.OnFrameWindowActivate(System.Boolean)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceActiveObject.OnDocWindowActivate(System.Boolean)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceActiveObject.ResizeBorder(C1.Win.C1Editor.Internal.HTML.tagRECT@,C1.Win.C1Editor.Internal.HTML.IOleInPlaceUIWindow@,System.Boolean)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceActiveObject.EnableModeless(System.Boolean)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IOleInPlaceFrame">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceFrame.GetWindow(System.IntPtr@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceFrame.ContextSensitiveHelp(System.Boolean)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceFrame.GetBorder(C1.Win.C1Editor.Internal.HTML.tagRECT)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceFrame.RequestBorderSpace(C1.Win.C1Editor.Internal.HTML.tagRECT@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceFrame.SetBorderSpace(C1.Win.C1Editor.Internal.HTML.tagRECT@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceFrame.SetActiveObject(C1.Win.C1Editor.Internal.HTML.IOleInPlaceActiveObject@,System.String)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceFrame.InsertMenus(System.IntPtr,System.Object@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceFrame.SetMenu(System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceFrame.RemoveMenus(System.IntPtr)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceFrame.SetStatusText(System.String)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceFrame.EnableModeless(System.Boolean)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceFrame.TranslateAccelerator(C1.Win.C1Editor.Internal.HTML.tagMSG@,System.Int16)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IOleInPlaceUIWindow">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceUIWindow.GetWindow(System.IntPtr@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceUIWindow.ContextSensitiveHelp(System.Boolean)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceUIWindow.GetBorder(C1.Win.C1Editor.Internal.HTML.tagRECT@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceUIWindow.RequestBorderSpace(C1.Win.C1Editor.Internal.HTML.tagRECT@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceUIWindow.SetBorderSpace(C1.Win.C1Editor.Internal.HTML.tagRECT@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleInPlaceUIWindow.SetActiveObject(C1.Win.C1Editor.Internal.HTML.IOleInPlaceActiveObject@,System.String)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IOleObject">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.SetClientSite(C1.Win.C1Editor.Internal.HTML.IOleClientSite)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.GetClientSite(C1.Win.C1Editor.Internal.HTML.IOleClientSite@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.SetHostNames(System.String,System.String)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.Close(System.UInt32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.SetMoniker(System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.GetMoniker(System.UInt32,System.UInt32,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.InitFromData(System.Runtime.InteropServices.ComTypes.IDataObject,System.Boolean,System.UInt32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.GetClipboardData(System.UInt32,System.Runtime.InteropServices.ComTypes.IDataObject@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.DoVerb(System.Int32,C1.Win.C1Editor.Internal.HTML.tagMSG@,C1.Win.C1Editor.Internal.HTML.IOleClientSite,System.Int32,System.IntPtr,C1.Win.C1Editor.Internal.HTML.tagRECT@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.EnumVerbs(System.Object@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.OleUpdate">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.IsUpToDate">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.GetUserClassID(System.Guid@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.GetUserType(System.UInt32,System.String@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.SetExtent(System.UInt32,C1.Win.C1Editor.Internal.HTML.tagSIZEL@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.GetExtent(System.UInt32,C1.Win.C1Editor.Internal.HTML.tagSIZEL@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.Advise(System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.Unadvise(System.UInt32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.EnumAdvise(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.GetMiscStatus(System.UInt32,System.Int32@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleObject.SetColorScheme(System.Object@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IOleParentUndoUnit">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleParentUndoUnit.Open(C1.Win.C1Editor.Internal.HTML.IOleParentUndoUnit)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleParentUndoUnit.Close(C1.Win.C1Editor.Internal.HTML.IOleParentUndoUnit,System.Boolean)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleParentUndoUnit.Add(C1.Win.C1Editor.Internal.HTML.IOleUndoUnit)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleParentUndoUnit.FindUnit(C1.Win.C1Editor.Internal.HTML.IOleUndoUnit)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleParentUndoUnit.GetParentState(System.Int64@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IOleUndoManager">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoManager.Open(C1.Win.C1Editor.Internal.HTML.IOleParentUndoUnit)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoManager.Close(C1.Win.C1Editor.Internal.HTML.IOleParentUndoUnit,System.Boolean)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoManager.Add(C1.Win.C1Editor.Internal.HTML.IOleUndoUnit)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoManager.GetOpenParentState">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoManager.DiscardFrom(C1.Win.C1Editor.Internal.HTML.IOleUndoUnit)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoManager.UndoTo(C1.Win.C1Editor.Internal.HTML.IOleUndoUnit)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoManager.RedoTo(C1.Win.C1Editor.Internal.HTML.IOleUndoUnit)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoManager.EnumUndoable">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoManager.EnumRedoable">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoManager.GetLastUndoDescription">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoManager.GetLastRedoDescription">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoManager.Enable(System.Boolean)">
      <summary>
            This method is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.IOleUndoUnit">
      <summary>
            This interface is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoUnit.Do(C1.Win.C1Editor.Internal.HTML.IOleUndoManager)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoUnit.GetDescription(System.String@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoUnit.GetUnitType(System.Int32@,System.Int32@)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.IOleUndoUnit.OnNextAdd">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.POINT">
      <summary>
            This type is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.POINT.X">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.POINT.Y">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.POINT.#ctor(System.Int32,System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.POINT.op_Implicit(C1.Win.C1Editor.Internal.HTML.POINT)~System.Drawing.Point">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.POINT.op_Implicit(System.Drawing.Point)~C1.Win.C1Editor.Internal.HTML.POINT">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.RECT">
      <summary>
            This type is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.RECT.bottom">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.RECT.left">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.RECT.right">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.RECT.top">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.HTML_PAINT_XFORM">
      <summary>
            This type is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.HTML_PAINT_XFORM.eM11">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.HTML_PAINT_XFORM.eM12">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.HTML_PAINT_XFORM.eM21">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.HTML_PAINT_XFORM.eM22">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.HTML_PAINT_XFORM.eDx">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.HTML_PAINT_XFORM.eDy">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.HTML_PAINT_DRAW_INFO">
      <summary>
            This type is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.HTML_PAINT_DRAW_INFO.rcViewport">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.HTML_PAINT_DRAW_INFO.hrgnUpdate">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.HTML_PAINT_DRAW_INFO.xform">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.HTML_PAINTER_INFO">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.HTML_PAINTER_INFO.lFlags">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.HTML_PAINTER_INFO.lZOrder">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.HTML_PAINTER_INFO.iidDrawObject">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.HTML_PAINTER_INFO.rcBounds">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.tagDVASPECTINFO">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagDVASPECTINFO.cb">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagDVASPECTINFO.dwFlags">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.tagPOINT">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagPOINT.X">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagPOINT.Y">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.tagSIZE">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagSIZE.cx">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagSIZE.cy">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.tagSIZEL">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagSIZEL.cx">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagSIZEL.cy">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.tagRECT">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagRECT.Left">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagRECT.Top">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagRECT.Right">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagRECT.Bottom">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.HTML.tagRECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.tagMSG">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagMSG.hwnd">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagMSG.message">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagMSG.wParam">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagMSG.lParam">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagMSG.time">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagMSG.pt_x">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagMSG.pt_y">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.DOCHOSTUIINFO">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.DOCHOSTUIINFO.cbSize">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.DOCHOSTUIINFO.dwFlags">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.DOCHOSTUIINFO.dwDoubleClick">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.DOCHOSTUIINFO.pchHostCss">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.DOCHOSTUIINFO.pchHostNS">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.tagOLEVERB">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagOLEVERB.lVerb">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagOLEVERB.lpszVerbName">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagOLEVERB.fuFlags">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagOLEVERB.grfAttribs">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.tagOLECMD">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagOLECMD.cmdID">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagOLECMD.cmdf">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.tagOleMenuGroupWidths">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.tagOleMenuGroupWidths.widths">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.STGMEDIUM">
      <summary>
            This type is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.STGMEDIUM.tymed">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.STGMEDIUM.data">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.STGMEDIUM.pUnkForRelease">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.SECURITY_ATTRIBUTES">
      <summary>
            This type is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.SECURITY_ATTRIBUTES.nLength">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.SECURITY_ATTRIBUTES.lpSecurityDescriptor">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.SECURITY_ATTRIBUTES.bInheritHandle">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.HTML.BINDINFO">
      <summary>
            This type is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.BINDINFO.cbSize">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.BINDINFO.szExtraInfo">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.BINDINFO.stgmedData">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.BINDINFO.grfBindInfoF">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.BINDINFO.dwBindVerb">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.BINDINFO.szCustomVerb">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.BINDINFO.cbstgmedData">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.BINDINFO.dwOptions">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.BINDINFO.dwOptionsFlags">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.BINDINFO.dwCodePage">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.BINDINFO.securityAttributes">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.BINDINFO.iid">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.BINDINFO.punk">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.HTML.BINDINFO.dwReserved">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.D2HWebBrowserModes">
      <summary>
             Contains available appearance modes for D2HWebBrowser.
            </summary>
      <remarks>This type is for internal use.</remarks>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.D2HWebBrowserModes.Default">
      <summary>
            Default browser mode.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.D2HWebBrowserModes.DownloadOnly">
      <summary>
            Download only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.D2HWebBrowserModes.ShowAllMedia">
      <summary>
            Show all media.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Internal.D2HWebBrowserModes.ShowImages">
      <summary>
            Show images only. Don't show other embed objects.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.C1WebBrowserBase">
      <summary>
             This class makes next things over standard .NET WebBrowser:
             1.Performs initialization with navigating to "about:blank"
             2.Controls content loading and appearance
             3.Allows to load HTML from string with optional path
             4.Can set edit mode to MSHTML document
             It must me COM-visible to catch DISPID_AMBIENT_DLCONTROL
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.C1WebBrowserBase.Edit">
      <summary>
             Sets Edit mode for browser
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.C1WebBrowserBase.ReadOnly">
      <summary>
             Gets or sets a value indicating whether browser content is read-only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.C1WebBrowserBase.SuppressAccessibility">
      <summary>
             Suppresses browser accessibility options if true
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.C1WebBrowserBase.Mode">
      <summary>
             Sets appearance mode
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.C1WebBrowserBase.AllowDrop">
      <summary>
             Gets or sets a value indicating whether the control can accept data that the user drags onto it.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.C1WebBrowserBase.ShowComments">
      <summary>
             Sets appearance mode
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.C1WebBrowserBase.DocType">
      <summary>
             Sets DocType
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.LoadFromString(System.String,System.Uri)">
      <summary>
             Loads browser content from string
            <param name="html">HTML to output</param><param name="uri">Path to resolve pictures, video, links e t.c.</param></summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.Navigate(System.String)">
      <summary>
            Loads document from URL
            </summary>
      <param name="url">
      </param>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.Focus">
      <summary>
            Sets input focus to the control.
            </summary>
      <returns>true if the input focus request was successful; otherwise, false.</returns>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.C1WebBrowserBase.Focused">
      <summary>
            Return true, if control focused; otherwise, False.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.C1WebBrowserBase.Document">
      <summary>
            returns loaded document
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.LockNotifyChanges">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.UnlockNotifyChanges">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.BeginUndoRedoAction(System.String)">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.EndUndoRedoAction">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.C1WebBrowserBase.RestoreCursorAfterUndoRedo">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.C1WebBrowserBase.CSS">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.OnHandleCreated(System.EventArgs)">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.OnHandleDestroyed(System.EventArgs)">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.WndProc(System.Windows.Forms.Message@)">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.ExecClick">
      <summary>
            This member is for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.Idispatch_Invoke_Handler_DL_Control">
      <summary>
            This member is for internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.C1WebBrowserBase.Idispatch_Invoke_Handler_Usermode">
      <summary>
            This member is for internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.Win.C1Editor.Internal.History">
      <summary>
            This class provides undo and redo operations.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.History.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged resources used by the <see cref="T:C1.Win.C1Editor.Internal.History" /> class.
            </summary>
      <param name="disposing">
            true to release both managed and unmanaged resources; false to release only unmanaged resources.
            </param>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.History.Dispose">
      <summary>
            Releases all resources used by the <see cref="T:C1.Win.C1Editor.Internal.History" /> class.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.History.Undo(System.Int32)">
      <summary>
            Undo a given number of operations.
            </summary>
      <param name="count">Number of operations to undo.</param>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.History.Redo(System.Int32)">
      <summary>
            Redo a given number of operations.
            </summary>
      <param name="count">Number of operations to redo.</param>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.History.UndoList">
      <summary>
            Returns the list of available undo operations.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.History.RedoList">
      <summary>
            Returns the list of available redo operations.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.History.Undo">
      <summary>
            Undo the last operation.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Internal.History.Redo">
      <summary>
            Redo the last operation
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.History.CanUndo">
      <summary>
            Returns true if undo command can be executed
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Internal.History.CanRedo">
      <summary>
            Returns true if redo command can be executed
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.C1Editor">
      <summary>
            Represents the C1Editor control.
            </summary>
      <remarks>
        <para> The control has a <see cref="P:C1.Win.C1Editor.C1Editor.Document" /> property. 
            It is possible to assign an existing document to this property and it will be 
            displayed in the control.
            
            The control and the document are bound. 
            If the document is edited within the control, 
            the underlying XmlDocument changes to match the edited document. 
            If the XmlDocument changes (in code), then the changes appear in the editor.</para>
      </remarks>
      <example>
            This sample shows how to load an XHTML string into the editor and 
            append a stylesheet using functions of XmlDocument.
            <code>
            c1Editor1.LoadXml(xhtml);
            XmlElement style = c1Editor1.Document.CreateElement("style");
            style.InnerXml = "strong {text-decoration:underline}";
            foreach (XmlNode node in c1Editor1.Document.DocumentElement)
            {
                if (node.Name == "head")
                {
                    node.AppendChild(style);
                    break;
                }
            }
            </code></example>
    </member>
    <member name="E:C1.Win.C1Editor.C1Editor.DocumentChanged">
      <summary>
             Occurs when any change has happened in the document.
             </summary>
      <remarks>
             Handle this event to provide the processing that your application requires when changes occur in the edited document.
             </remarks>
      <example> This example shows how to add an "Add Image" button to the form.
             <code>
             private void Form1_Load(object sender, EventArgs e)
             {
                _btnAddImage = new Button();
                _btnAddImage.Text = "Add Image";
                _btnAddImage.Click += AddPictureDialog;
                this.Controls.Add(_btnAddImage);
            
                _btnAddImage.Location = new Point(10, 10);
            
                c1Editor1.DocumentChanged += UpdateUI;
                c1Editor1.SelectionChanged += UpdateUI;
                c1Editor1.ModeChanged += UpdateUI;
             }
            
             private void AddPictureDialog(object sender, EventArgs e)
             {
                c1Editor1.ShowDialog(DialogType.Image);
             }
            
             private void UpdateUI(object sender, EventArgs e)
             {
                _btnAddImage.Enabled = c1Editor1.CanShowDialog(DialogType.Image);
             }
             </code></example>
    </member>
    <member name="E:C1.Win.C1Editor.C1Editor.SelectionChanged">
      <summary>
             Occurs when the current selection is changed. 
             </summary>
      <example> This example shows how to add an "Add Image" button to the form.
             <code>
             private void Form1_Load(object sender, EventArgs e)
             {
                _btnAddImage = new Button();
                _btnAddImage.Text = "Add Image";
                _btnAddImage.Click += AddPictureDialog;
                this.Controls.Add(_btnAddImage);
            
                _btnAddImage.Location = new Point(10, 10);
            
                c1Editor1.DocumentChanged += UpdateUI;
                c1Editor1.SelectionChanged += UpdateUI;
                c1Editor1.ModeChanged += UpdateUI;
             }
            
             private void AddPictureDialog(object sender, EventArgs e)
             {
                c1Editor1.ShowDialog(DialogType.Image);
             }
            
             private void UpdateUI(object sender, EventArgs e)
             {
                _btnAddImage.Enabled = c1Editor1.CanShowDialog(DialogType.Image);
             }
             </code></example>
    </member>
    <member name="E:C1.Win.C1Editor.C1Editor.ModeChanged">
      <summary>
             Occurs when the <see cref="P:C1.Win.C1Editor.C1Editor.Mode" /> of the Editor is changed. 
             </summary>
      <example> This example shows how to add an "Add Image" button to the form.
             <code>
             private void Form1_Load(object sender, EventArgs e)
             {
                _btnAddImage = new Button();
                _btnAddImage.Text = "Add Image";
                _btnAddImage.Click += AddPictureDialog;
                this.Controls.Add(_btnAddImage);
            
                _btnAddImage.Location = new Point(10, 10);
            
                c1Editor1.DocumentChanged += UpdateUI;
                c1Editor1.SelectionChanged += UpdateUI;
                c1Editor1.ModeChanged += UpdateUI;
             }
            
             private void AddPictureDialog(object sender, EventArgs e)
             {
                c1Editor1.ShowDialog(DialogType.Image);
             }
            
             private void UpdateUI(object sender, EventArgs e)
             {
                _btnAddImage.Enabled = c1Editor1.CanShowDialog(DialogType.Image);
             }
             </code></example>
    </member>
    <member name="E:C1.Win.C1Editor.C1Editor.BeforeModeChange">
      <summary>
            Occurs when the <see cref="P:C1.Win.C1Editor.C1Editor.Mode" /> of the Editor is about to change. 
            </summary>
    </member>
    <member name="E:C1.Win.C1Editor.C1Editor.BeforeSave">
      <summary>
            Occurs before the document is saved.
            </summary>
    </member>
    <member name="E:C1.Win.C1Editor.C1Editor.AfterSave">
      <summary>
            Occurs after the document is saved.
            </summary>
    </member>
    <member name="E:C1.Win.C1Editor.C1Editor.HtmlEvent">
      <summary>
            Occurs when an HTML event occurs in the browser.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Editor.C1Editor" /> class. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.BorderStyle">
      <summary>
            Indicates whether the editor should have a border.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.Mode">
      <summary>
            Defines current editor view and behavior.
            </summary>
      <remarks>
            There are 3 modes: Design, Preview, Source.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.WordWrap">
      <summary>
            Indicates whether the editor automatically wraps words to the beginning of the next line when necessary in the Source mode.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.Focused">
      <summary>
            Gets a <b>Boolean</b> value indicating  whether the control has input focus.
            </summary>
      <value>
        <b>True</b> if the document has focus; otherwise, <b>False</b>.
            </value>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.AcceptsTab">
      <summary>
            Gets or sets a value indicating whether pressing the TAB key in a control types a TAB character in the editor instead of moving the focus to the next control in the tab order.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.AllowDrop">
      <summary>
            Gets or sets a value indicating whether the editor can accept data that the user drags onto it.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.ContextMenuStrip">
      <summary>
            Overrides the <see cref="P:System.Windows.Forms.Control.ContextMenuStrip" /> property.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.DefaultTitle">
      <summary>
            Gets or sets a string (followed by a number) used for the 'title' attribute of the loaded document if that attribute is not specified.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.ReadOnly">
      <summary>
            Gets or sets a value indicating whether content in the editor is read-only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.Document">
      <summary>
             Gets or sets the XML document bound to the <see cref="T:C1.Win.C1Editor.C1Editor" />.
             </summary>
      <remarks>
             The control and the document are bound. 
             If the document is edited within the control, 
             then the underlying XmlDocument changes to match it. 
             If the XmlDocument changes (in code), then the changes appear in the editor.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.BaseUri">
      <summary>
            Gets the base Uri of the current document.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.Xml">
      <summary>
            Gets or sets the current XML content of the editor.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.Text">
      <summary>
            Gets or sets the current text in the editor.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.IsDirty">
      <summary>
            Gets a Boolean value that indicates whether the document has been modified since it was last saved.
            </summary>
      <remarks>
            If the IsDirty property is True, data in the XML document has been changed since it was last saved. If False, no changes have occurred.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.MaxLength">
      <summary>
            Gets or sets the maximum number of characters the user can type or paste into the editor control.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.WebBrowser">
      <summary>
            Returns the ActiveX WebBrowser object for current <see cref="P:C1.Win.C1Editor.C1Editor.Mode" />. 
            </summary>
      <remarks>
        <para>This property returns a reference to the IWebBrowser2 interface.
            C1Editor uses Microsoft WebBrowser ActiveX control internally.</para>
        <para>In some advanced cases programmers may need to access that control directly
            to perform tasks that aren't otherwise available from C1Editor public interface.
            Such direct access to the underlying WebBrowser should be used only if there is no other way, and
            the programmer using it is responsible for not interfering with intenal invisible markup and attributes 
            (such as ids, etc) used in the underlying HTML by C1Editor.</para>
      </remarks>remarks&gt;
        </member>
    <member name="P:C1.Win.C1Editor.C1Editor.EnableComments">
      <summary>
            Indicates whether the editor turns Comments feature on or off.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.AllowAdHocTags">
      <summary>
            Indicates whether the editor turns validation on or off.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.XmlExtensions">
      <summary>
             Contains information about custom elements and attributes that extend the standard XHTML DTD.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.CustomDialogs">
      <summary>
            Allows user-defined dialog boxes such as 
            Find/Replace, Format, Insert table, and others to be used.
            </summary>
      <remarks>
        <para>The <see cref="T:C1.Win.C1Editor.C1Editor" /> contains several dialogs used to perform
            actions such as search/replace, inserting images, tables, and so on.</para>
        <para>To replace one or more of the built-in dialogs with your own custom ones,
            follow these steps:</para>
        <para>1. Implement the custom dialog making sure it supports the appropriate
            interface (for example <see cref="T:C1.Win.C1Editor.UICustomization.IFindReplaceDialog" />).</para>
        <para>2. Assign an instance of the custom dialog to the appropriate member of
            the <see cref="P:C1.Win.C1Editor.C1Editor.CustomDialogs" /> property.</para>
      </remarks>
      <example>
            The code below replaces the built-in bookmark and find/replace dialogs with
            customized versions of the dialogs.
            <code>
            private void InitCustomDialogs()
            {
              _editor.CustomDialogs.BookmarkDialog = new BookmarkEditorForm();
              _editor.CustomDialogs.FindReplaceDialog = new FindReplaceForm();
            }
            </code></example>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.KeyboardShortcutsEnabled">
      <summary>
             Gets or sets a value indicating whether the editor processes shortcuts for basic editing operations
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.SelectionStart">
      <summary>
            Gets or sets the index of the first selected character in the <see cref="T:C1.Win.C1Editor.C1Editor" />.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.SelectionLength">
      <summary>
            Gets or sets the number of selected characters in the <see cref="T:C1.Win.C1Editor.C1Editor" />.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.SelectedText">
      <summary>
            Gets the text currently selected in the <see cref="T:C1.Win.C1Editor.C1Editor" />.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.Selection">
      <summary>
            Gets the current selection in the <see cref="T:C1.Win.C1Editor.C1Editor" />.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.CanCut">
      <summary>
             Gets a value indicating whether the cut command is supported on the current selection.
             </summary>
      <example>This example shows how to create a custom context menu that can be linked to a C1Editor control and has Cut, Copy and Paste buttons.
            <code>
            class MyContextMenuStrip : ContextMenuStrip
            {
                private C1Editor _owner;
                private ToolStripMenuItem _btnCut, _btnCopy, _btnPaste;
            
                public MyContextMenuStrip(C1Editor editor)
                {
                    // save reference to parent control
                    _owner = editor;
            
                    // create menu items
                    _btnCut = (ToolStripMenuItem)Items.Add("Cut");
                    _btnCut.ShortcutKeys = Keys.Control | Keys.X;
                    _btnCopy = (ToolStripMenuItem)Items.Add("Copy");
                    _btnCopy.ShortcutKeys = Keys.Control | Keys.C;
                    _btnPaste = (ToolStripMenuItem)Items.Add("Paste");
                    _btnPaste.ShortcutKeys = Keys.Control | Keys.V;
                }
            
                protected override void OnItemClicked(ToolStripItemClickedEventArgs e)
                {
                    Close();
                    if (e.ClickedItem == _btnCopy)
                        _owner.Copy();
                    else if (e.ClickedItem == _btnCut)
                        _owner.Cut();
                    else if (e.ClickedItem == _btnPaste)
                        _owner.Paste();
                    base.OnItemClicked(e);
                }
            
                protected override void OnOpening(System.ComponentModel.CancelEventArgs e)
                {
                    _btnCopy.Enabled = _owner.CanCopy;
                    _btnCut.Enabled = _owner.CanCut;
                    _btnPaste.Enabled = _owner.CanPaste || _owner.CanPasteAsText;
                    base.OnOpening(e);
               }
               </code></example>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.CanCopy">
      <summary>
             Gets a value indicating whether the copy command is supported on the current selection.
             </summary>
      <example>This example shows how to create a custom context menu that can be linked to a C1Editor control and has Cut, Copy and Paste buttons.
            <code>
            class MyContextMenuStrip : ContextMenuStrip
            {
                private C1Editor _owner;
                private ToolStripMenuItem _btnCut, _btnCopy, _btnPaste;
            
                public MyContextMenuStrip(C1Editor editor)
                {
                    // save reference to parent control
                    _owner = editor;
            
                    // create menu items
                    _btnCut = (ToolStripMenuItem)Items.Add("Cut");
                    _btnCut.ShortcutKeys = Keys.Control | Keys.X;
                    _btnCopy = (ToolStripMenuItem)Items.Add("Copy");
                    _btnCopy.ShortcutKeys = Keys.Control | Keys.C;
                    _btnPaste = (ToolStripMenuItem)Items.Add("Paste");
                    _btnPaste.ShortcutKeys = Keys.Control | Keys.V;
                }
            
                protected override void OnItemClicked(ToolStripItemClickedEventArgs e)
                {
                    Close();
                    if (e.ClickedItem == _btnCopy)
                        _owner.Copy();
                    else if (e.ClickedItem == _btnCut)
                        _owner.Cut();
                    else if (e.ClickedItem == _btnPaste)
                        _owner.Paste();
                    base.OnItemClicked(e);
                }
            
                protected override void OnOpening(System.ComponentModel.CancelEventArgs e)
                {
                    _btnCopy.Enabled = _owner.CanCopy;
                    _btnCut.Enabled = _owner.CanCut;
                    _btnPaste.Enabled = _owner.CanPaste || _owner.CanPasteAsText;
                    base.OnOpening(e);
               }
               </code></example>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.CanPaste">
      <summary>
             Gets a value indicating whether the paste command is supported on the current selection.
             </summary>
      <example>This example shows how to create a custom context menu that can be linked to a C1Editor control and has Cut, Copy and Paste buttons.
            <code>
            class MyContextMenuStrip : ContextMenuStrip
            {
                private C1Editor _owner;
                private ToolStripMenuItem _btnCut, _btnCopy, _btnPaste;
            
                public MyContextMenuStrip(C1Editor editor)
                {
                    // save reference to parent control
                    _owner = editor;
            
                    // create menu items
                    _btnCut = (ToolStripMenuItem)Items.Add("Cut");
                    _btnCut.ShortcutKeys = Keys.Control | Keys.X;
                    _btnCopy = (ToolStripMenuItem)Items.Add("Copy");
                    _btnCopy.ShortcutKeys = Keys.Control | Keys.C;
                    _btnPaste = (ToolStripMenuItem)Items.Add("Paste");
                    _btnPaste.ShortcutKeys = Keys.Control | Keys.V;
                }
            
                protected override void OnItemClicked(ToolStripItemClickedEventArgs e)
                {
                    Close();
                    if (e.ClickedItem == _btnCopy)
                        _owner.Copy();
                    else if (e.ClickedItem == _btnCut)
                        _owner.Cut();
                    else if (e.ClickedItem == _btnPaste)
                        _owner.Paste();
                    base.OnItemClicked(e);
                }
            
                protected override void OnOpening(System.ComponentModel.CancelEventArgs e)
                {
                    _btnCopy.Enabled = _owner.CanCopy;
                    _btnCut.Enabled = _owner.CanCut;
                    _btnPaste.Enabled = _owner.CanPaste || _owner.CanPasteAsText;
                    base.OnOpening(e);
               }
               </code></example>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.CanPasteAsText">
      <summary>
             Determines whether you can paste information from the Clipboard in text format.
             </summary>
      <example>This example shows how to create a custom context menu that can be linked to a C1Editor control and has Cut, Copy and Paste buttons.
            <code>
            class MyContextMenuStrip : ContextMenuStrip
            {
                private C1Editor _owner;
                private ToolStripMenuItem _btnCut, _btnCopy, _btnPaste;
            
                public MyContextMenuStrip(C1Editor editor)
                {
                    // save reference to parent control
                    _owner = editor;
            
                    // create menu items
                    _btnCut = (ToolStripMenuItem)Items.Add("Cut");
                    _btnCut.ShortcutKeys = Keys.Control | Keys.X;
                    _btnCopy = (ToolStripMenuItem)Items.Add("Copy");
                    _btnCopy.ShortcutKeys = Keys.Control | Keys.C;
                    _btnPaste = (ToolStripMenuItem)Items.Add("Paste");
                    _btnPaste.ShortcutKeys = Keys.Control | Keys.V;
                }
            
                protected override void OnItemClicked(ToolStripItemClickedEventArgs e)
                {
                    // close menu (not automatic)
                    Close();
            
                    if (e.ClickedItem == _btnCopy)
                        _owner.Copy();
                    else if (e.ClickedItem == _btnCut)
                        _owner.Cut();
                    else if (e.ClickedItem == _btnPaste)
                        _owner.Paste();
                    // on to base class
                    base.OnItemClicked(e);
                }
            
                protected override void OnOpening(System.ComponentModel.CancelEventArgs e)
                {
                    if (_owner.Mode == EditorMode.Preview)
                    {
                        e.Cancel = true;
                    }
                    else if (_owner.Mode == EditorMode.Source)
                    {
                       _btnCopy.Enabled = _owner.CanCopy;
                       _btnCut.Enabled = _owner.CanCut;
                       _btnPaste.Enabled = _owner.CanPaste || _owner.CanPasteAsText;
            
                    // on to base class
                    base.OnOpening(e);
                    }
               }
               </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.LoadDesignCSS(System.String)">
      <summary>
            Loads a design CSS from a given file.
            The base URL is inferred from the file location.
            </summary>
      <param name="fileName">The file from which the design CSS is loaded.</param>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.LoadDesignCSS(System.IO.Stream)">
      <summary>
            Loads a design CSS from a given stream. 
            </summary>
      <param name="stream">The stream from which the design CSS is loaded.</param>
      <remarks>
            Base URL is not specified because this method only handles a simple, self-contained CSS. 
            The stream must be encoded in UTF-8.
            </remarks>
      <example>
            string value = "p {color:red;}";
            Stream stream = new MemoryStream(Encoding.UTF8.GetBytes(value));
            LoadDesignCSS(stream);
            </example>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.LoadPreviewCSS(System.String)">
      <summary>
            Loads the preview CSS from a given file.
            <remarks>
            Base URL is inferred from the file location.
            </remarks></summary>
      <param name="fileName">The file from which the preview CSS is loaded.</param>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.LoadPreviewCSS(System.IO.Stream)">
      <summary>
            Loads the preview CSS from a given stream.
            The base URL is not given; it assumes a simple, self-contained CSS. 
            It also assumes the stream is encoded in UTF8.
            </summary>
      <param name="stream">The stream from which the design CSS is loaded.</param>
      <example>
            string value = "p {color:red;}";
            Stream stream = new MemoryStream(Encoding.UTF8.GetBytes(value));
            LoadDesignCSS(stream);
            </example>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.LoadXml(System.String,System.Uri)">
      <summary>
            Loads the document from an XML string.
            </summary>
      <param name="xml">XML string to load.</param>
      <param name="baseUri"> Path to resolve pictures, video, links, and other resources.</param>
      <returns>
        <b>True</b>, if XML successfully loaded; otherwise, False.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.LoadXml(System.IO.Stream,System.Uri)">
      <summary>
            Loads the document from the specified stream in XML format.
            <param name="stream">The <see cref="T:System.IO.Stream" /> containing the XML document to load.</param><param name="baseUri"> Path to resolve pictures, video, links, and so on.</param></summary>
      <returns>
        <b>True</b>, if XML successfully loaded; otherwise, False.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.LoadXml(System.String)">
      <summary>
            Loads the document from the specified file in XML format.
            </summary>
      <param name="fileName">The name of the file containing the document to load.</param>
      <returns>True, if the file is successfully loaded; otherwise, False.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.LoadRtf(System.IO.Stream,System.Uri)">
      <summary>
            Loads the document from the specified stream in RTF format.
            <param name="stream">The <see cref="T:System.IO.Stream" /> containing the RTF document to load.</param><param name="baseUri"> Path to resolve pictures, video, links, and so on.</param></summary>
      <returns>
        <b>True</b>, if XML successfully loaded; otherwise, False.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.LoadRtf(System.String)">
      <summary>
            Loads the document from the specified file in RTF format.
            </summary>
      <param name="fileName">The name of the file containing the document to load.</param>
      <returns>True, if the file is successfully loaded; otherwise, False.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.SaveXml(System.String)">
      <summary>
            Saves the document to the specified file in XML format.
            </summary>
      <param name="fileName">The name of the file where you want to save the document.</param>
      <returns>True, if the file is successfully saved; otherwise, False.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.SaveXml(System.IO.Stream)">
      <summary>
            Saves the document to the specified stream in XML format.
            </summary>
      <param name="stream">The stream to which you want to save.</param>
      <returns>True, if the document is successfully saved; otherwise, False.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.SaveXml">
      <summary>
            Returns the XML content of the document as a string.
            </summary>
      <returns>XML content of the document as a string</returns>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.SaveRtf(System.String)">
      <summary>
            Saves the document to the specified file in RTF format.
            </summary>
      <param name="fileName">The name of the file where you want to save the document.</param>
      <returns>True, if the file is successfully saved; otherwise, False.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.SaveRtf(System.IO.Stream)">
      <summary>
            Saves the document to the specified stream in RTF format.
            </summary>
      <param name="stream">The stream to which you want to save.</param>
      <returns>True, if the document is successfully saved; otherwise, False.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.ValidateSource">
      <summary>
            Validates document in source mode and shows validation errors if found.
            </summary>
      <returns>
        <b>True</b> if document was validated without errors; otherwise, False. </returns>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.FixSource">
      <summary>
            Fixes the document in source mode, corrects errors, makes it valid XHTML.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.BeginTransaction(System.String)">
      <summary>
             Begins a transaction.
             </summary>
      <param name="title">Title of the started transaction.</param>
      <remarks>
             If the <see cref="P:C1.Win.C1Editor.C1Editor.Document" /> is changed without using transactions, each time any of the
             NodeInserted, NodeRemoved and NodeChanged events of the XmlDocument occurs, the control performs
             synchronization between XML and MSHTML. Calling <see cref="M:C1.Win.C1Editor.C1Editor.BeginTransaction(System.String)" /> tells the control
             it must not synchronized any changes made in XmlDocument until <see cref="M:C1.Win.C1Editor.C1Editor.CommitTransaction" /> is called. 
             The <see cref="M:C1.Win.C1Editor.C1TextRange.ApplyStyle(System.String,System.String)" /> and the <see cref="M:C1.Win.C1Editor.C1TextRange.RemoveStyle(System.String,System.String)" /> methods of the <see cref="T:C1.Win.C1Editor.C1TextRange" /> automatically start a transaction, if
             it has not been started yet.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.CommitTransaction">
      <summary>
             Commits the started transaction.
             </summary>
      <remarks>
             If the <see cref="P:C1.Win.C1Editor.C1Editor.Document" /> is changed without using transactions, each time any of the
             NodeInserted, NodeRemoved and NodeChanged events of the XmlDocument occurs, the control performs
             synchronization between XML and MSHTML. Calling <see cref="M:C1.Win.C1Editor.C1Editor.BeginTransaction(System.String)" /> tells the control
             it must not synchronized any changes made in XmlDocument until <see cref="M:C1.Win.C1Editor.C1Editor.CommitTransaction" /> is called. 
             The <see cref="M:C1.Win.C1Editor.C1TextRange.ApplyStyle(System.String,System.String)" /> and the <see cref="M:C1.Win.C1Editor.C1TextRange.RemoveStyle(System.String,System.String)" /> methods of the <see cref="T:C1.Win.C1Editor.C1TextRange" /> automatically start a transaction, if
             it has not been started yet.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.RollbackTransaction">
      <summary>
             Rolls back the transaction.
             </summary>
      <remarks>
             If the <see cref="P:C1.Win.C1Editor.C1Editor.Document" /> is changed without using transactions, each time any of the
             NodeInserted, NodeRemoved and NodeChanged events of the XmlDocument occurs, the control performs
             synchronization between XML and MSHTML. Calling <see cref="M:C1.Win.C1Editor.C1Editor.BeginTransaction(System.String)" /> tells the control
             it must not synchronized any changes made in XmlDocument until <see cref="M:C1.Win.C1Editor.C1Editor.CommitTransaction" /> is called. 
             The <see cref="M:C1.Win.C1Editor.C1TextRange.ApplyStyle(System.String,System.String)" /> and the <see cref="M:C1.Win.C1Editor.C1TextRange.RemoveStyle(System.String,System.String)" /> methods of the <see cref="T:C1.Win.C1Editor.C1TextRange" /> automatically start a transaction, if
             it has not been started yet.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.Focus">
      <summary>
            Sets input focus to the control.
            </summary>
      <returns>True if the input focus request was successful; otherwise, false.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.ScrollIntoView">
      <summary>
            Scrolls current document selection into view.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.CanShowDialog(C1.Win.C1Editor.DialogType)">
      <summary>
             Returns a Boolean value indicating whether or not the specified dialog can be shown. 
             </summary>
      <param name="type">The dialog type.</param>
      <returns>A Boolean value indicating whether or not the specified dialog can be shown.</returns>
      <example> This example shows how to add an "Add Image" button to the form.
             <code>
             private void Form1_Load(object sender, EventArgs e)
             {
                _btnAddImage = new Button();
                _btnAddImage.Text = "Add Image";
                _btnAddImage.Click += AddPictureDialog;
                this.Controls.Add(_btnAddImage);
            
                _btnAddImage.Location = new Point(10, 10);
            
                c1Editor1.DocumentChanged += UpdateUI;
                c1Editor1.SelectionChanged += UpdateUI;
                c1Editor1.ModeChanged += UpdateUI;
             }
            
             private void AddPictureDialog(object sender, EventArgs e)
             {
                c1Editor1.ShowDialog(DialogType.Image);
             }
            
             private void UpdateUI(object sender, EventArgs e)
             {
                _btnAddImage.Enabled = c1Editor1.CanShowDialog(DialogType.Image);
             }
             </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.ShowDialog(C1.Win.C1Editor.DialogType)">
      <summary>
             Shows the specified dialog box.
             </summary>
      <param name="type">The type of dialog box to show.</param>
      <example> This example shows how to add an "Add Image" button to the form.
             <code>
             private void Form1_Load(object sender, EventArgs e)
             {
                _btnAddImage = new Button();
                _btnAddImage.Text = "Add Image";
                _btnAddImage.Click += AddPictureDialog;
                this.Controls.Add(_btnAddImage);
            
                _btnAddImage.Location = new Point(10, 10);
            
                c1Editor1.DocumentChanged += UpdateUI;
                c1Editor1.SelectionChanged += UpdateUI;
                c1Editor1.ModeChanged += UpdateUI;
             }
            
             private void AddPictureDialog(object sender, EventArgs e)
             {
                c1Editor1.ShowDialog(DialogType.Image);
             }
            
             private void UpdateUI(object sender, EventArgs e)
             {
                _btnAddImage.Enabled = c1Editor1.CanShowDialog(DialogType.Image);
             }
             </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.SelectAll">
      <summary>
            Selects the entire contents of the editor.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.Select(System.Int32,System.Int32)">
      <summary>
            Creates a range that begins with the specified starting character and continues through the specified length of characters, and moves selection to the range.
            </summary>
      <param name="start">The start position.</param>
      <param name="length">The length of the range.</param>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.CreateRange">
      <summary>
            Creates a text range.
            </summary>
      <returns>A new text range.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.CreateRange(System.Int32,System.Int32)">
      <summary>
            Creates a range that begins with the specified starting character and continues through the specified length of characters.
            </summary>
      <param name="start">The start position</param>
      <param name="length">The length of the range</param>
      <returns>The text range.</returns>
      <example> This code demonstrates the <see cref="M:C1.Win.C1Editor.C1Editor.CreateRange(System.Int32,System.Int32)" /> method.
            <code><![CDATA[
                    private void button1_Click(object sender, EventArgs e)
                   {
                       c1Editor1.LoadXml("<html><head><title>Document</title></head><body><p>12<span>3</span>456</p></body></html>", new Uri("c:\\"));
                       C1TextRange r = c1Editor1.CreateRange(1, 3);
                       Console.WriteLine(r.Text);
                       // Output: 234
                   }
            ]]></code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.CreateRange(System.Xml.XmlNode)">
      <summary>
            Creates a range on the specified <see cref="T:System.Xml.XmlNode" />.
            </summary>
      <param name="node">The target node.</param>
      <returns>The text range.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.CreateRange(C1.Win.C1Editor.C1TextPointer,C1.Win.C1Editor.C1TextPointer)">
      <summary>
            Creates a range between the specified start and end <see cref="T:C1.Win.C1Editor.C1TextPointer" />.
            </summary>
      <param name="start">The start pointer.</param>
      <param name="end">The end pointer.</param>
      <returns>The text range.</returns>
      <example> This code demonstrates the <see cref="M:C1.Win.C1Editor.C1Editor.CreateRange(System.Int32,System.Int32)" /> method.
            <code><![CDATA[
                    private void button1_Click(object sender, EventArgs e)
                   {
                       c1Editor1.LoadXml("<html><head><title>Document</title></head><body><p>12<span>3</span>456</p></body></html>", new Uri("c:\\"));
                       C1TextRange r = c1Editor1.CreateRange(1, 3);
                       Console.WriteLine(r.Text);
                       // Output: 234
                   }
            ]]></code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.GetActiveXInstance">
      <summary>
            Gets the underlying ActiveX WebBrowser control. 
            </summary>
      <returns>Reference to the ActiveX WebBrowser object.</returns>
      <remarks>
            Use this method to get a reference to the IWebBrowser2 interface.
            For example, <b>C1SpellChecker</b> uses the IWebBrowser2 interface
            to support spelling in the C1Editor.
            </remarks>
      <example>Code below shows how to activate spell checking 
            using C1SpellChecker and the <b>GetActiveXInstance</b> method.
            <code>
            spellChecker.SetActiveSpellChecking(editor, editor.GetActiveXInstance(), true);
            </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.Print">
      <summary>
            Prints the current document.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.Print(System.Boolean)">
      <summary>
            Prints the current document.
            </summary>
      <param name="selectPrinter">Determines whether a printer selection dialog box is displayed. 
            </param>
      <remarks>
             If <paramref name="selectPrinter" /> is True, the Print dialog box opens before printing, so the user can select a printer and change settings.
             If <paramref name="selectPrinter" /> is False, then the current page is printed.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.Print(System.Boolean,System.String)">
      <summary>
        <para>
            Prints the current document.
             </para>
      </summary>
      <param name="selectPrinter">Determines whether a printer selection dialog box is displayed.
            </param>
      <param name="printTemplateFileName">File name of a print template.</param>
      <remarks>
             If <paramref name="selectPrinter" /> is True, the Print dialog box opens before printing, so the user can select a printer and change settings.
             If <paramref name="selectPrinter" /> is False, then the current page is printed.
             The specified print template is used.
             For details about print templates see
             http://msdn.microsoft.com/en-us/library/aa753279(VS.85).aspx
            </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.PrintPreview">
      <summary>
            Shows a print preview dialog.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.PrintPreview(System.String)">
      <summary>
        <para>
            Shows a print preview dialog.
             Uses the specified print template.
             See more details about print templates at
             http://msdn.microsoft.com/en-us/library/aa753279(VS.85).aspx
             </para>
      </summary>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.Cut">
      <summary>
             Moves the current selection to the Clipboard.
             </summary>
      <example>This example shows how to create a custom context menu that can be linked to a C1Editor control and has Cut, Copy and Paste buttons.
            <code>
            class MyContextMenuStrip : ContextMenuStrip
            {
                private C1Editor _owner;
                private ToolStripMenuItem _btnCut, _btnCopy, _btnPaste;
            
                public MyContextMenuStrip(C1Editor editor)
                {
                    // save reference to parent control
                    _owner = editor;
            
                    // create menu items
                    _btnCut = (ToolStripMenuItem)Items.Add("Cut");
                    _btnCut.ShortcutKeys = Keys.Control | Keys.X;
                    _btnCopy = (ToolStripMenuItem)Items.Add("Copy");
                    _btnCopy.ShortcutKeys = Keys.Control | Keys.C;
                    _btnPaste = (ToolStripMenuItem)Items.Add("Paste");
                    _btnPaste.ShortcutKeys = Keys.Control | Keys.V;
                }
            
                protected override void OnItemClicked(ToolStripItemClickedEventArgs e)
                {
                    Close();
                    if (e.ClickedItem == _btnCopy)
                        _owner.Copy();
                    else if (e.ClickedItem == _btnCut)
                        _owner.Cut();
                    else if (e.ClickedItem == _btnPaste)
                        _owner.Paste();
                    base.OnItemClicked(e);
                }
            
                protected override void OnOpening(System.ComponentModel.CancelEventArgs e)
                {
                    _btnCopy.Enabled = _owner.CanCopy;
                    _btnCut.Enabled = _owner.CanCut;
                    _btnPaste.Enabled = _owner.CanPaste || _owner.CanPasteAsText;
                    base.OnOpening(e);
               }
               </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.Copy">
      <summary>
             Copies the current selection to the Clipboard.
             </summary>
      <example>This example shows how to create a custom context menu that can be linked to a C1Editor control and has Cut, Copy and Paste buttons.
            <code>
            class MyContextMenuStrip : ContextMenuStrip
            {
                private C1Editor _owner;
                private ToolStripMenuItem _btnCut, _btnCopy, _btnPaste;
            
                public MyContextMenuStrip(C1Editor editor)
                {
                    // save reference to parent control
                    _owner = editor;
            
                    // create menu items
                    _btnCut = (ToolStripMenuItem)Items.Add("Cut");
                    _btnCut.ShortcutKeys = Keys.Control | Keys.X;
                    _btnCopy = (ToolStripMenuItem)Items.Add("Copy");
                    _btnCopy.ShortcutKeys = Keys.Control | Keys.C;
                    _btnPaste = (ToolStripMenuItem)Items.Add("Paste");
                    _btnPaste.ShortcutKeys = Keys.Control | Keys.V;
                }
            
                protected override void OnItemClicked(ToolStripItemClickedEventArgs e)
                {
                    Close();
                    if (e.ClickedItem == _btnCopy)
                        _owner.Copy();
                    else if (e.ClickedItem == _btnCut)
                        _owner.Cut();
                    else if (e.ClickedItem == _btnPaste)
                        _owner.Paste();
                    base.OnItemClicked(e);
                }
            
                protected override void OnOpening(System.ComponentModel.CancelEventArgs e)
                {
                    _btnCopy.Enabled = _owner.CanCopy;
                    _btnCut.Enabled = _owner.CanCut;
                    _btnPaste.Enabled = _owner.CanPaste || _owner.CanPasteAsText;
                    base.OnOpening(e);
               }
               </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.Paste">
      <summary>
             Replaces the current selection in the editor with the contents of the Clipboard.
             </summary>
      <example>This example shows how to create a custom context menu that can be linked to a C1Editor control and has Cut, Copy and Paste buttons.
            <code>
            class MyContextMenuStrip : ContextMenuStrip
            {
                private C1Editor _owner;
                private ToolStripMenuItem _btnCut, _btnCopy, _btnPaste;
            
                public MyContextMenuStrip(C1Editor editor)
                {
                    // save reference to parent control
                    _owner = editor;
            
                    // create menu items
                    _btnCut = (ToolStripMenuItem)Items.Add("Cut");
                    _btnCut.ShortcutKeys = Keys.Control | Keys.X;
                    _btnCopy = (ToolStripMenuItem)Items.Add("Copy");
                    _btnCopy.ShortcutKeys = Keys.Control | Keys.C;
                    _btnPaste = (ToolStripMenuItem)Items.Add("Paste");
                    _btnPaste.ShortcutKeys = Keys.Control | Keys.V;
                }
            
                protected override void OnItemClicked(ToolStripItemClickedEventArgs e)
                {
                    Close();
                    if (e.ClickedItem == _btnCopy)
                        _owner.Copy();
                    else if (e.ClickedItem == _btnCut)
                        _owner.Cut();
                    else if (e.ClickedItem == _btnPaste)
                        _owner.Paste();
                    base.OnItemClicked(e);
                }
            
                protected override void OnOpening(System.ComponentModel.CancelEventArgs e)
                {
                    _btnCopy.Enabled = _owner.CanCopy;
                    _btnCut.Enabled = _owner.CanCut;
                    _btnPaste.Enabled = _owner.CanPaste || _owner.CanPasteAsText;
                    base.OnOpening(e);
               }
               </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.PasteAsText">
      <summary>
            Pastes the contents of the Clipboard into the editor using text format.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.Undo">
      <summary>
             Performs Undo action in the current editor mode (design or source).
             </summary>
      <example>This example shows how to create a custom context menu that can be linked to a C1Editor control and has Undo and Redo buttons.
            <code>
            class MyContextMenuStrip : ContextMenuStrip
            {
                private C1Editor _owner;
                private ToolStripMenuItem _btnUndo, _btnRedo;
            
                public MyContextMenuStrip(C1Editor editor)
                {
                    // save reference to parent control
                    _owner = editor;
            
                    // create menu items
                    _btnUndo = (ToolStripMenuItem)Items.Add("Undo");
                    _btnUndo.ShortcutKeys = Keys.Control | Keys.Z;
                    _btnRedo = (ToolStripMenuItem)Items.Add("Redo");
                    _btnRedo.ShortcutKeys = Keys.Control | Keys.Y;
                }
            
                protected override void OnItemClicked(ToolStripItemClickedEventArgs e)
                {
                    Close();
            
                    if (e.ClickedItem == _btnUndo)
                        _owner.Undo();
                    else if (e.ClickedItem == _btnRedo)
                        _owner.Redo();
                    base.OnItemClicked(e);
                }
            
                protected override void OnOpening(System.ComponentModel.CancelEventArgs e)
                {
                    _btnUndo.Enabled = _owner.CanUndo;
                    _btnRedo.Enabled = _owner.CanCut;
                    base.OnOpening(e);
                }
               </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.Redo">
      <summary>
             Performs Redo action in the current editor mode (design or source).
             </summary>
      <example>This example shows how to create a custom context menu that can be linked to a C1Editor control and has Undo and Redo buttons.
            <code>
            class MyContextMenuStrip : ContextMenuStrip
            {
                private C1Editor _owner;
                private ToolStripMenuItem _btnUndo, _btnRedo;
            
                public MyContextMenuStrip(C1Editor editor)
                {
                    // save reference to parent control
                    _owner = editor;
            
                    // create menu items
                    _btnUndo = (ToolStripMenuItem)Items.Add("Undo");
                    _btnUndo.ShortcutKeys = Keys.Control | Keys.Z;
                    _btnRedo = (ToolStripMenuItem)Items.Add("Redo");
                    _btnRedo.ShortcutKeys = Keys.Control | Keys.Y;
                }
            
                protected override void OnItemClicked(ToolStripItemClickedEventArgs e)
                {
                    Close();
            
                    if (e.ClickedItem == _btnUndo)
                        _owner.Undo();
                    else if (e.ClickedItem == _btnRedo)
                        _owner.Redo();
                    base.OnItemClicked(e);
                }
            
                protected override void OnOpening(System.ComponentModel.CancelEventArgs e)
                {
                    _btnUndo.Enabled = _owner.CanUndo;
                    _btnRedo.Enabled = _owner.CanCut;
                    base.OnOpening(e);
                }
               </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.CanUndo">
      <summary>
             Returns a value that indicates whether the most recent action can be undone.
             </summary>
      <returns>True if the most recent action can be undone; otherwise, False.</returns>
      <example>This example shows how to create a custom context menu that can be linked to a C1Editor control and has Undo and Redo buttons.
            <code>
            class MyContextMenuStrip : ContextMenuStrip
            {
                private C1Editor _owner;
                private ToolStripMenuItem _btnUndo, _btnRedo;
            
                public MyContextMenuStrip(C1Editor editor)
                {
                    // save reference to parent control
                    _owner = editor;
            
                    // create menu items
                    _btnUndo = (ToolStripMenuItem)Items.Add("Undo");
                    _btnUndo.ShortcutKeys = Keys.Control | Keys.Z;
                    _btnRedo = (ToolStripMenuItem)Items.Add("Redo");
                    _btnRedo.ShortcutKeys = Keys.Control | Keys.Y;
                }
            
                protected override void OnItemClicked(ToolStripItemClickedEventArgs e)
                {
                    Close();
            
                    if (e.ClickedItem == _btnUndo)
                        _owner.Undo();
                    else if (e.ClickedItem == _btnRedo)
                        _owner.Redo();
                    base.OnItemClicked(e);
                }
            
                protected override void OnOpening(System.ComponentModel.CancelEventArgs e)
                {
                    _btnUndo.Enabled = _owner.CanUndo;
                    _btnRedo.Enabled = _owner.CanCut;
                    base.OnOpening(e);
                }
               </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.CanRedo">
      <summary>
             Returns a value that indicates whether the most recent undo action can be redone.
             </summary>
      <returns>True if the most recent undo action can be redone; otherwise, False.</returns>
      <example>This example shows how to create a custom context menu that can be linked to a C1Editor control and has Undo and Redo buttons.
            <code>
            class MyContextMenuStrip : ContextMenuStrip
            {
                private C1Editor _owner;
                private ToolStripMenuItem _btnUndo, _btnRedo;
            
                public MyContextMenuStrip(C1Editor editor)
                {
                    // save reference to parent control
                    _owner = editor;
            
                    // create menu items
                    _btnUndo = (ToolStripMenuItem)Items.Add("Undo");
                    _btnUndo.ShortcutKeys = Keys.Control | Keys.Z;
                    _btnRedo = (ToolStripMenuItem)Items.Add("Redo");
                    _btnRedo.ShortcutKeys = Keys.Control | Keys.Y;
                }
            
                protected override void OnItemClicked(ToolStripItemClickedEventArgs e)
                {
                    Close();
            
                    if (e.ClickedItem == _btnUndo)
                        _owner.Undo();
                    else if (e.ClickedItem == _btnRedo)
                        _owner.Redo();
                    base.OnItemClicked(e);
                }
            
                protected override void OnOpening(System.ComponentModel.CancelEventArgs e)
                {
                    _btnUndo.Enabled = _owner.CanUndo;
                    _btnRedo.Enabled = _owner.CanCut;
                    base.OnOpening(e);
                }
               </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.BeginInit">
      <summary>
            Begins the initialization of a <see cref="T:C1.Win.C1Editor.C1Editor" /> control that is used on a form or used by another component. 
            The initialization occurs at run time.
            </summary>
      <remarks>
            The Visual Studio .NET design environment uses this method to start the initialization of a component that is used on a form or used by another component. The EndInit method ends the initialization. Using the BeginInit and EndInit methods prevents the control from being used before it is fully initialized.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.EndInit">
      <summary>
            Ends the initialization of a <see cref="T:C1.Win.C1Editor.C1Editor" /> that is used on a form or used by another component. 
            The initialization occurs at run time.
            </summary>
      <remarks>
            The Visual Studio .NET design environment uses this method to end the initialization of a component that is used on a form or used by another component. The BeginInit method starts the initialization. Using the BeginInit and EndInit methods prevents the control from being used before it is fully initialized.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.DefaultMinimumSize">
      <summary>
            Overrides <see cref="P:System.Windows.Forms.Control.DefaultMinimumSize" />.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.WndProc(System.Windows.Forms.Message@)">
      <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />.
            </summary>
      <param name="m">Message.</param>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.OnEnter(System.EventArgs)">
      <summary>
            Sends focus to active browser when entering the editor.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.Dispose(System.Boolean)">
      <summary>
            Releases all the resources that the editor owns.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.OnBeforeSave(System.ComponentModel.CancelEventArgs)">
      <summary>
            Raises <see cref="E:C1.Win.C1Editor.C1Editor.BeforeSave" /> event.
            </summary>
      <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.OnAfterSave(System.EventArgs)">
      <summary>
            Raises <see cref="E:C1.Win.C1Editor.C1Editor.AfterSave" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains event data.</param>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.OnHtmlEvent(C1.Win.C1Editor.HtmlEventEventArgs)">
      <summary>
            Raises <see cref="E:C1.Win.C1Editor.C1Editor.HtmlEvent" /> event.
            </summary>
      <param name="e">A <see cref="T:C1.Win.C1Editor.HtmlEventEventArgs" /> that contains event data.</param>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.OnDocumentChanged(System.EventArgs)">
      <summary>
            Raises <see cref="E:C1.Win.C1Editor.C1Editor.DocumentChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains event data.</param>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.OnSelectionChanged(System.EventArgs)">
      <summary>
            Raises <see cref="E:C1.Win.C1Editor.C1Editor.SelectionChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains event data.</param>
    </member>
    <member name="M:C1.Win.C1Editor.C1Editor.OnBeforeModeChange(C1.Win.C1Editor.BeforeModeChangeEventArgs)">
      <summary>
            Raises <see cref="E:C1.Win.C1Editor.C1Editor.SelectionChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains event data.</param>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.History">
      <summary>
             Returns XML document for editing
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.C1Editor.SetFocusAfterLoading">
      <summary>
            Gets or sets a value indicating whether focus will be set to a control after the document is loaded.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.BeforeModeChangeEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1Editor.C1Editor.BeforeModeChange" /> event of the editor.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:C1.Win.C1Editor.BeforeModeChangeEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:C1.Win.C1Editor.HtmlEventEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1Editor.C1Editor.HtmlEvent" /> event of the editor.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:C1.Win.C1Editor.HtmlEventEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:C1.Win.C1Editor.BeforeModeChangeEventArgs">
      <summary>
            Provides data for the <see cref="E:C1.Win.C1Editor.C1Editor.BeforeModeChange" /> event.
            </summary>
      <remarks>
            This type is used in the <see cref="E:C1.Win.C1Editor.C1Editor.BeforeModeChange" /> event.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.BeforeModeChangeEventArgs.#ctor(C1.Win.C1Editor.EditorMode,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Editor.BeforeModeChangeEventArgs" /> class.
            </summary>
      <param name="newMode">Gets or sets a new editing mode.</param>
      <param name="htmlString">Gets or sets the HTML source for the document being edited.</param>
    </member>
    <member name="P:C1.Win.C1Editor.BeforeModeChangeEventArgs.NewMode">
      <summary>
            Gets or sets a new editing mode. Choose from Design, Source, or Preview modes.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.BeforeModeChangeEventArgs.HtmlString">
      <summary>
            Gets or sets the HTML source for the document being edited.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.HtmlEventEventArgs">
      <summary>
            Provides data for the <see cref="E:C1.Win.C1Editor.C1Editor.HtmlEvent" /> event.
            </summary>
      <remarks>
            This type is used in the <see cref="E:C1.Win.C1Editor.C1Editor.HtmlEvent" /> event.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.HtmlEventEventArgs.#ctor(C1.Win.C1Editor.Internal.HTML.IHTMLEventObj,C1.Win.C1Editor.HtmlEventTypes)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Editor.HtmlEventEventArgs" /> class.
            </summary>
      <param name="htmlEventObj">Gets information about an HTML event.</param>
      <param name="type">Gets the type of HTML event.</param>
    </member>
    <member name="P:C1.Win.C1Editor.HtmlEventEventArgs.HTMLEventObj">
      <summary>
            Gets information about an HTML event.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.HtmlEventEventArgs.Type">
      <summary>
            Gets the type of HTML event.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.ToolStrips.C1ToolStripColorPicker">
      <summary>
            Represents a toolstrip color picker control.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1ToolStripColorPicker.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Editor.ToolStrips.C1ToolStripColorPicker" /> class.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.ToolStrips.C1ToolStripColorPicker.Color">
      <summary>
            Gets or sets the color selected by the user.
            </summary>
    </member>
    <member name="E:C1.Win.C1Editor.ToolStrips.C1ToolStripColorPicker.ColorChanged">
      <summary>
            Occurs when the Color property value changes.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1ToolStripColorPicker.OnColorChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:C1.Win.C1Editor.ToolStrips.C1ToolStripColorPicker.ColorChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
    </member>
    <member name="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripColorPicker">
      <summary>
            Represents a toolstrip color picker which performs a command in a linked <see cref="T:C1.Win.C1Editor.C1Editor" /> control.
            </summary>
      <remarks>
            Use this class to add a <see cref="T:C1.Win.C1Editor.C1Editor" />-related color picker to a ToolStrip.
            </remarks>
      <example>
            The following code example demonstrates how to create a <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripColorPicker" /> and add it to a <see cref="T:System.Windows.Forms.ToolStrip" />. 
            <code>
              C1EditorToolStripColorPicker colorPicker = new C1EditorToolStripColorPicker();
              colorPicker.Command = CommandColorPicker.ForeColor;
              colorPicker.Editor = c1Editor1;
              toolStrip1.Items.Add(colorPicker);
            </code></example>
    </member>
    <member name="P:C1.Win.C1Editor.ToolStrips.C1EditorToolStripColorPicker.Command">
      <summary>
            Gets or sets the command.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.ToolStrips.C1EditorToolStripColorPicker.Editor">
      <summary>
            Gets or sets the editor.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripColorPicker.OnCommandChanged">
      <summary>
            Occurs when the command is changed.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripColorPicker.OnEditorChanging">
      <summary>
            Occurs when the editor is changing.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripColorPicker.OnEditorChanged">
      <summary>
            Occurs when the editor is changed.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripSplitButton">
      <summary>
            Represents a toolstrip split button which performs a command in a linked <see cref="T:C1.Win.C1Editor.C1Editor" /> control.
            </summary>
      <remarks>
            Use this class to add a <see cref="T:C1.Win.C1Editor.C1Editor" />-related split button to a ToolStrip.
            </remarks>
      <example>
            The following code example demonstrates how to create a <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripSplitButton" /> and add it to a <see cref="T:System.Windows.Forms.ToolStrip" />. 
            <code>
              C1EditorToolStripSplitButton button = new C1EditorToolStripSplitButton();
              button.Command = CommandSplitButton.Border;
              button.Editor = c1Editor1;
              toolStrip1.Items.Add(button);
            </code></example>
    </member>
    <member name="P:C1.Win.C1Editor.ToolStrips.C1EditorToolStripSplitButton.Command">
      <summary>
            Gets or sets the command.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.ToolStrips.C1EditorToolStripSplitButton.Editor">
      <summary>
            Gets or sets the editor.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.ToolStrips.C1EditorToolStripSplitButton.Checked">
      <summary>
            Gets or sets a value indicating whether the button is in the checked state.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripSplitButton.OnCommandChanged">
      <summary>
            Occurs when the command is changed.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripSplitButton.OnEditorChanging">
      <summary>
            Occurs when the editor is changing.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripSplitButton.OnEditorChanged">
      <summary>
            Occurs when the editor is changed.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripSplitButton.OnButtonClick(System.EventArgs)">
      <summary>
            Overrides OnButtonClick.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripSplitButton.OnDropDownItemClicked(System.Windows.Forms.ToolStripItemClickedEventArgs)">
      <summary>
            Overrides OnDropDownItemClicked.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripSplitButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>
            Overrides OnPaint.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.ToolStrips.CommandButton">
      <summary>
            Specifies the command used in a <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripButton" />.
            </summary>
      <remarks>
            The CommandButton enumeration is used by the <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripButton" /> to set associated with the command text, tooltip and image. 
            The command defines also whether the button is checked or unchecked and whether the button is enabled or disabled.
            </remarks>
      <example>
            The following code example demonstrates how to create a <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripButton" /> and add it to a <see cref="T:System.Windows.Forms.ToolStrip" />. 
            <code>
              C1EditorToolStripButton button = new C1EditorToolStripButton();
              button.Command = CommandButton.ClearFormatting;
              button.Editor = c1Editor1;
              toolStrip1.Items.Add(button);
            </code></example>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.None">
      <summary>
            Empty command.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Bold">
      <summary>
            Bold.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Italic">
      <summary>
            Italic.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Underline">
      <summary>
            Underline.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Strikethrough">
      <summary>
            Strikethrough.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Subscript">
      <summary>
            Subscript.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Superscript">
      <summary>
            Superscript.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.ClearFormatting">
      <summary>
            Clear formatting.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Left">
      <summary>
            Left.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Center">
      <summary>
            Center.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Right">
      <summary>
            Right.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Justify">
      <summary>
            Justify.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.BigFont">
      <summary>
            Big font.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.SmallFont">
      <summary>
            Small font.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.New">
      <summary>
            New file.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Open">
      <summary>
            Open file.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Save">
      <summary>
            Save file.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Print">
      <summary>
            Print.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Cut">
      <summary>
            Cut.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Copy">
      <summary>
            Copy.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Paste">
      <summary>
            Paste.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Undo">
      <summary>
            Undo.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Redo">
      <summary>
            Redo.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.SelectAll">
      <summary>
            Select all.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Find">
      <summary>
            Find.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Replace">
      <summary>
            Replace.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Design">
      <summary>
            Design view.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Source">
      <summary>
            Source view.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Preview">
      <summary>
            Preview.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Table">
      <summary>
            New table.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.InsertRowAbove">
      <summary>
            Insert row above.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.InsertRowBelow">
      <summary>
            Insert row below.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.InsertColumnBefore">
      <summary>
            Insert column before.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.InsertColumnAfter">
      <summary>
            Insert column after.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.TableProperties">
      <summary>
            Table properties.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.RowProperties">
      <summary>
            Row properties.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.ColumnProperties">
      <summary>
            Column properties.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.CellProperties">
      <summary>
            Cell properties.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.DeleteTable">
      <summary>
            Delete table.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.DeleteRow">
      <summary>
            Delete row.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.DeleteColumn">
      <summary>
            Delete column.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Picture">
      <summary>
            Picture.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Hyperlink">
      <summary>
            Hyperlink.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.Bookmark">
      <summary>
            Bookmark.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.FlashMovie">
      <summary>
            FlashMovie.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.NumberedList">
      <summary>
            Numbered list.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.BulletedList">
      <summary>
            Bulleted list.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.IncreaseIndent">
      <summary>
            Increase indent.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.DecreaseIndent">
      <summary>
            Decrease indent.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.AddComment">
      <summary>
            Adds comment.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.ReplyComment">
      <summary>
            Replies to the comment.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.DeleteComment">
      <summary>
            Deletes the current comment.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.DeleteAllComments">
      <summary>
            Deletes all comments.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.MovePreviousComment">
      <summary>
            Moves to the previous comment.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.MoveNextComment">
      <summary>
            Moves to the next comment.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandButton.ShowComments">
      <summary>
            Shows comments.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.ToolStrips.CommandSplitButton">
      <summary>
            Specifies the command used in a <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripSplitButton" />.
            </summary>
      <remarks>
            The CommandSplitButton enumeration is used by the <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripSplitButton" /> to set associated with the command text, tooltip, image, and menu items. 
            The command defines also whether the button is checked or unchecked and whether the button is enabled or disabled.
            </remarks>
      <example>
            The following code example demonstrates how to create a <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripSplitButton" /> and add it to a <see cref="T:System.Windows.Forms.ToolStrip" />. 
            <code>
              C1EditorToolStripSplitButton button = new C1EditorToolStripSplitButton();
              button.Command = CommandSplitButton.Border;
              button.Editor = c1Editor1;
              toolStrip1.Items.Add(button);
            </code></example>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandSplitButton.None">
      <summary>
            Empty command.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandSplitButton.Border">
      <summary>
            Border
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.ToolStrips.CommandComboBox">
      <summary>
            Specifies the command used in a <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox" />.
            </summary>
      <remarks>
            The CommandComboBox enumeration is used by the <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox" /> to set items associated with the command. 
            </remarks>
      <example>
            The following code example demonstrates how to create a <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox" /> and add it to a <see cref="T:System.Windows.Forms.ToolStrip" />. 
            <code>
              C1EditorToolStripComboBox comboBox = new C1EditorToolStripComboBox();
              comboBox.Command = CommandComboBox.Style;
              comboBox.Editor = c1Editor1;
              toolStrip1.Items.Add(comboBox);
            </code></example>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandComboBox.None">
      <summary>
            Empty command.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandComboBox.Style">
      <summary>
            Style combo box.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandComboBox.FontFamily">
      <summary>
            Font family combo box.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandComboBox.FontSize">
      <summary>
            Font size combo box.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.ToolStrips.CommandColorPicker">
      <summary>
            Specifies the command used in a <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripColorPicker" />.
            </summary>
      <remarks>
            The CommandComboBox enumeration is used by the <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripColorPicker" /> to set items associated with the command. 
            </remarks>
      <example>
            The following code example demonstrates how to create a <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripColorPicker" /> and add it to a <see cref="T:System.Windows.Forms.ToolStrip" />. 
            <code>
              C1EditorToolStripColorPicker colorPicker = new C1EditorToolStripColorPicker();
              colorPicker.Command = CommandColorPicker.ForeColor;
              colorPicker.Editor = c1Editor1;
              toolStrip1.Items.Add(colorPicker);
            </code></example>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandColorPicker.None">
      <summary>
            Empty command.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandColorPicker.ForeColor">
      <summary>
            Text color.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandColorPicker.BackColor">
      <summary>
            Background color.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.ToolStrips.CommandColorPicker.ParagraphBackColor">
      <summary>
            Paragraph background color.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripBase">
      <summary>
             Implements the basic functionality common to <see cref="T:C1.Win.C1Editor.C1Editor" />-related toolstrips.
             This class is abstract.
             </summary>
      <remarks>
             To create your own <see cref="T:C1.Win.C1Editor.C1Editor" />-related toolstrip,
             inherit from the C1EditorToolStripBase class.
             
             Override <see cref="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripBase.OnInitialize" /> to add items to the toolstrip.
             
             Use <see cref="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripBase.AddButton(C1.Win.C1Editor.ToolStrips.CommandButton)" /> to add a button of <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripButton" /> type.
             
             Use <see cref="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripBase.AddComboBox(C1.Win.C1Editor.ToolStrips.CommandComboBox)" /> to add a combo box of <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox" /> type.
             </remarks>
      <example>
             The following code example demonstrates how to create and use a custom toolstrip that has Style combo box and Undo, Redo buttons. 
             <code>
            
             public class MyToolStrip : C1EditorToolStripBase
             {
                protected override void OnInitialize()
                {
                 AddComboBox(CommandComboBox.Style);
                 AddButton(CommandButton.Undo);
                 AddButton(CommandButton.Redo);
                }
             }
             
             private void Form1_Load(object sender, EventArgs e)
             {
                  MyToolStrip myToolStrip = new MyToolStrip();
                  myToolStrip.Editor = c1Editor1;
                  this.Controls.Add(myToolStrip);
             }
             </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripBase.#ctor">
      <summary>
            Creates an instance of C1EditorToolStripBase class.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.ToolStrips.C1EditorToolStripBase.Editor">
      <summary>
            Gets or sets the <see cref="T:C1.Win.C1Editor.C1Editor" /> control.
            </summary>
      <remarks>
            Set this property to a value to link a descendant of C1EditorToolStripBase type with the <see cref="T:C1.Win.C1Editor.C1Editor" /> control.
            </remarks>
      <example>
            The following code example demonstrates how to use Editor property to link a <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripStyle" /> to a <see cref="T:C1.Win.C1Editor.C1Editor" />.
            <code>
            private void Form1_Load(object sender, EventArgs e)
            {
                 C1EditorToolStripStyle toolStrip = new C1EditorToolStripStyle();
                 toolStrip.Editor = c1Editor1;
                 this.Controls.Add(toolStrip);
            }        
            </code></example>
    </member>
    <member name="P:C1.Win.C1Editor.ToolStrips.C1EditorToolStripBase.Items">
      <summary>
            Overrides ToolStrip.Items.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripBase.OnInitialize">
      <summary>
            Adds default items to the toolstrip.
            </summary>
      <remarks>
            The OnInitialize method allows derived classes to define their own set of default items. 
            </remarks>
      <example>
            The following code example demonstrates how to create a custom toolstrip that has Style combo box and Undo, Redo buttons. 
            <code>
            public class MyToolStrip : C1EditorToolStripBase
            {
               protected override void OnInitialize()
               {
                AddComboBox(CommandComboBox.Style);
                AddButton(CommandButton.Undo);
                AddButton(CommandButton.Redo);
               }
            }
            </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripBase.AddButton(C1.Win.C1Editor.ToolStrips.CommandButton)">
      <summary>
            Adds a button to the toolstrip.
            </summary>
      <param name="command">The command assigned to the button.</param>
      <returns>The new button.</returns>
      <remarks>
            The AddButton method allows inheritors to add a button of the <see sref="C1EditorToolStripButton" /> class to the toolstrip. 
            </remarks>
      <example>
            The following code example demonstrates how to create a custom toolstrip that has Style combo box and Undo, Redo buttons. 
            <code>
            public class MyToolStrip : C1EditorToolStripBase
            {
               protected override void OnInitialize()
               {
                AddComboBox(CommandComboBox.Style);
                AddButton(CommandButton.Undo);
                AddButton(CommandButton.Redo);
               }
            }
            </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripBase.AddComboBox(C1.Win.C1Editor.ToolStrips.CommandComboBox)">
      <summary>
            Adds a combo box to the toolstrip.
            </summary>
      <param name="command">The command assigned to the button.</param>
      <returns>The new combo box.</returns>
      <remarks>
            The AddComboBox method allows inheritors to add a button of the <see sref="C1EditorToolStripComboBox" /> class to the toolstrip. 
            </remarks>
      <example>
            The following code example demonstrates how to create a custom toolstrip that has Style combo box and Undo, Redo buttons. 
            <code>
            public class MyToolStrip : C1EditorToolStripBase
            {
               protected override void OnInitialize()
               {
                AddComboBox(CommandComboBox.Style);
                AddButton(CommandButton.Undo);
                AddButton(CommandButton.Redo);
               }
            }
            </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripBase.AddColorPicker(C1.Win.C1Editor.ToolStrips.CommandColorPicker)">
      <summary>
            Adds a color picker to the toolstrip.
            </summary>
      <param name="command">The command assigned to the color picker.</param>
      <returns>The new combo box.</returns>
      <remarks>
            The AddColorPicker method allows inheritors to add a control of the <see sref="C1EditorToolStripColorPicker" /> class to the toolstrip. 
            </remarks>
      <example>
            The following code example demonstrates how to create a custom toolstrip that has Background color button. 
            <code>
            public class MyToolStrip : C1EditorToolStripBase
            {
               protected override void OnInitialize()
               {
                AddColorPicker(CommandColorPicker.BackColor);
               }
            }
            </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripBase.AddSplitButton(C1.Win.C1Editor.ToolStrips.CommandSplitButton)">
      <summary>
            Adds a split button to the toolstrip.
            </summary>
      <param name="command">The command assigned to the split button.</param>
      <returns>The new split button.</returns>
      <remarks>
            The AddSplitButton method allows inheritors to add a split button of the <see sref="C1EditorToolStripSplitButton" /> class to the toolstrip. 
            </remarks>
      <example>
            The following code example demonstrates how to create a custom toolstrip that has Border split button. 
            <code>
            public class MyToolStrip : C1EditorToolStripBase
            {
               protected override void OnInitialize()
               {
                AddSplitButton(CommandSplitButton.Border);
               }
            }
            </code></example>
    </member>
    <member name="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripButton">
      <summary>
            Represents a toolstrip button which performs a command in a linked <see cref="T:C1.Win.C1Editor.C1Editor" /> control.
            </summary>
      <remarks>
            Use this class to add a <see cref="T:C1.Win.C1Editor.C1Editor" />-related button to a ToolStrip.
            </remarks>
      <example>
            The following code example demonstrates how to create a <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripButton" /> and add it to a <see cref="T:System.Windows.Forms.ToolStrip" />. 
            <code>
              C1EditorToolStripButton button = new C1EditorToolStripButton();
              button.Command = CommandButton.ClearFormatting;
              button.Editor = c1Editor1;
              toolStrip1.Items.Add(button);
            </code></example>
    </member>
    <member name="P:C1.Win.C1Editor.ToolStrips.C1EditorToolStripButton.Command">
      <summary>
            Gets or sets the command.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.ToolStrips.C1EditorToolStripButton.Editor">
      <summary>
            Gets or sets the editor.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripButton.OnCommandChanged">
      <summary>
            Occurs when the command is changed.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripButton.OnEditorChanging">
      <summary>
            Occurs when the editor is changing.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripButton.OnEditorChanged">
      <summary>
            Occurs when the editor is changed.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripButton.OnClick(System.EventArgs)">
      <summary>
            Overrides OnClick.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox">
      <summary>
            Represents a toolstrip combo box which performs a command.
            </summary>
      <remarks>
            Use this class to add a <see cref="T:C1.Win.C1Editor.C1Editor" />-related ComboBox to a ToolStrip.
            </remarks>
      <example>
            The following code example demonstrates how to create a <see cref="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox" /> and add it to a <see cref="T:System.Windows.Forms.ToolStrip" />. 
            <code>
              C1EditorToolStripComboBox comboBox = new C1EditorToolStripComboBox();
              comboBox.Command = CommandComboBox.Style;
              comboBox.Editor = c1Editor1;
              toolStrip1.Items.Add(comboBox);
            </code></example>    [ToolboxItem(false)]
        </member>
    <member name="P:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox.Command">
      <summary>
            The command.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox.Editor">
      <summary>
            The editor.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox.Items">
      <summary>
            Gets a collection of the items contained in this System.Windows.Forms.ToolStripComboBox.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox.Text">
      <summary>
            Gets or sets the text to be displayed on the hosted control.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox.OnCommandChanged">
      <summary>
             Occurs when command is changed.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox.OnEditorChanging">
      <summary>
            Occurs when the editor is changing.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox.OnEditorChanged">
      <summary>
            Occurs when the editor is changed.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox.OnLostFocus(System.EventArgs)">
      <summary>
            Overrides OnLostFocus.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox.OnSelectedIndexChanged(System.EventArgs)">
      <summary>
            Overrides OnSelectedIndexChanged.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripComboBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
      <summary>
            Overrides OnKeyDown.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripMain">
      <summary>
            Provides toolstrip with common editor commands like file, clipboards, history etc.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripMain.OnInitialize">
      <summary>
            Adds buttons to the ToolStrip.
            </summary>
      <remarks>
            You don't need to use this method.
            </remarks>
    </member>
    <member name="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripObjects">
      <summary>
            Represents a toolstrip of new object commands.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripObjects.OnInitialize">
      <summary>
            Adds buttons to the ToolStrip.
            </summary>
      <remarks>
            You don't need to use this method.
            </remarks>
    </member>
    <member name="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripReview">
      <summary>
            Represents a toolstrip with review commands.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripReview.OnInitialize">
      <summary>
            Adds buttons to the ToolStrip.
            </summary>
      <remarks>
            You don't need to use this method.
            </remarks>
    </member>
    <member name="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripStyle">
      <summary>
            Represents a text style toolstrip.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripStyle.OnInitialize">
      <summary>
            Adds buttons to the ToolStrip.
            </summary>
      <remarks>
            You don't need to use this method.
            </remarks>
    </member>
    <member name="T:C1.Win.C1Editor.ToolStrips.C1EditorToolStripTable">
      <summary>
            Represents a toolstrip with commands to create and manage tables.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.ToolStrips.C1EditorToolStripTable.OnInitialize">
      <summary>
            Adds buttons to the ToolStrip.
            </summary>
      <remarks>
            You don't need to use this method.
            </remarks>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.IBookmarkItemDialog">
      <summary>
        <b>IBookmarkItemDialog</b> interface allows to customize the dialog used to insert or edit a bookmark.
            </summary>
      <remarks>
            Implement this interface by a windows dialog form and use it in  <see cref="P:C1.Win.C1Editor.C1Editor.CustomDialogs" /> property.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.IBookmarkItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem)">
      <summary>
            Assigns values to the dialog box fields.
            </summary>
      <param name="item">The object being edited.</param>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.IBookmarkItemDialog.Show(System.Windows.Forms.IWin32Window)">
      <summary>
            Shows the dialog window.
            </summary>
      <returns>
        <b>True</b> if the user selected <b>OK</b> to finish editing and close the dialog; otherwise <b>False</b></returns>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.IHyperlinkItemDialog">
      <summary>
        <b>IHyperlinkItemDialog</b> interface allows to customize the dialog used to insert or edit a hyperlink.
            </summary>
      <remarks>
            Implement this interface by a windows dialog form and use it in  <see cref="P:C1.Win.C1Editor.C1Editor.CustomDialogs" /> property.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.IHyperlinkItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem)">
      <summary>
            Assigns values to the dialog box fields.
            </summary>
      <param name="item">The object being edited.</param>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.IHyperlinkItemDialog.Show(System.Windows.Forms.IWin32Window)">
      <summary>
            Shows the dialog window.
            </summary>
      <returns>
        <b>True</b> if the user selected <b>OK</b> to finish editing and close the dialog; otherwise <b>False</b></returns>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.ICellItemDialog">
      <summary>
        <b>ICellItemDialog</b> interface allows to customize the dialog used to insert or edit a table cell.
            </summary>
      <remarks>
            Implement this interface by a windows dialog form and use it in  <see cref="P:C1.Win.C1Editor.C1Editor.CustomDialogs" /> property.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.ICellItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLCellItem)">
      <summary>
            Assigns values to the dialog box fields.
            </summary>
      <param name="item">The object being edited.</param>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.ICellItemDialog.Show(System.Windows.Forms.IWin32Window)">
      <summary>
            Shows the dialog window.
            </summary>
      <returns>
        <b>True</b> if the user selected <b>OK</b> to finish editing and close the dialog; otherwise <b>False</b></returns>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.IColumnItemDialog">
      <summary>
        <b>IColumnItemDialog</b> interface allows to customize the dialog used to insert or edit a table column.
            </summary>
      <remarks>
            Implement this interface by a windows dialog form and use it in  <see cref="P:C1.Win.C1Editor.C1Editor.CustomDialogs" /> property.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.IColumnItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLColumnItem)">
      <summary>
            Assigns values to the dialog box fields.
            </summary>
      <param name="item">The object being edited.</param>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.IColumnItemDialog.Show(System.Windows.Forms.IWin32Window)">
      <summary>
            Shows the dialog window.
            </summary>
      <returns>
        <b>True</b> if the user selected <b>OK</b> to finish editing and close the dialog; otherwise <b>False</b></returns>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.IImageItemDialog">
      <summary>
        <b>IImageItemDialog</b> interface allows to customize the dialog used to insert or edit an image.
            </summary>
      <remarks>
            Implement this interface by a windows dialog form and use it in  <see cref="P:C1.Win.C1Editor.C1Editor.CustomDialogs" /> property.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.IImageItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLImageItem)">
      <summary>
            Assigns values to the dialog box fields.
            </summary>
      <param name="item">The object being edited.</param>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.IImageItemDialog.Show(System.Windows.Forms.IWin32Window)">
      <summary>
            Shows the dialog window.
            </summary>
      <returns>
        <b>True</b> if the user selected <b>OK</b> to finish editing and close the dialog; otherwise <b>False</b></returns>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.IFlashMovieItemDialog">
      <summary>
        <b>IFlashMovieItemDialog</b> interface allows to customize the dialog used to insert or edit a Flash movie object.
            </summary>
      <remarks>
            Implement this interface by a windows dialog form and use it in  <see cref="P:C1.Win.C1Editor.C1Editor.CustomDialogs" /> property.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.IFlashMovieItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem)">
      <summary>
            Assigns values to the dialog box fields.
            </summary>
      <param name="item">The object being edited.</param>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.IFlashMovieItemDialog.Show(System.Windows.Forms.IWin32Window)">
      <summary>
            Shows the dialog window.
            </summary>
      <returns>
        <b>True</b> if the user selected <b>OK</b> to finish editing and close the dialog; otherwise <b>False</b></returns>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.IRowItemDialog">
      <summary>
        <b>IRowItemDialog</b> interface allows to customize the dialog used to insert or edit a table row.
            </summary>
      <remarks>
            Implement this interface by a windows dialog form and use it in  <see cref="P:C1.Win.C1Editor.C1Editor.CustomDialogs" /> property.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.IRowItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLRowItem)">
      <summary>
            Assigns values to the dialog box fields.
            </summary>
      <param name="item">The object being edited.</param>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.IRowItemDialog.Show(System.Windows.Forms.IWin32Window)">
      <summary>
            Shows the dialog window.
            </summary>
      <returns>
        <b>True</b> if the user selected <b>OK</b> to finish editing and close the dialog; otherwise <b>False</b></returns>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.ITableItemDialog">
      <summary>
        <b>ITableItemDialog</b> interface allows to customize the dialog used to insert or edit a table.
            </summary>
      <remarks>
            Implement this interface by a windows dialog form and use it in  <see cref="P:C1.Win.C1Editor.C1Editor.CustomDialogs" /> property.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.ITableItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLTableItem)">
      <summary>
            Assigns values to the dialog box fields.
            </summary>
      <param name="item">The object being edited.</param>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.ITableItemDialog.Show(System.Windows.Forms.IWin32Window)">
      <summary>
            Shows the dialog window.
            </summary>
      <returns>
        <b>True</b> if the user selected <b>OK</b> to finish editing and close the dialog; otherwise <b>False</b></returns>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.IFindReplaceDialog">
      <summary>
        <b>IFindReplaceDialog</b> interface allows to customize the Find/Replace dialog.
            </summary>
      <remarks>
            Implement this interface by a windows dialog form and use it in <see cref="P:C1.Win.C1Editor.C1Editor.CustomDialogs" /> property.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.IFindReplaceDialog.BindData(C1.Win.C1Editor.UICustomization.FindReplaceSupport)">
      <summary>
            Sets values related to the search/replace conditions to the dialog fields. 
            </summary>
      <param name="support">The object to set search values to the dialog fields.</param>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.IFindReplaceDialog.Show(System.Windows.Forms.IWin32Window,System.Boolean)">
      <summary>
            Shows the dialog window.
            </summary>
      <param name="owner">Any object that implements <see cref="T:System.Windows.Forms.IWin32Window" /> that represents the top-level window that will own the modal dialog box.</param>
      <param name="startWithFindDialog">
        <b>True</b> if the dialog starts in find mode; <b>False</b> if the dialog starts in replace mode.</param>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.IFormattingDialog">
      <summary>
        <b>IFormattingDialog</b> interface allows to customize the Format dialog.
            </summary>
      <remarks>
            Implement this interface by a windows dialog form and use it in <see cref="P:C1.Win.C1Editor.C1Editor.CustomDialogs" /> property.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.IFormattingDialog.BindData(C1.Win.C1Editor.UICustomization.FormattingSupport)">
      <summary>
            Sets values related to the text format options to the dialog fields. 
            </summary>
      <param name="support">The object providing data for the dialog.</param>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.IFormattingDialog.Show(System.Windows.Forms.IWin32Window)">
      <summary>
            Shows the dialog window.
            </summary>
      <param name="owner">Any object that implements <see cref="T:System.Windows.Forms.IWin32Window" /> that represents the top-level window that will own the modal dialog box.</param>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.IMessageBox">
      <summary>
        <b>IMessageBox</b> interface allows to customize the standard MessageBox.Show dialog.
            </summary>
      <remarks>
            Implement this interface by a windows dialog form and use it in <see cref="P:C1.Win.C1Editor.C1Editor.CustomDialogs" /> property.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.IMessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
      <summary>
            Shows the dialog window.
            </summary>
      <param name="owner">Any object that implements <see cref="T:System.Windows.Forms.IWin32Window" /> that represents the top-level window that will own the modal dialog box.</param>
      <param name="text">The text to display in the message box.</param>
      <param name="caption">The text to display in the title bar of the message box.</param>
      <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons" /> values that specifies which buttons to display in the message box.</param>
      <param name="icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon" /> values that specifies which icon to display in the message box. </param>
      <returns>One of the <see cref="T:System.Windows.Forms.DialogResult" /> values.</returns>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.CustomDialogs">
      <summary>
            Represents a set of interfaces to support user-defined dialogs.
            </summary>
      <remarks>
            To use your own dialog, implement the required interface and set the corresponding property of 
            <see cref="P:C1.Win.C1Editor.C1Editor.CustomDialogs" />.
            </remarks>
      <remarks>
        <para>
            The <see cref="T:C1.Win.C1Editor.C1Editor" /> contains several dialogs used to perform
            actions such as search/replace, inserting images, tables, and so on.
            </para>
        <para>To replace one or more of the built-in dialogs with your own custom ones,
            follow these steps:</para>
        <para>1. Implement the custom dialog making sure it supports the appropriate
            interface (for example <see cref="T:C1.Win.C1Editor.UICustomization.IFindReplaceDialog" />).</para>
        <para>2. Assign an instance of the custom dialog to the appropriate member of
            the <see cref="P:C1.Win.C1Editor.C1Editor.CustomDialogs" /> property.</para>
      </remarks>
      <example>
            The code below replaces the built-in bookmark and find/replace dialogs with
            customized versions of the dialogs.
            <code>
            private void InitCustomDialogs()
            {
              _editor.CustomDialogs.BookmarkDialog = new BookmarkEditorForm();
              _editor.CustomDialogs.FindReplaceDialog = new FindReplaceForm();
            }
            </code></example>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.CustomDialogs.BookmarkDialog">
      <summary>
            User-defined Edit or insert bookmark dialog.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.CustomDialogs.HyperlinkDialog">
      <summary>
            User-defined Edit or insert hyperlink dialog.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.CustomDialogs.ImageDialog">
      <summary>
            User-defined Edit or insert image dialog.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.CustomDialogs.FlashMovieDialog">
      <summary>
            User-defined Edit or insert Flash movie dialog.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.CustomDialogs.TableRowDialog">
      <summary>
            User-defined Edit or insert table row dialog.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.CustomDialogs.TableDialog">
      <summary>
            User-defined Edit or insert table dialog.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.CustomDialogs.TableCellDialog">
      <summary>
            User-defined Edit or insert table cell dialog.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.CustomDialogs.TableColumnDialog">
      <summary>
            User-defined Edit or insert table column dialog.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.CustomDialogs.FindReplaceDialog">
      <summary>
            User-defined Find/Replace Dialog.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.CustomDialogs.FormattingDialog">
      <summary>
            User-defined Text Format dialog.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.UICustomization.CustomDialogs.MessageBox">
      <summary>
            User-defined Message dialog.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.CustomDialogs.Dispose">
      <summary>
            Disposes unmanaged resources
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.FindReplaceSupport">
      <summary>
            Helper class for customizing the Find/Replace dialog.
            </summary>
      <remarks>Implementing the <see cref="T:C1.Win.C1Editor.UICustomization.IFindReplaceDialog" /> interface, 
            you receive an object of the <b>FindReplaceSupport</b> class in the <see cref="M:C1.Win.C1Editor.UICustomization.IFindReplaceDialog.BindData(C1.Win.C1Editor.UICustomization.FindReplaceSupport)" /> method.
            Using properties and methods of this object you cam get data for and support UI in your dialog.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FindReplaceSupport.SearchUp">
      <summary>
            Gets or sets search direction.
            </summary>
      <remarks>
            If <b>True</b>, searches above the current item. 
            </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FindReplaceSupport.MatchWholeWord">
      <summary>
            True if the find operation locates only entire words and not text that's part of a larger word. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FindReplaceSupport.MatchCase">
      <summary>
            True if the find operation is case sensitive; otherwise, False.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FindReplaceSupport.SearchPattern">
      <summary>
            Gets or sets search pattern.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FindReplaceSupport.ReplacePattern">
      <summary>
            Gets or sets replace pattern.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.FindReplaceSupport.FindNext">
      <summary>
            Finds the next search pattern.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.FindReplaceSupport.Replace">
      <summary>
            Replaces current occurrence of a search pattern with replace pattern.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.FindReplaceSupport.ReplaceAll">
      <summary>
            Replaces all occurrences of a specified search pattern with the specified replace pattern.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.FormattingSupport">
      <summary>
            Supports local formatting
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Bold">
      <summary>
            True if the text is formatted as bold; otherwise, False. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Italic">
      <summary>
            True if the text is formatted as italic; otherwise, False. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Underline">
      <summary>
            True if the text is underlined; otherwise, False. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Overline">
      <summary>
            True if the text is overlined; otherwise, False. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Strikeout">
      <summary>
            True if the text is stricken through; otherwise, False. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Hidden">
      <summary>
            True if this text is hidden; otherwise, False.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.FontName">
      <summary>
            Gets or sets the font name used in the text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.FontSize">
      <summary>
            Gets or sets a string value that indicates the font size used in the text.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.ForeColor">
      <summary>
            Gets or sets the foreground color of the text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.LetterSpacing">
      <summary>
            Gets or sets the letter spacing of the text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.TextTransform">
      <summary>
            Gets or sets the text transform of the text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BackgroundColor">
      <summary>
            Gets or sets the background color of the text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BackgroundImage">
      <summary>
            Gets or sets the background image of the text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BackgroundPositionX">
      <summary>
            Gets or sets the the x-coordinate of the background position of the text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BackgroundPositionY">
      <summary>
            Gets or sets the the y-coordinate of the background position of the text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BackgroundRepeat">
      <summary>
            Gets or sets how the background picture is repeated. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderStyle">
      <summary>
            Gets or sets the border style of text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderTopStyle">
      <summary>
            Gets or sets the top border style of text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderRightStyle">
      <summary>
            Gets or sets the right border style of text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderBottomStyle">
      <summary>
            Gets or sets the bottom border style of text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderLeftStyle">
      <summary>
            Gets or sets the left border style of text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderWidth">
      <summary>
            Gets or sets the border width of text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderTopWidth">
      <summary>
            Gets or sets the top border width of text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderRightWidth">
      <summary>
            Gets or sets the right border width of text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderBottomWidth">
      <summary>
            Gets or sets the bottom border width of text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderLeftWidth">
      <summary>
            Gets or sets the left border width of text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderColor">
      <summary>
            Gets or sets the border color of text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderTopColor">
      <summary>
            Gets or sets the top border color of text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderRightColor">
      <summary>
            Gets or sets the right border color of text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderBottomColor">
      <summary>
            Gets or sets the bottom border color of text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.BorderLeftColor">
      <summary>
            Gets or sets the left border color of text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Padding">
      <summary>
            Gets or sets the padding of text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.PaddingTop">
      <summary>
            Gets or sets the top padding of text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.PaddingRight">
      <summary>
            Gets or sets the right padding of text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.PaddingBottom">
      <summary>
            Gets or sets the bottom padding of text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.PaddingLeft">
      <summary>
            Gets or sets the left padding of text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Margin">
      <summary>
            Gets or sets the margin of text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.MarginTop">
      <summary>
            Gets or sets the top margin of text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.MarginRight">
      <summary>
            Gets or sets the right margin of text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.MarginBottom">
      <summary>
            Gets or sets the bottom margin of text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.MarginLeft">
      <summary>
            Gets or sets the left margin of text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.TextAlign">
      <summary>
            Gets or sets the text align. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.WordSpacing">
      <summary>
            Gets or sets the word spacing of paragraph.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.LineHeight">
      <summary>
            Gets or sets the line height of paragraph. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.TextIndent">
      <summary>
            Gets or sets the text indent of paragraph. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Position">
      <summary>
            Gets or sets the text position. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.ZIndex">
      <summary>
            Gets or sets x-index of the text. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Width">
      <summary>
            Gets or sets the text width. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Height">
      <summary>
            Gets or sets the text height. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Top">
      <summary>
            Gets or sets the text top position. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Right">
      <summary>
            Gets or sets the text right position. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Bottom">
      <summary>
            Gets or sets the text bottom position. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.FormattingSupport.Left">
      <summary>
            Gets or sets the text left position. 
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.FormattingSupport.ApplyChanges">
      <summary>
            Applies changes made to the text in the dialog.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.Bookmark">
      <summary>
            Provides information about a bookmark within the document.
            </summary>
      <remarks>
        <para><![CDATA[
            A bookmark in XHTML is a <a> tag with a name but without an href attribute.
            ]]></para>
        <para>To enumerate all bookmarks in the document use the <see cref="P:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem.Bookmarks" /> property.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.Bookmark.Name">
      <summary>
            The bookmark name.
            </summary>
      <remarks>
            The following bookmark's name is "bm1":
            <![CDATA[
            <a name="bm1"/>
            ]]></remarks>
      <example>
            The code below loads all bookmarks in a tree using bookmark name.
            <code>
                private void LoadBookmarks(XHTMLBookmarkItem item)
                {
                    _tree.Nodes.Clear();
                    foreach (Bookmark bookmark in item.Bookmarks)
                    {
                        TreeNode node = _tree.Nodes.Add(bookmark.Name);
                        node.Tag = bookmark;
                    }
                 }
            </code></example>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.Bookmark.IsRemoved">
      <summary>
            Returns true if the bookmark is removed during editing in a custom dialog.
            </summary>
      <remarks>
            Use this property to determine if the bookmark has been removed to update your custom dialog's UI.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.Bookmark.IsSelected">
      <summary>
            Returns true if the bookmark is inside current selection.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.Bookmark.Select">
      <summary>
            Moves selection to the specified bookmark.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.Bookmark.Remove">
      <summary>
            Removes the bookmark.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.Bookmarks">
      <summary>
            Represents a collection of bookmarks.
            </summary>
      <remarks>
            Use the <see cref="P:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem.Bookmarks" /> property to get a list of all bookmarks in the document.
            </remarks>
      <example>
            The code below loads all bookmarks in a tree.
            <code>
                private void LoadBookmarks(XHTMLBookmarkItem item)
                {
                    _tree.Nodes.Clear();
                    foreach (Bookmark bookmark in item.Bookmarks)
                    {
                        TreeNode node = _tree.Nodes.Add(bookmark.Name);
                        node.Tag = bookmark;
                    }
                 }
            </code></example>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.Bookmarks.Count">
      <summary>
            Gets the number of bookmarks in the collection.
            </summary>
      <example>
            The code below checks if any bookmark has been deleted during editing in a custom bookmark dialog.
            <code>
            
                    private bool HaveDeletedBookmarks(XHTMLBookmarkItem item)
                    {
                        for (int i =item.Bookmarks.Count - 1; i &gt;= 0; i--)
                        if (item.Bookmarks[i].IsRemoved)
                            return true;
                        return false;
                     }
            </code></example>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.Bookmarks.Item(System.Int32)">
      <summary>
            Gets the bookmark at the specified index.
            </summary>
      <param name="index">The zero-based index of the bookmark to get.</param>
      <returns>The bookmark at the specified index.</returns>
      <example>
            The code below checks if any bookmark has been deleted during editing in a custom bookmark dialog.
            <code>
            
                    private bool HaveDeletedBookmarks(XHTMLBookmarkItem item)
                    {
                        for (int i =item.Bookmarks.Count - 1; i &gt;= 0; i--)
                        if (item.Bookmarks[i].IsRemoved)
                            return true;
                        return false;
                     }
            </code></example>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem">
      <summary>
             Provides data to bind to and use in a custom Hyperlink edit dialog.
             </summary>
      <remarks>
        <para>Implementing a custom Hyperlink dialog, you will receive an instance of the XHTMLHyperlinkItem class in the <see cref="M:C1.Win.C1Editor.UICustomization.IHyperlinkItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem)" /> method. 
             Use it to bind the data to the dialog's UI.</para>
      </remarks>
      <example>
             The code below binds data in the <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem" /> item to GUI controls of a custom dialog form.
             <code>
                    void IHyperlinkItemDialog.BindData(XHTMLHyperlinkItem item)
                    {
                        if (!string.IsNullOrEmpty(item.AccessKey) &amp;&amp; item.AccessKey.Length &gt; 1)
                            item.AccessKey = item.AccessKey.Substring(0, 1);
            
                        _tbText.DataBindings.Add("Text", item, "Text");
                        _tbLink.DataBindings.Add("Text", item, "Href");
                        _tbTitle.DataBindings.Add("Text", item, "Title");
                        _tbAccessKey.DataBindings.Add("Text", item, "AccessKey");
                        _tbTabIndex.DataBindings.Add("Value", item, "TabIndex");
                        _cmbTarget.DataBindings.Add("Text", item, "Target");
            
                        _tbText.Enabled = item.IsEmpty;
                        _tbText_TextChanged(this, EventArgs.Empty);
                    }
             </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem.StateEqual(C1.Win.C1Editor.UICustomization.XHTMLItemBase)">
      <summary>
            Returns true if specified item is equal to the anchor.
            </summary>
      <param name="item">
        <b>XHTMLHyperlinkItem</b> object to compare with the current <b>XHTMLHyperlinkItem</b> object.</param>
      <returns>
        <b>true</b> if <paramref name="item" /> is equal to the current <b>XHTMLHyperlinkItem</b> object.
            <b>false</b> if <paramref name="item" /> is not equal to the current <b>XHTMLHyperlinkItem</b> object.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem.ParseSourceNode">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem.BuildXml">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem.GetNodeTemplate">
      <summary>
            For internal use.
            </summary>
      <returns>xml node.</returns>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem.Text">
      <summary>
            Gets or sets hyperlink text. 
            If the hyperlink is created/edited on a non-empty selection, this setting is ignored.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem.Href">
      <summary>
            Gets or sets the destination of the bookmark.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem.Title">
      <summary>
            Gets or sets extra information about the element.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem.AccessKey">
      <summary>
            Specifies a keyboard shortcut to access the element.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem.TabIndex">
      <summary>
            Specifies the tab order of the element.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem.Target">
      <summary>
            Specifies where to open the linked document.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem.IsEmpty">
      <summary>
            Returns a Boolean value indicating whether the link does not have inner text.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.InvalidBookmarkNameException">
      <summary>
            The exception that is raised when a bookmark name is invalid.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.ExistingBookmarkException">
      <summary>
            The exception that is raised when a bookmark name is not unique within the document.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem">
      <summary>
             Provides bookmark data to use in custom edit dialogs.
             </summary>
      <remarks>
        <para>Implementing a custom Bookmark dialog, you will receive an instance of the XHTMLBookmarkItem class in the <see cref="M:C1.Win.C1Editor.UICustomization.IBookmarkItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem)" /> method. 
             Use it to bind the data to the dialog's UI.</para>
      </remarks>
      <example>
             The code below binds data in the <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem" /> item to GUI controls of a custom dialog form.
             <code>
                    void IBookmarkItemDialog.BindData(XHTMLBookmarkItem item)
                    {
                        _tbName.DataBindings.Add("Text", item, "Name");
                        LoadBookmarks(item);
                        ButtonOKEnabledChanged(this, EventArgs.Empty);
                    }
            
                    private void LoadBookmarks(XHTMLBookmarkItem item)
                    {
                        _tree.Nodes.Clear();
                        foreach (Bookmark bookmark in item.Bookmarks)
                        {
                            TreeNode node = _tree.Nodes.Add(bookmark.Name);
                            node.Tag = bookmark;
                        }
                        UpdateToolbarState();
                    }
             </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem.StateEqual(C1.Win.C1Editor.UICustomization.XHTMLItemBase)">
      <summary>
            Returns true if specified item is equal to the anchor.
            </summary>
      <param name="item">
        <b>XHTMLBookmarkItem</b> object to compare with the current <b>XHTMLBookmarkItem</b> object.</param>
      <returns>
        <b>true</b> if <paramref name="item" /> is equal to the current <b>XHTMLBookmarkItem</b> object.
            <b>false</b> if <paramref name="item" /> is not equal to the current <b>XHTMLBookmarkItem</b> object.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem.ParseSourceNode">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem.BuildXml">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem.GetNodeTemplate">
      <summary>
            For internal use.
            </summary>
      <returns>xml node.</returns>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem.Text">
      <summary>
            Gets bookmark text.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem.Name">
      <summary>
            Specifies the name of the bookmark.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem.Bookmarks">
      <summary>
            List of all bookmarks of the document.
            </summary>
      <remarks>
            Use the <see cref="P:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem.Bookmarks" /> property to get a list of all bookmarks in the document.
            </remarks>
      <example>
            The code below loads all bookmarks in a tree.
            <code>
                private void LoadBookmarks()
                {
                    _tree.Nodes.Clear();
                    foreach (Bookmark bookmark in Item.Bookmarks)
                    {
                        TreeNode node = _tree.Nodes.Add(bookmark.Name);
                        node.Tag = bookmark;
                    }
                 }
            </code></example>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem.IsEmpty">
      <summary>
            Returns a Boolean value indicating whether the link does not have inner text.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem.CheckCurrentBookmark">
      <summary>
            Checks current bookmark for name validity and uniqueness.
            </summary>
      <exception cref="T:C1.Win.C1Editor.UICustomization.InvalidBookmarkNameException" />
      <exception cref="T:C1.Win.C1Editor.UICustomization.ExistingBookmarkException" />
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem.ApplyChanges">
      <summary>
            Applies changes made in a custom Bookmarks dialog.
            </summary>
      <exception cref="T:C1.Win.C1Editor.UICustomization.InvalidBookmarkNameException" />
      <exception cref="T:C1.Win.C1Editor.UICustomization.ExistingBookmarkException" />
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.HorizontalAlignment">
      <summary>
            Specifies how an object or text is horizontally aligned.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.UICustomization.HorizontalAlignment.Default">
      <summary>
            The alignment is not specified.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.UICustomization.HorizontalAlignment.Left">
      <summary>
            The object or text is aligned to the left.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.UICustomization.HorizontalAlignment.Center">
      <summary>
            The object or text is aligned the center.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.UICustomization.HorizontalAlignment.Right">
      <summary>
            The object or text is aligned to the right.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.VerticalAlignment">
      <summary>
            Specifies how an object or text is aligned vertically .
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.UICustomization.VerticalAlignment.Default">
      <summary>
            The alignment is not specified.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.UICustomization.VerticalAlignment.Top">
      <summary>
            The object or text is aligned to the top.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.UICustomization.VerticalAlignment.Middle">
      <summary>
            The object or text is aligned to the center.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.UICustomization.VerticalAlignment.Bottom">
      <summary>
            The object or text is aligned to the bottom.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.SizeType">
      <summary>
            Specifies the units for measuring size.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.UICustomization.SizeType.Pixel">
      <summary>
            Specifies device pixels as the unit for measuring size.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.UICustomization.SizeType.Percent">
      <summary>
            Specifies percentage as the unit for measuring size.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.XHTMLItemBase">
      <summary>
            Base class for classes used to provide data to custom edit dialogs.
            </summary>
      <remarks>
        <para>The derived classes are <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLBookmarkItem" />, <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLHyperlinkItem" />, <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLCellItem" />, <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLColumnItem" />, <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLImageItem" />, <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem" />, <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLTableItem" /></para>
        <para>Implementing a custom dialog, you will receive an instance of a successor of the XHTMLItemBase class in the BindData method.
            Use it to bind the data to the dialog's UI.</para>
      </remarks>
      <example>
            The code below binds data in the <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLImageItem" /> item to GUI controls of a custom dialog form.
            <code>
                    void IImageItemDialog.BindData(XHTMLImageItem item)
                   {
                       _cbxWidthType.SelectedIndex = (int)Item.WidthType;
                       _cbxHeightType.SelectedIndex = (int)Item.HeightType;
                       _tbWidthValue.Value = Math.Max(Item.WidthValue, 1);
                       _tbHeightValue.Value = Math.Max(Item.HeightValue, 1);
                       _tbSource.DataBindings.Add("Text", Item, "Source");
                       _chkWidth.DataBindings.Add("Checked", Item, "UseWidth");
                       _chkHeight.DataBindings.Add("Checked", Item, "UseHeight");
                       _tbAlternate.DataBindings.Add("Text", Item, "Alternate");
                       SetButtonState(this, EventArgs.Empty);
                   }
            </code></example>
    </member>
    <member name="F:C1.Win.C1Editor.UICustomization.XHTMLItemBase._sourceNode">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.UICustomization.XHTMLItemBase._editor">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.RaiseItemPropertiesChanged">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLItemBase.Style">
      <summary>
            Gets or sets item style.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.ApplyChanges">
      <summary>
            Applies changes made in the dialog to the document.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLItemBase.Node">
      <summary>
            Returns an <see cref="T:System.Xml.XmlNode" /> representing the content that is being edited in the dialog.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLItemBase.DocumentName">
      <summary>
            File name of the document.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLItemBase.IsEditMode">
      <summary>
            If True, the dialog is in editing mode; otherwise, the dialog is in creating new object mode.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLItemBase.ApplyButtonVisible">
      <summary>
            If True, the Apply button appears in the dialog.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.StringToHAlign(System.String)">
      <summary>
            Converts a string to a value of <see cref="T:C1.Win.C1Editor.UICustomization.HorizontalAlignment" /> type.
            </summary>
      <param name="value">String value to convert.</param>
      <returns>A value of <see cref="T:C1.Win.C1Editor.UICustomization.HorizontalAlignment" /> type.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.StringToVAlign(System.String)">
      <summary>
            Converts a string to a value of <see cref="T:C1.Win.C1Editor.UICustomization.VerticalAlignment" /> type.
            </summary>
      <param name="value">String value to convert.</param>
      <returns>A value of <see cref="T:C1.Win.C1Editor.UICustomization.VerticalAlignment" /> type.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.GetNodeTemplate">
      <summary>
            For internal use.
            </summary>
      <returns>Xml node.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.SetCustomSelection(C1.Win.C1Editor.C1TextRange)">
      <summary>
            For internal use.
            </summary>
      <param name="range">Range.</param>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.SetDefaults">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.SelectSingleNode(System.String)">
      <summary>
            For internal use.
            </summary>
      <param name="path">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.CreateElement(System.String)">
      <summary>
            For internal use.
            </summary>
      <param name="tag">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.ReadHorAlignAttribute(System.Xml.XmlAttributeCollection,C1.Win.C1Editor.UICustomization.HorizontalAlignment@)">
      <summary>
            For internal use.
            </summary>
      <param name="attrs">
      </param>
      <param name="target">
      </param>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.ReadVertAlignAttribute(System.Xml.XmlAttributeCollection,C1.Win.C1Editor.UICustomization.VerticalAlignment@)">
      <summary>
            For internal use.
            </summary>
      <param name="attrs">
      </param>
      <param name="target">
      </param>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.ReadSizeAttribute(System.Xml.XmlAttributeCollection,System.String,System.Boolean@,C1.Win.C1Editor.UICustomization.SizeType@,System.Int32@)">
      <summary>
            For internal use.
            </summary>
      <param name="attrs">
      </param>
      <param name="attrName">
      </param>
      <param name="useSize">
      </param>
      <param name="sizeType">
      </param>
      <param name="sizeValue">
      </param>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.WriteAttribute(System.String,System.String,System.Boolean)">
      <summary>
            For internal use.
            </summary>
      <param name="attrName">
      </param>
      <param name="attrValue">
      </param>
      <param name="removeDefault">
      </param>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.TryGetLocalPath(System.String)">
      <summary>
            For internal use.
            </summary>
      <param name="src">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.GetAnchorNodeTemplate(System.Collections.Generic.List{System.Xml.XmlNode})">
      <summary>
            For internal use.
            </summary>
      <returns>xml node.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.GetStringValue(C1.Win.C1Editor.UICustomization.HorizontalAlignment)">
      <summary>
            For internal use only.
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.GetStringValue(C1.Win.C1Editor.UICustomization.VerticalAlignment)">
      <summary>
            For internal use only.
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.CheckMinValue(System.Int32@,System.Int32)">
      <summary>
            For internal use only.
            </summary>
      <param name="value">
      </param>
      <param name="minValue">
      </param>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.RunItemDialog(System.Object,System.Boolean)">
      <summary>
            For internal use only.
            </summary>
      <param name="itemDialog">
      </param>
      <param name="isEditItemMode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.RunItemDialog(System.Object,System.Boolean,System.Boolean)">
      <summary>
            For internal use only.
            </summary>
      <param name="itemDialog">
      </param>
      <param name="isEditItemMode">
      </param>
      <param name="applyButtonVisible">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.StateEqual(C1.Win.C1Editor.UICustomization.XHTMLItemBase)">
      <summary>
            For internal use only.
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.ParseSourceNode">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLItemBase.BuildXml">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.XHTMLCellItem">
      <summary>
            Provides data to bind to and use in a custom Table Cell edit dialog.
            </summary>
      <seealso cref="P:C1.Win.C1Editor.UICustomization.CustomDialogs.TableCellDialog" />
      <remarks>
        <para>Implementing a custom Table cell dialog, you will receive an instance of the XHTMLCellItem class in the <see cref="M:C1.Win.C1Editor.UICustomization.ICellItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLCellItem)" /> method. 
            Use it to bind the data to the dialog's UI.</para>
      </remarks>
      <example>
            The code below binds data in the <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLCellItem" /> item to GUI controls of a custom dialog form.
            <code>
                   void ICellItemDialog.BindData(XHTMLCellItem Item)
                   {
                       _cbxVerticalAlignment.SelectedIndex = (int)Item.VerticalAlignment;
                       _cbxHorizontalAlignment.SelectedIndex = (int)Item.HorizontalAlignment;
                       _nudColSpan.DataBindings.Add("Value", Item, "ColSpan");
                       _nudRowSpan.DataBindings.Add("Value", Item, "RowSpan");
                       _chbHeader.DataBindings.Add("Checked", Item, "IsHeader");
                   }
            </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLCellItem.StateEqual(C1.Win.C1Editor.UICustomization.XHTMLItemBase)">
      <summary>
            For internal use only.
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLCellItem.ParseSourceNode">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLCellItem.BuildXml">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLCellItem.VerticalAlignment">
      <summary>
            Specifies vertical alignment of the cell.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLCellItem.HorizontalAlignment">
      <summary>
            Specifies horizontal alignment of the cell.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLCellItem.RowSpan">
      <summary>
            Gets or sets the number of rows in the table that the cell spans.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLCellItem.ColSpan">
      <summary>
            Gets or sets the number of columns in the table that the cell spans.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLCellItem.IsHeader">
      <summary>
            Gets or sets a Boolean value indicating whether the cell belongs to a header.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.XHTMLColumnItem">
      <summary>
            Provides data to bind to and use in a custom Table column edit dialog.
            </summary>
      <seealso cref="P:C1.Win.C1Editor.UICustomization.CustomDialogs.TableColumnDialog" />
      <remarks>
        <para>Implementing a custom Table column dialog, you will receive an instance of the XHTMLColumnItem class in the <see cref="M:C1.Win.C1Editor.UICustomization.IColumnItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLColumnItem)" /> method. 
            Use it to bind the data to the dialog's UI.</para>
      </remarks>
      <example>
            The code below binds data in the <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLColumnItem" /> item to GUI controls of a custom dialog form.
            <code>
                   void IColumnItemDialog.BindData(XHTMLColumnItem item)
                   {
                       _cbxWidthType.SelectedIndex = (int)Item.WidthType;
                       _cbxVerticalAlignment.SelectedIndex = (int)Item.VerticalAlignment;
                       _cbxHorizontalAlignment.SelectedIndex = (int)Item.HorizontalAlignment;
                       _nudSpan.DataBindings.Add("Value", Item, "Span");
                       _tbWidthValue.DataBindings.Add("Value", Item, "WidthValue");
                       _chkWidth.DataBindings.Add("Checked", Item, "UseWidth");
                   }
            </code></example>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLColumnItem.VerticalAlignment">
      <summary>
            Specifies vertical alignment of the table column.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLColumnItem.HorizontalAlignment">
      <summary>
            Specifies horizontal alignment of the table column.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLColumnItem.Span">
      <summary>
            Gets or sets the number of columns in the table that each cell of the column spans.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLColumnItem.WidthType">
      <summary>
            Specifies the units used to measure width.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLColumnItem.WidthValue">
      <summary>
            Gets or sets the integer value of the column's width.
            </summary>
      <seealso cref="P:C1.Win.C1Editor.UICustomization.XHTMLColumnItem.WidthType" />
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLColumnItem.UseWidth">
      <summary>
        <b>True</b>, if column width is specified; otherwise <b>false</b>.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLColumnItem.StateEqual(C1.Win.C1Editor.UICustomization.XHTMLItemBase)">
      <summary>
            For internal use only.
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLColumnItem.ParseSourceNode">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLColumnItem.BuildXml">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.XHTMLImageItem">
      <summary>
            Provides data to bind to and use in a custom Image edit dialog.
            </summary>
      <seealso cref="P:C1.Win.C1Editor.UICustomization.CustomDialogs.ImageDialog" />
      <remarks>
        <para>Implementing a custom Image dialog, you will receive an instance of the 
            XHTMLCellItem class in the <see cref="M:C1.Win.C1Editor.UICustomization.IImageItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLImageItem)" /> method. 
            Use it to bind the data to the dialog's UI.</para>
      </remarks>
      <example>
            The code below binds data in the <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLImageItem" /> item to GUI controls of a custom dialog form.
            <code>
                   void IImageItemDialog.BindData(XHTMLImageItem Item)
                   {
                       _cbxWidthType.SelectedIndex = (int)Item.WidthType;
                       _cbxHeightType.SelectedIndex = (int)Item.HeightType;
                       _tbWidthValue.Value = Math.Max(Item.WidthValue, 1);
                       _tbHeightValue.Value = Math.Max(Item.HeightValue, 1);
                       _tbSource.DataBindings.Add("Text", Item, "Source");
                       _chkWidth.DataBindings.Add("Checked", Item, "UseWidth");
                       _chkHeight.DataBindings.Add("Checked", Item, "UseHeight");
                       _tbAlternate.DataBindings.Add("Text", Item, "Alternate");
                   }
            </code></example>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLImageItem.WidthType">
      <summary>
            Specifies the units used to measure width.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLImageItem.HeightType">
      <summary>
            Specifies the units used to measure height.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLImageItem.WidthValue">
      <summary>
            Gets or sets the integer value of the image width.
            </summary>
      <seealso cref="P:C1.Win.C1Editor.UICustomization.XHTMLImageItem.WidthType" />
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLImageItem.HeightValue">
      <summary>
            Gets or sets the integer value of the image height.
            </summary>
      <seealso cref="P:C1.Win.C1Editor.UICustomization.XHTMLImageItem.HeightType" />
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLImageItem.UseWidth">
      <summary>
        <b>True</b>, if the image width is specified; otherwise <b>false</b>.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLImageItem.UseHeight">
      <summary>
        <b>True</b>, if the image height is specified; otherwise <b>false</b>.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLImageItem.Source">
      <summary>
            Sets or retrieves the URL of the image.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLImageItem.Alternate">
      <summary>
            Sets or retrieves a text alternative to the graphic.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLImageItem.StateEqual(C1.Win.C1Editor.UICustomization.XHTMLItemBase)">
      <summary>
            For internal use only.
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLImageItem.ParseSourceNode">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLImageItem.BuildXml">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLImageItem.SetCustomSelection(C1.Win.C1Editor.C1TextRange)">
      <summary>
            For internal use only.
            </summary>
      <param name="range">
      </param>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLImageItem.GetNodeTemplate">
      <summary>
            For internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem">
      <summary>
            Provides data to bind to and use in a custom Flash movie edit dialog.
            </summary>
      <seealso cref="P:C1.Win.C1Editor.UICustomization.CustomDialogs.FlashMovieDialog" />
      <remarks>
        <para>Implementing a custom Flash movie dialog, you will receive an instance of the XHTMLFlashMovieItem class in the <see cref="M:C1.Win.C1Editor.UICustomization.IFlashMovieItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem)" /> method. 
            Use it to bind the data to the dialog's UI.</para>
      </remarks>
      <example>
            The code below binds data in the <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem" /> item to GUI controls of a custom dialog form.
            <code>
                   void IFlashMovieItemDialog.BindData(XHTMLFlashMovieItem Item)
                   {
                       _cbxWidthType.SelectedIndex = (int)Item.WidthType;
                       _cbxHeightType.SelectedIndex = (int)Item.HeightType;
                       _nudWidthValue.DataBindings.Add("Value", Item, "WidthValue");
                       _nudHeightValue.DataBindings.Add("Value", Item, "HeightValue");
                       _tbData.DataBindings.Add("Text", Item, "Data");
                       _chbAutoplay.DataBindings.Add("Checked", Item, "Autoplay");
                       _chbLoop.DataBindings.Add("Checked", Item, "Loop");
                       _chkWidth.DataBindings.Add("Checked", Item, "UseWidth");
                       _chkHeight.DataBindings.Add("Checked", Item, "UseHeight");
                       _tbTitle.DataBindings.Add("Text", Item, "Title");
                   }
            </code></example>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.WidthType">
      <summary>
            Specifies the units used to measure width.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.HeightType">
      <summary>
            Specifies the units used to measure height.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.WidthValue">
      <summary>
            Gets or sets the integer value of the movie's width.
            </summary>
      <seealso cref="P:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.WidthType" />
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.HeightValue">
      <summary>
            Gets or sets the integer value of the movie's height.
            </summary>
      <seealso cref="P:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.HeightType" />
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.UseWidth">
      <summary>
        <b>True</b>, if width of the movie is specified; otherwise <b>false</b>.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.UseHeight">
      <summary>
        <b>True</b>, if height of the movie is specified; otherwise <b>false</b>.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.Data">
      <summary>
            	Defines a URL that points to the object's data.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.Autoplay">
      <summary>
            Returns or sets a value which determines if the movie will begin to play an .swf file when the .swf file is loaded into the document.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.Loop">
      <summary>
            Returns or sets a value which determines if the movie will play continuously.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.Title">
      <summary>
            Specifies extra information about the element.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.StateEqual(C1.Win.C1Editor.UICustomization.XHTMLItemBase)">
      <summary>
            For internal use only.
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.ParseSourceNode">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.BuildXml">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.GetNodeTemplate">
      <summary>
            For internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLFlashMovieItem.SetCustomSelection(C1.Win.C1Editor.C1TextRange)">
      <summary>
            For internal use only.
            </summary>
      <param name="range">
      </param>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.XHTMLRowItem">
      <summary>
            Provides data to bind to and use in a custom Table Row edit dialog.
            </summary>
      <seealso cref="P:C1.Win.C1Editor.UICustomization.CustomDialogs.TableRowDialog" />
      <remarks>
        <para>Implementing a custom Table row dialog, you will receive an instance of the 
            XHTMLRowItem class in the <see cref="M:C1.Win.C1Editor.UICustomization.IRowItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLRowItem)" /> method. 
            Use it to bind the data to the dialog's UI.</para>
      </remarks>
      <example>
            The code below binds data in the <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLRowItem" /> item to GUI controls of a custom dialog form.
            <code>
                   void IRowItemDialog.BindData(XHTMLRowItem item)
                   {
                       _cbxVerticalAlignment.DataBindings.Add("SelectedIndex", item, "VerticalAlignment");
                       _cbxHorizontalAlignment.DataBindings.Add("SelectedIndex", item, "HorizontalAlignment");
                   }
            </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLRowItem.ParseSourceNode">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLRowItem.BuildXml">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLRowItem.StateEqual(C1.Win.C1Editor.UICustomization.XHTMLItemBase)">
      <summary>
            For internal use only.
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLRowItem.VerticalAlignment">
      <summary>
            Specifies vertical alignment of the table row.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLRowItem.HorizontalAlignment">
      <summary>
            Specifies horizontal alignment of the table row.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.UICustomization.XHTMLTableItem">
      <summary>
            Provides data to bind to and use in a custom Table edit dialog.
            </summary>
      <seealso cref="P:C1.Win.C1Editor.UICustomization.CustomDialogs.TableDialog" />
      <remarks>
        <para>Implementing a custom Table dialog, you will receive an instance of the 
            XHTMLtableItem class in the <see cref="M:C1.Win.C1Editor.UICustomization.ITableItemDialog.BindData(C1.Win.C1Editor.UICustomization.XHTMLTableItem)" /> method. 
            Use it to bind the data to the dialog's UI.</para>
      </remarks>
      <example>
            The code below binds data in the <see cref="T:C1.Win.C1Editor.UICustomization.XHTMLTableItem" /> item to GUI controls of a custom dialog form.
            <code>
            void ITableItemDialog.BindData(XHTMLTableItem item)
            {
                       _cbxWidthType.SelectedIndex = (int)Item.WidthType;
                       _nudRowCount.DataBindings.Add("Value", Item, "RowCount");
                       _nudColumnCount.DataBindings.Add("Value", Item, "ColumnCount");
                       _tbWidthValue.DataBindings.Add("Value", Item, "WidthValue");
                       _nudCellPadding.DataBindings.Add("Value", Item, "CellPadding");
                       _nudCellSpacing.DataBindings.Add("Value", Item, "CellSpacing");
                       _nudBorder.DataBindings.Add("Value", Item, "Border");
                       _chkWidth.DataBindings.Add("Checked", Item, "UseWidth");
                       _tbCaption.DataBindings.Add("Text", Item, "Caption");
                       _tbSummary.DataBindings.Add("Text", Item, "Summary");
            }
            </code></example>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLTableItem.ColumnCountInitial">
      <summary>
            Initial number of columns in the table.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLTableItem.RowCountInitial">
      <summary>
            Initial number of rows in the table.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLTableItem.ColumnCount">
      <summary>
            Gets or sets the number of columns in the table.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLTableItem.RowCount">
      <summary>
            Gets or sets the number of rows in the table.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLTableItem.WidthType">
      <summary>
            Specifies the units used to measure width.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLTableItem.WidthValue">
      <summary>
            Gets or sets the integer value of the table width.
            </summary>
      <seealso cref="P:C1.Win.C1Editor.UICustomization.XHTMLTableItem.WidthType" />
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLTableItem.UseWidth">
      <summary>
        <b>True</b>, if the table width is specified; otherwise <b>false</b>.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLTableItem.CellSpacing">
      <summary>
            Sets or retrieves the amount of space between cells in the table.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLTableItem.CellPadding">
      <summary>
            Sets or retrieves the amount of space between the border of the cell and the content of the cell.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLTableItem.Border">
      <summary>
            Sets or retrieves the width of the border to draw around the table.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLTableItem.Caption">
      <summary>
            Sets or retrieves the caption of the table.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.UICustomization.XHTMLTableItem.Summary">
      <summary>
            Sets or retrieves a description of the table.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLTableItem.SetDefaults">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLTableItem.StateEqual(C1.Win.C1Editor.UICustomization.XHTMLItemBase)">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLTableItem.ParseSourceNode">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLTableItem.BuildXml">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLTableItem.GetNodeTemplate">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLTableItem.SetCustomSelection(C1.Win.C1Editor.C1TextRange)">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.UICustomization.XHTMLTableItem.RaiseItemPropertiesChanged">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.C1TextPointer">
      <summary>
            This class represents a text position within the XmlDocument.
            </summary>
      <remarks>
            Allows the text contents of the document to be programmatically manipulated from your program.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.C1TextPointer.Offset">
      <summary>
            Returns offset (as number of characters) of the text pointer, in relation to the <see cref="P:C1.Win.C1Editor.C1TextPointer.LeftNode" />.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.C1TextPointer.LeftNode">
      <summary>
            Gets the next node to the left.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.C1TextPointer.RightNode">
      <summary>
            Gets the next node to the right.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.C1TextPointer.Node">
      <summary>
            XmlNode which contains the text pointer.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextPointer.MoveTo(C1.Win.C1Editor.C1TextPointer)">
      <summary>
            Moves this <see cref="T:C1.Win.C1Editor.C1TextPointer" /> object to another pointer's location.
            </summary>
      <param name="markupPointer">Pointer to a <see cref="T:C1.Win.C1Editor.C1TextPointer" /> object where the original pointer is moved.</param>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextPointer.Move(C1.Win.C1Editor.MoveUnit,System.Int32)">
      <summary>
            Moves this <see cref="T:C1.Win.C1Editor.C1TextPointer" /> object by 'count' number of units.
            </summary>
      <param name="moveUnitAction">
        <see cref="T:C1Editor.MoveUnitAction">MoveUnitAction</see> enumeration value that specifies the move action to perform.</param>
      <param name="count">Number of units to move the MarkupPointer around.</param>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextPointer.op_Inequality(C1.Win.C1Editor.C1TextPointer,C1.Win.C1Editor.C1TextPointer)">
      <summary>
            The inequality operator (!=) returns False if its operands of <see cref="T:C1.Win.C1Editor.C1TextPointer" /> type are equal; otherwise, it returns True.  
            </summary>
      <param name="markupPointer1">The first text pointer to compare.</param>
      <param name="markupPointer2">The second text pointer to compare.</param>
      <returns>Returns True if two specified objects of <see cref="T:C1.Win.C1Editor.C1TextPointer" /> type are not equal; otherwise, it returns False.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextPointer.op_Equality(C1.Win.C1Editor.C1TextPointer,C1.Win.C1Editor.C1TextPointer)">
      <summary>
            The equality operator (==) compares two <see cref="T:C1.Win.C1Editor.C1TextPointer" /> operands and returns True if the  <see cref="T:C1.Win.C1Editor.C1TextPointer" /> operands are equal; otherwise, it returns False.
            </summary>
      <param name="markupPointer1">The first text pointer to compare.</param>
      <param name="markupPointer2">The second text pointer to compare.</param>
      <returns> Returns True if two <see cref="T:C1.Win.C1Editor.C1TextPointer" /> operands are equal; otherwise, it returns False.</returns>
      <example> The code below compares end position of range1 and start position of range2.
            <code>
               if (range1.End == range2.Start)
                   Console.WriteLine("The ranges are adjacent.");
            </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextPointer.Equals(C1.Win.C1Editor.C1TextPointer)">
      <summary>
            Compares two <see cref="T:C1.Win.C1Editor.C1TextPointer" /> objects for equality. 
            </summary>
      <param name="markupPointer">A <see cref="T:C1.Win.C1Editor.C1TextPointer" /> object to which to compare the current  <see cref="T:C1.Win.C1Editor.C1TextPointer" /> object. </param>
      <returns>True if the objects are equal; otherwise, False.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextPointer.Equals(System.Object)">
      <summary>
            Overrides <see cref="M:System.Object.Equals(System.Object)" /></summary>
      <param name="obj">An object to which to compare the current  <see cref="T:C1.Win.C1Editor.C1TextPointer" /> object. </param>
      <returns>True if the objects are equal; otherwise, False.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextPointer.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextPointer.op_LessThan(C1.Win.C1Editor.C1TextPointer,C1.Win.C1Editor.C1TextPointer)">
      <summary>
            Checks to see whether this text pointer's position is to the left of another text pointer's position.
            </summary>
      <param name="markupPointer1">The first text pointer to compare.</param>
      <param name="markupPointer2">The second text pointer to compare.</param>
      <returns>True if the first pointer is to the left of the second pointer, otherwise false.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextPointer.op_LessThanOrEqual(C1.Win.C1Editor.C1TextPointer,C1.Win.C1Editor.C1TextPointer)">
      <summary>
            Checks to see whether this text pointer's position  is to the left of or is equal to another text pointer's position.
            </summary>
      <param name="markupPointer1">The first text pointer to compare.</param>
      <param name="markupPointer2">The second text pointer to compare.</param>
      <returns>True if the first pointer is to the left of or is equal to the second pointer, otherwise false.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextPointer.op_GreaterThan(C1.Win.C1Editor.C1TextPointer,C1.Win.C1Editor.C1TextPointer)">
      <summary>
            Checks to see whether this text pointer's position is to the right of another text pointer's position.
            </summary>
      <param name="markupPointer1">The first text pointer to compare.</param>
      <param name="markupPointer2">The second text pointer to compare.</param>
      <returns>True if the first pointer is to the right of the second pointer, otherwise false.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextPointer.op_GreaterThanOrEqual(C1.Win.C1Editor.C1TextPointer,C1.Win.C1Editor.C1TextPointer)">
      <summary>
            Checks to see whether this text pointer's position  is to the right of or is equal to another text pointer's position.
            </summary>
      <param name="markupPointer1">The first text pointer to compare.</param>
      <param name="markupPointer2">The second text pointer to compare.</param>
      <returns>True if the first pointer is to the right of or is equal to the second pointer, otherwise false.</returns>
    </member>
    <member name="T:C1.Win.C1Editor.C1TextRange">
      <summary>
            Represents a contiguous area in an XML document.
            </summary>
      <remarks>
            Each <b>C1TextRange</b> object is defined by a starting, <see cref="P:C1.Win.C1Editor.C1TextRange.Start" />, and an ending, <see cref="P:C1.Win.C1Editor.C1TextRange.End" />, character position of the type <see cref="T:C1.Win.C1Editor.C1TextPointer" />. 
            <b>C1TextRange</b> objects are used to identify specific portions of a document.
            <b>C1TextRange</b> objects are independent of the selection. 
            That is, you can define and manipulate a range without changing the selection. You can also define multiple ranges in a document, while there can be only one selection per pane.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Editor.C1TextRange.Start">
      <summary>
            Gets the start pointer of the range.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.C1TextRange.End">
      <summary>
            Gets the end pointer of the range.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.C1TextRange.Text">
      <summary>
            Returns or sets the inner text of the text range.
            </summary>
      <example> This code demonstrates the <see cref="P:C1.Win.C1Editor.C1TextRange.Text" /> and the <see cref="P:C1.Win.C1Editor.C1TextRange.XmlText" /> properties.
            <code><![CDATA[
                    private void button1_Click(object sender, EventArgs e)
                   {
                       c1Editor1.LoadXml("<html><head><title>Document</title></head><body><p>12<span>3</span>456</p></body></html>", new Uri("c:\\"));
                       C1TextRange r = c1Editor1.CreateRange();
                       r.Move(1, 3);
                       Console.WriteLine(r.Text);
                       // Output: 234
                       Console.WriteLine(r.XmlText);
                       // Output: <p xmlns="http://www.w3.org/1999/xhtml">2<span>3</span>4</p>
                       r.XmlText = "<div style=\"border: solid 1px black\">New Text</div>";
                       Console.WriteLine(c1Editor1.Text);
                       //Output:
                       //1
                       //NewText
                       //56
                   }
            ]]></code></example>
    </member>
    <member name="P:C1.Win.C1Editor.C1TextRange.XmlText">
      <summary>
            Returns or sets the XML text of the text range.
            </summary>
      <example> This code demonstrates the <see cref="P:C1.Win.C1Editor.C1TextRange.Text" /> and the <see cref="P:C1.Win.C1Editor.C1TextRange.XmlText" /> properties.
            <code><![CDATA[
                    private void button1_Click(object sender, EventArgs e)
                   {
                       c1Editor1.LoadXml("<html><head><title>Document</title></head><body><p>12<span>3</span>456</p></body></html>", new Uri("c:\\"));
                       C1TextRange r = c1Editor1.CreateRange();
                       r.Move(1, 3);
                       Console.WriteLine(r.Text);
                       // Output: 234
                       Console.WriteLine(r.XmlText);
                       // Output: <p xmlns="http://www.w3.org/1999/xhtml">2<span>3</span>4</p>
                       r.XmlText = "<div style=\"border: solid 1px black\">New Text</div>";
                       Console.WriteLine(c1Editor1.Text);
                       //Output:
                       //1
                       //NewText
                       //56
                   }
            ]]></code></example>
    </member>
    <member name="P:C1.Win.C1Editor.C1TextRange.Node">
      <summary>
            Returns an <see cref="T:System.Xml.XmlNode" /> which covers the current range.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextRange.Clone">
      <summary>
            Creates and returns a copy of the current text range.
            </summary>
      <returns>A copy of the current text range.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextRange.Trim">
      <summary>
            Moves start and end pointers of the range to exclude leading and trailing white-space characters from the current range.
            </summary>
      <example>The code below sets new background color for all words in selection, excluding leading and trailing white spaces.
            <code>
            private void button1_Click(object sender, EventArgs e)
            {
               C1TextRange r = c1Editor1.Selection.Clone();
               r.Trim();
               r.ApplyStyle("background-color", "#999999", C1StyleType.Character);
            }
            </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextRange.Normalize">
      <summary>
             Moves the range pointers to the most inner text.
             </summary>
      <remarks>
             Different ranges can point to one and the same text, but to different XML tags. For example we have three XML-fragments:
             
            &lt;p&gt;text|&lt;strong&gt;&lt;em&gt;inner text&lt;/em&gt;&lt;/strong&gt;|text&lt;/p&gt;,
            &lt;p&gt;text&lt;strong&gt;|&lt;em&gt;inner text&lt;/em&gt;|&lt;/strong&gt;text&lt;/p&gt;, and 
            &lt;p&gt;text&lt;strong&gt;&lt;em&gt;|inner text|&lt;/em&gt;&lt;/strong&gt;text&lt;/p&gt;
            
            In all three fragments the ranges point to one and the same text "inner text", but they have different XML-ranges. 
            The Normalize method transforms the first two ranges to the third one; it moves pointers inside (into the most inner tag).
            So, this method is necessary for a user to be sure that he works with a range positioned only on the text but not somewhere between elements in a document.
            </remarks>
      <example>The following example replaces the selected text with a new value.
            <code>
                    C1TextRange range = _editor.Selection.Clone();
                    range.Text = value;
                    //after inserting text we must collapse selection to the end
                    range.Normalize();
                    range.Start.MoveTo(range.End);
                    range.Select();
             </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextRange.Select">
      <summary>
             Moves selection to the current text range.
             </summary>
      <example>The following example replaces the selected text with a new value and moves selection to the end of the new text.
            <code>
                    C1TextRange range = _editor.Selection.Clone();
                    range.Text = value;
                    //after inserting text we must collapse selection to the end
                    range.Normalize();
                    range.Start.MoveTo(range.End);
                    range.Select();
             </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextRange.Move(System.Int32,System.Int32)">
      <summary>
            Moves the current range by the specified offset and length.
            </summary>
      <param name="offset">Specifies the number of characters to offset the current text range in relation to the current start of the range.</param>
      <param name="length">Specifies the new length of the range.</param>
      <example>The example marks a character before the selection using yellow color.
            <code>
              private void c1Editor1_SelectionChanged(object sender, EventArgs e)
              {
                    if (_colored != null)
                    {
                        _colored.RemoveStyle("color", "yellow");
                        _colored = null;
                    }
                    C1TextRange sel = c1Editor1.Selection.Clone();
                    sel.Move(-1, 1);
                    sel.ApplyStyle("color", "yellow", C1StyleType.Character);
                    _colored = sel;
              }
              private C1TextRange _colored = null;
              </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextRange.MoveTo(System.Xml.XmlNode)">
      <summary>
            Moves the <see cref="T:C1.Win.C1Editor.C1TextRange" /> object to the specified <see cref="T:System.Xml.XmlNode" />.
            </summary>
      <param name="node">The target node where the C1TextRange object will be moved.</param>
      <example>The following example selects the first paragraph in the document. 
            <code>
            private void button1_Click(object sender, EventArgs e)
            {
               XmlNode p0 = c1Editor1.Document.GetElementsByTagName("p")[0];
               C1TextRange range = c1Editor1.CreateRange();
               range.MoveTo(p0);
               range.Select();
            }
            </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextRange.ClearFormatting">
      <summary>
            Removes text and paragraph formatting from the text range.
            </summary>
      <example> The example shows how to clear any formatting of selected text.
            <code>
             private void button1_Click(object sender, EventArgs e)
             {
                editor.Selection.ClearFormatting();
             }
            </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextRange.ApplyTag(System.String)">
      <summary>
             Applies specified tag to the text range.
             </summary>
      <param name="tagName">XHTML tag to apply to the current text range.</param>
      <example>
             This sample applies the "strong", or bold, style to the selected text.
             <code>
              C1TextRange range = c1Editor1.Selection;
              range.ApplyTag("strong");
            </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextRange.ApplyClass(System.String)">
      <summary>
            Applies specified CSS class to the text range.
            </summary>
      <param name="className">The name of a CSS class to apply to the current text range.</param>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextRange.ApplyClass(System.String,C1.Win.C1Editor.C1StyleType)">
      <summary>
            Applies specified CSS class to the text range.
            </summary>
      <param name="className">The name of a CSS class to apply to the current text range.</param>
      <param name="type">Defines type of content to which the inline style must be applied.</param>
      <example>This code applies a "main_topic" class to the paragraph.
            <code>
            range.ApplyClass("main_topic", C1StyleType.Paragraph);
            </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextRange.ApplyStyle(System.String,System.String)">
      <summary>
             Applies specified inline style to the range.
             </summary>
      <param name="propertyName">Name of CSS property.</param>
      <param name="propertyValue">CSS value.</param>
      <example>This example converts a Color value to a CSS value and sets it
             as the background color of the selected range.
             <code>
             string htmlColor = ColorTranslator.ToHtml(value);
             c1Editor1.Selection.ApplyStyle("background-color", htmlColor);
            </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextRange.ApplyStyle(System.String,System.String,C1.Win.C1Editor.C1StyleType)">
      <summary>
            Applies specified inline style to the range.
            </summary>
      <param name="propertyName">Name of CSS property.</param>
      <param name="propertyValue">CSS value.</param>
      <param name="type">Defines type of content to which inline style must be applied.</param>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextRange.RemoveTag(System.String)">
      <summary>
            Removes specified tag from the <see cref="T:C1.Win.C1Editor.C1TextRange" />.
            </summary>
      <param name="tagName">Tag to remove from the <see cref="T:C1.Win.C1Editor.C1TextRange" />.</param>
      <example> This example makes the selected text bold, if the value is True, or regular, if the value is False.
            <code>
            function SetStrong(bool value)
            {
              if (value)
                       _editor.Selection.ApplyTag("strong");
              else
                       _editor.Selection.RemoveTag("strong");
            }
            </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextRange.RemoveClass(System.String)">
      <summary>
            Removes specified CSS class from the range.
            </summary>
      <param name="className">Class to remove.</param>
      <example> This example, if the value is True, marks the selected text as topic, using a "topic" CSS class,
            or, if the value is False, removes the "topic" class from the selected text.
            <code>
            function SetTopic(bool value)
            {
              if (value)
                       _editor.Selection.ApplyClass("topic");
              else
                       _editor.Selection.RemoveClass("topic");
            }
            </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextRange.RemoveStyle(System.String,System.String)">
      <summary>
             Removes the specified inline style.
             </summary>
      <param name="propertyName">Name of the inline style.</param>
      <param name="propertyValue">CSS value of the inline style.</param>
      <remarks>If <paramref name="propertyValue" /> is null, the function removes specified inline style with any value.
             </remarks>
      <example>This example removes specified color from the selected text. 
             If the value is null it applies default color to the text.
             <code>
             function SetColor(Color value)
             {
                    if (value.IsEmpty)
                        _editor.Selection.RemoveStyle("color", null);
                    else
                    {
                        string foreColor = System.Drawing.ColorTranslator.ToHtml(value);
                        _editor.Selection.ApplyStyle("color", foreColor, C1StyleType.Character);
                    }
             }
            </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextRange.IsTagApplied(System.String)">
      <summary>
            Returns a value indicating whether the specified tag is applied to the <see cref="T:C1.Win.C1Editor.C1TextRange" />. 
            </summary>
      <param name="tagName">The tag name.</param>
      <returns>True, if the specified tag is applied to the current range; otherwise, False.</returns>
      <example> The code updates an application UI. It marks an "Ordered list" button as checked if an ordered list is selected.
            It marks an "Unordered list" button as checked if an unordered list is selected.
            <code>
              btnOrderedList.Checked = _editor.Selection.IsTagApplied("ol");
              btnUnorderedList.Checked = _editor.Selection.IsTagApplied("ul");
            </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextRange.IsClassApplied(System.String)">
      <summary>
            Returns a value indicating whether the specified CSS class is applied to the <see cref="T:C1.Win.C1Editor.C1TextRange" />. 
            </summary>
      <param name="className">The CSS class name to check.</param>
      <returns>True, if the CSS class is applied to the range; otherwise, False.</returns>
      <example> This example updates some UI controls depending on the style of the selected text.
            <code>
            function UpdateUI()
            {
                   if (_editor.Mode == EditorMode.Design)
                   {
                       _button1.Enabled = _editor.Selection.IsClassApplied("topic");
                       _button2.Enabled = _editor.Selection.IsClassApplied("book");   
                   }
            }
            </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextRange.IsStyleApplied(System.String)">
      <summary>
            Returns a value indicating whether the inline style is applied to all text within the <see cref="T:C1.Win.C1Editor.C1TextRange" />. 
            </summary>
      <param name="propertyName">The CSS property name.</param>
      <returns>True, if the CSS class is applied to the range; otherwise, False.</returns>
      <example> The example demonstrates a function which determines whether or not selected text is underlined.
            <code>
            function IsUnderline()
            {
                   if (_editor.Mode == EditorMode.Design)
                   {
                       bool res = false;
                       if (_editor.Selection.IsStyleApplied("text-decoration"))
                           res = string.Compare(_editor.Selection.GetStyleValue("text-decoration", C1StyleType.Character), "underline", true) == 0;
                       return res;
                   }
                   else
                       return false;
            }
            </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextRange.GetStyleValue(System.String)">
      <summary>
            Gets an inline style value by the given CSS property name.
            </summary>
      <param name="propertyName">The CSS property name.</param>
      <returns>The string value of the given property.</returns>
      <example> The example shows how to write a function which returns font size of the selected text.
            <code>
            string GetSelectionFontSize()
            {
                if (_editor.Mode == EditorMode.Design)
                {
                    string size = _editor.Selection.GetStyleValue("font-size") ?? string.Empty;
                    return size.EndsWith("pt") ? size.Substring(0, size.Length - 2) : size;
                }
                else
                    return string.Empty;
            }
            </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextRange.GetStyleValue(System.String,C1.Win.C1Editor.C1StyleType)">
      <summary>
            Gets an inline style value by the given CSS property name.
            </summary>
      <param name="propertyName">The CSS property name.</param>
      <param name="type">Specifies the type of content to which the inline style will be applied.</param>
      <returns>The string value of the given property.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextRange.SetXmlElement(System.Xml.XmlElement)">
      <summary>
            Replaces the text range content with the given <paramref name="element" /> of <see cref="T:System.Xml.XmlElement" /> type.
            </summary>
      <param name="element">An XmlElement to replace the range content.</param>
      <example>The example replaces selected text with a div XmlElement.
            <code>
            private void button1_Click(object sender, EventArgs e)
            {
               XmlElement node = c1Editor1.Document.CreateElement("div");
               node.InnerText = "New Element";
               c1Editor1.Selection.SetXmlElement(node);
            }
            </code></example>
    </member>
    <member name="M:C1.Win.C1Editor.C1TextRange.GetTags(C1.Win.C1Editor.C1StyleType,System.Boolean)">
      <summary>
            Gets nodes list by the given C1StyleType value.
            </summary>
      <param name="type">Specifies the type of nodes that must be included to the output list.</param>
      <param name="includePartialNodes">Specifies whether partially selected nodes must be included to the output list.</param>
      <returns>The list of the nodes with specified type.</returns>
    </member>
    <member name="T:C1.Win.C1Editor.Selection">
      <summary>
            Represents text selected by a user in the <see cref="T:C1.Win.C1Editor.C1Editor" />. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Selection.Table">
      <summary>
            Represents a <see cref="P:C1.Win.C1Editor.Selection.Table" /> object which support interactions with the selected table.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Selection.List">
      <summary>
            Represents a <see cref="P:C1.Win.C1Editor.Selection.List" /> object which support interactions with the selected list.
            </summary>
    </member>
    <member name="P:C1.Win.C1Editor.Selection.Comments">
      <summary>
            Represents a <see cref="P:C1.Win.C1Editor.Selection.Table" /> object which support interactions with the selected comment.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Table">
      <summary>
            Allows the user to work with a table currently selected in the editor.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Table.Action">
      <summary>
            Determines the action to perform on the table.
            </summary>
      <remarks>
            Use this when you call the <see cref="M:C1.Win.C1Editor.Table.CanExecute(C1.Win.C1Editor.Table.Action)" /> method or the <see cref="M:C1.Win.C1Editor.Table.Execute(C1.Win.C1Editor.Table.Action)" /> method to specify
            what dialog type to show.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Editor.Table.Action.SelectTable">
      <summary>
            Selects all cells in the table.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Table.Action.SelectRow">
      <summary>
            Selects all cells in the table row.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Table.Action.SelectColumn">
      <summary>
            Selects all cell in the table column.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Table.Action.SelectCell">
      <summary>
            Selects all text in the cell.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Table.Action.DeleteTable">
      <summary>
            Deletes the selected table.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Table.Action.DeleteRows">
      <summary>
            Deletes the selected table rows.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Table.Action.DeleteColumns">
      <summary>
            Deletes the selected table columns.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Table.Action.InsertColumnBefore">
      <summary>
            Inserts a column before the selected column.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Table.Action.InsertColumnAfter">
      <summary>
            Inserts a column after the selected column.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Table.Action.InsertRowAbove">
      <summary>
            Inserts a row above the selected row.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Table.Action.InsertRowBelow">
      <summary>
            Inserts a row below the selected row.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Table.Action.MergeCells">
      <summary>
            Merges the selected cells.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Table.Action.SplitCells">
      <summary>
            Splits the selected cell.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Table.DialogType">
      <summary>
            Represents the type of a dialog box to be used.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Table.DialogType.Table">
      <summary>
             Table dialog box.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Table.DialogType.Row">
      <summary>
            Row dialog box.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Table.DialogType.Column">
      <summary>
            Column dialog box.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Table.DialogType.Cell">
      <summary>
            Cell dialog box.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Table.Execute(C1.Win.C1Editor.Table.Action)">
      <summary>
            Executes the specified action.
            </summary>
      <param name="action">The action to execute.</param>
    </member>
    <member name="M:C1.Win.C1Editor.Table.CanExecute(C1.Win.C1Editor.Table.Action)">
      <summary>
            Returns a Boolean value indicating whether the specified action can be executed.
            </summary>
      <param name="action">The action to be executed.</param>
      <returns>A Boolean value indicating whether or not the specified action can be executed.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.Table.ShowDialog(C1.Win.C1Editor.Table.DialogType)">
      <summary>
            Shows the specified dialog.
            </summary>
      <param name="type">The type of the dialog to show.</param>
    </member>
    <member name="M:C1.Win.C1Editor.Table.CanShowDialog(C1.Win.C1Editor.Table.DialogType)">
      <summary>
            Returns a Boolean value indicating whether the specified dialog box can be shown.
            </summary>
      <param name="type">The type of dialog box to be shown.</param>
      <returns>A Boolean value indicating whether or not the specified dialog can be shown.</returns>
    </member>
    <member name="T:C1.Win.C1Editor.List">
      <summary>
            Allows the user to work with a list currently selected in the editor.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.List.Action">
      <summary>
            Determines the action to perform on the list.
            </summary>
      <remarks>
            Use this when you call the <see cref="M:C1.Win.C1Editor.List.CanExecute(C1.Win.C1Editor.List.Action)" /> method or the <see cref="M:C1.Win.C1Editor.List.Execute(C1.Win.C1Editor.List.Action)" /> method to specify
            what action to execute.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Editor.List.Action.IncreaseLevel">
      <summary>
            Increase level of the selected list items.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.List.Action.DecreaseLevel">
      <summary>
            Decrease level of the selected list items.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.List.Action.ContinueNumbering">
      <summary>
            Continue numbering.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.List.Action.RestartNumbering">
      <summary>
            Restart numbering.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.List.ListType">
      <summary>
            Determines the type of the list.
            </summary>
      <remarks>
            Used by the see <see cref="P:C1.Win.C1Editor.List.Type" /> property.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Editor.List.ListType.None">
      <summary>
            No list.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.List.ListType.Numbered">
      <summary>
            Numbered list.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.List.ListType.Bulleted">
      <summary>
            Bulleted list.
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.List.Execute(C1.Win.C1Editor.List.Action)">
      <summary>
            Executes the specified action.
            </summary>
      <param name="action">The action to execute.</param>
    </member>
    <member name="M:C1.Win.C1Editor.List.CanExecute(C1.Win.C1Editor.List.Action)">
      <summary>
            Returns a Boolean value indicating whether the specified action can be executed.
            </summary>
      <param name="action">The action to be executed.</param>
      <returns>A Boolean value indicating whether or not the specified action can be executed.</returns>
    </member>
    <member name="P:C1.Win.C1Editor.List.Type">
      <summary>
            Gets or sets list type.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Comments">
      <summary>
            Allows the user to work with a list currently selected in the editor.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.Comments.Action">
      <summary>
            Determines the action to perform on the comments.
            </summary>
      <remarks>
            Use this when you call the <see cref="M:C1.Win.C1Editor.Comments.CanExecute(C1.Win.C1Editor.Comments.Action)" /> method or the <see cref="M:C1.Win.C1Editor.Comments.Execute(C1.Win.C1Editor.Comments.Action)" /> method to specify
            what action to execute.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Editor.Comments.Action.Add">
      <summary>
            Adds comment to the current selection.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Comments.Action.Edit">
      <summary>
            Edits the current comment.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Comments.Action.Reply">
      <summary>
            Replies to the current comment.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Comments.Action.Delete">
      <summary>
            Removes the current comment.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Comments.Action.DeleteAll">
      <summary>
            Removes all comments in the document.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Comments.Action.MovePrevious">
      <summary>
            Moves to the previous comment
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.Comments.Action.MoveNext">
      <summary>
            Moves to the next comment
            </summary>
    </member>
    <member name="M:C1.Win.C1Editor.Comments.CanExecute(C1.Win.C1Editor.Comments.Action)">
      <summary>
            Returns a Boolean value indicating whether the specified action can be executed.
            </summary>
      <param name="action">The action to be executed.</param>
      <returns>A Boolean value indicating whether or not the specified action can be executed.</returns>
    </member>
    <member name="M:C1.Win.C1Editor.Comments.Execute(C1.Win.C1Editor.Comments.Action)">
      <summary>
            Returns a Boolean value indicating whether the specified action can be executed.
            </summary>
      <param name="action">The action to be executed.</param>
      <returns>A Boolean value indicating whether or not the specified action can be executed.</returns>
    </member>
    <member name="T:C1.Win.C1Editor.EditorMode">
      <summary>
            Defines the behavior of the <see cref="T:C1.Win.C1Editor.C1Editor" />.
            </summary>
      <remarks>
            EditorMode is used by the <see cref="P:C1.Win.C1Editor.C1Editor.Mode" />  property.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Editor.EditorMode.Design">
      <summary>
            Design is the main mode of the editor.
            <see cref="T:C1.Win.C1Editor.C1Editor" /> in this mode represents a WYSIWYG XHTML editor.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.EditorMode.Source">
      <summary>
            Source mode allows you to edit XHTML markup.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.EditorMode.Preview">
      <summary>
            Preview mode allows you to preview how the document will look.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.DialogType">
      <summary>
            Represents the type of dialog box to show in the <see cref="M:C1.Win.C1Editor.C1Editor.ShowDialog(C1.Win.C1Editor.DialogType)" />.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.DialogType.NewTable">
      <summary>
            New table dialog box.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.DialogType.Image">
      <summary>
            Insert or edit image dialog box.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.DialogType.FlashMovie">
      <summary>
            Insert or edit Flash movie dialog box.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.DialogType.Hyperlink">
      <summary>
            Insert or edit hyperlink dialog box.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.DialogType.Bookmark">
      <summary>
            Insert or edit bookmark dialog box.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.DialogType.Find">
      <summary>
            Find dialog box.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.DialogType.Replace">
      <summary>
            Replace dialog box.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.DialogType.Format">
      <summary>
            Text formatting dialog box.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.DialogType.PageSetup">
      <summary>
            Page setup dialog box.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.C1StyleType">
      <summary>
            Specifies the types of content to which the inline style will be applied.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.C1StyleType.Character">
      <summary>
            Style is applied only to characters in the range.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.C1StyleType.Paragraph">
      <summary>
            Style is applied only to whole paragraphs containing the text range.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.C1StyleType.Table">
      <summary>
            Style is applied only to tables containing the range.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.C1StyleType.List">
      <summary>
            Style is applied only to lists containing the range.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.C1StyleType.Any">
      <summary>
            Style is applied to any kind of content.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.MoveUnit">
      <summary>
            Specifies the kind of move requested in a <see cref="M:C1.Win.C1Editor.C1TextPointer.Move(C1.Win.C1Editor.MoveUnit,System.Int32)" /> method call.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.MoveUnit.Character">
      <summary>
            Move by characters.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.MoveUnit.StartOfWord">
      <summary>
            Move the pointer to the beginning of the next word.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.MoveUnit.EndOfWord">
      <summary>
            Move the pointer to the end of the next word.
            </summary>
    </member>
    <member name="T:C1.Win.C1Editor.HtmlEventTypes">
      <summary>
            Specifies the kind of an HTML event in <see cref="T:C1.Win.C1Editor.HtmlEventEventArgs" /> event arguments of the <see cref="E:C1.Win.C1Editor.C1Editor.HtmlEvent" /> event.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.Unknown">
      <summary>
            Unknown event type.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.Help">
      <summary>
            HTML event when the user presses the F1 key while the client is the active window.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.Click">
      <summary>
            HTML event when the user clicks the left mouse button on the object.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.DoubleClick">
      <summary>
            HTML event when the user double-clicks the object.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.KeyDown">
      <summary>
            HTML event when the user presses a key.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.KeyUp">
      <summary>
            HTML event when the user releases a key.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.KeyPress">
      <summary>
            HTML event when the user presses an alphanumeric key.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.MouseDown">
      <summary>
            HTML event when the user clicks the object with either mouse button.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.MouseUp">
      <summary>
            HTML event when the user releases a mouse button while the mouse is over the object.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.MouseMove">
      <summary>
            HTML event when the user moves the mouse over the object.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.MouseOver">
      <summary>
            HTML event when the user moves the mouse pointer into the object.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.MouseOut">
      <summary>
            HTML event when the user moves the mouse pointer outside the boundaries of the object.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.ReadyState">
      <summary>
            HTML event when the state of the object has changed.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.BeforeUpdate">
      <summary>
            HTML event on a databound object before updating the associated data in the data source object.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.AfterUpdate">
      <summary>
            HTML event on a databound object after successfully updating the associated data in the data source object.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.RowExit">
      <summary>
            HTML event just before the data source control changes the current row in the object.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.RowEnter">
      <summary>
            HTML event to indicate that the current row has changed in the data source and new data values are available on the object.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.DragStart">
      <summary>
            HTML event on the source object when the user starts to drag a text selection or selected object.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.SelectStart">
      <summary>
            HTML event when the object is being selected.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.ErrorUpdate">
      <summary>
            HTML event on a databound object when an error occurs while updating the associated data in the data source object.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.ContextMenu">
      <summary>
            HTML event when the user clicks the right mouse button in the client area, opening the context menu.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.Stop">
      <summary>
            HTML event when the user clicks the Stop button or leaves the document.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.RowsDelete">
      <summary>
            HTML event when rows are about to be deleted from the recordset.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.RowInserted">
      <summary>
            HTML event just after new rows are inserted in the current recordset.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.CellChange">
      <summary>
            HTML event when data changes in the data provider.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.PropertyChange">
      <summary>
            HTML event when a property changes on the object.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.DatasetChanged">
      <summary>
            HTML event when the data set exposed by a data source object changes.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.DataAvailable">
      <summary>
            HTML event periodically as data arrives from data source objects that asynchronously transmit their data.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.DatasetComplete">
      <summary>
            HTML event to indicate that all data is available from the data source object.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.BeforeEditFocus">
      <summary>
            HTML event before an object contained in an editable element enters a UI-activated state or when an editable container object is control selected.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.SelectionChange">
      <summary>
            HTML event when the selection state of a document changes.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.ControlSelect">
      <summary>
            HTML event when the user is about to make a control selection of the object.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.MouseWheel">
      <summary>
            HTML event when the wheel button is rotated.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.FocusIn">
      <summary>
             event for an element just prior to setting focus on that element.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.FocusOut">
      <summary>
            HTML event for the current element with focus immediately after moving focus to another element.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.Activate">
      <summary>
            HTML event when the object is set as the active element.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.Deactivate">
      <summary>
            HTML event when the activeElement is changed from the current object to another object in the parent document.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.BeforeActivate">
      <summary>
            HTML event immediately before the object is set as the active element.
            </summary>
    </member>
    <member name="F:C1.Win.C1Editor.HtmlEventTypes.BeforeDeactivate">
      <summary>
            HTML event immediately before the activeElement is changed from the current object to another object in the parent document.
            </summary>
    </member>
  </members>
</doc>