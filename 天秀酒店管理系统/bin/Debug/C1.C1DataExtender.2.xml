<?xml version="1.0"?>
<doc>
  <assembly>
    <name>C1.C1DataExtender.2</name>
  </assembly>
  <members>
    <!-- Badly formed XML comment ignored for member "M:C1.C1DataExtender.ADONetUtils.CompareValueArrays(System.Object[],System.Object[])" -->
    <!-- Badly formed XML comment ignored for member "M:C1.C1DataExtender.ADONetUtils.CompareValueArrays(System.Object[],System.Object[],System.Globalization.CultureInfo,System.Boolean)" -->
    <member name="T:C1.C1DataExtender.ImmutableKeyedCollectionBase">
      <summary>
            Represents a read-only collection that provides an access to items by a key or 
            an index.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.ImmutableKeyedCollectionBase.#ctor">
      <summary>
            Creates a new instance of the ImmutableKeyedCollectionBase class.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.ImmutableKeyedCollectionBase.GetEnumerator">
      <summary>
            Gets a collection enumerator.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1DataExtender.ImmutableKeyedCollectionBase.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the collection items to the specified array starting from the 
            specified index in the target array.
            </summary>
      <param name="array">
            The array to copy items to.
            </param>
      <param name="index">
            The starting index in the target array.
            </param>
    </member>
    <member name="M:C1.C1DataExtender.ImmutableKeyedCollectionBase.IndexOfKey(System.String)">
      <summary>
            Gets and index of an item with the specified key.
            </summary>
      <param name="key">
            The key of the interested item.
            </param>
      <returns>
            The index of the item with the specified key if such item exists; otherwise, -1.
            </returns>
    </member>
    <member name="P:C1.C1DataExtender.ImmutableKeyedCollectionBase.Count">
      <summary>
            Gets a number of element in the collection.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ImmutableKeyedCollectionBase.IsSynchronized">
      <summary>
            Implements the IList.IsSynchronized property.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ImmutableKeyedCollectionBase.SyncRoot">
      <summary>
            Implements the IList.SyncRoot property.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "M:C1.C1DataExtender.KeyedObjectCollection`1.#ctor(System.Int32)" -->
    <member name="T:C1.C1DataExtender.TypeTypeConverter">
      <summary>
            Base class that provides a converter for properties of the Type type.
            Notes to inheritor: GetStandardValues method must be overridden to
            return a list of standard types.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.ColumnStyle">
      <summary>
            Represents a base for classes defining a column style on a column level.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.ColumnStyleBase">
      <summary>
            The base class that represents Column Style - a set of properties
            that affects <see cref="T:C1.C1DataExtender.C1ViewColumn" /> data representation in
            ComponentOne user interface controls.
            </summary>
      <remarks>
            See the <span style="LinkTopic">Defining Column Styles</span> topic for details.
            </remarks>
    </member>
    <member name="M:C1.C1DataExtender.ColumnStyleBase.IsInherited(C1.C1DataExtender.ColumnStylePropertyFlags)">
      <summary>
            Determine whether the specified property is inherited.
            </summary>
      <param name="property">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.C1DataExtender.ColumnStyleBase.Format">
      <summary>
            Defines a format string for a column value.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ColumnStyleBase.EditMask">
      <summary>
            Defines an edit mask for a column value.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ColumnStyleBase.NullText">
      <summary>
            Defines a string that is displayed by user interface controls for null values. 
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ColumnStyleBase.Visible">
      <summary>
            Indicates whether the column is visible in user interface.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ColumnStyleBase.ItemListType">
      <summary>
            Defines the type of item list for this column.
            </summary>
      <remarks>
            See <see cref="T:C1.C1DataExtender.ItemListTypeEnum" /> for details.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.ColumnStyleBase.ItemList">
      <summary>
            Defines a collection of items for an explicitly defined item list.
            </summary>
      <remarks>
        <see cref="P:C1.C1DataExtender.ColumnStyleBase.ItemList" /> is used to define a list of items when the
            <see cref="P:C1.C1DataExtender.ColumnStyleBase.ItemListType" /> property is set to 
            <see cref="F:C1.C1DataExtender.ItemListTypeEnum.FixedValues" /> or
            <see cref="F:C1.C1DataExtender.ItemListTypeEnum.FixedLookup" /> value.
            <para>
            When <see cref="P:C1.C1DataExtender.ColumnStyleBase.ItemListType" /> is set to
            <see cref="F:C1.C1DataExtender.ItemListTypeEnum.FixedValues" /> only the
            <see cref="P:C1.C1DataExtender.LookupItem.Value" /> property is used, which
            defines a possible value that can be entered in a column by 
            selecting it from the list.
            </para><para>
            If <see cref="P:C1.C1DataExtender.ColumnStyleBase.ItemListType" /> value is 
            <see cref="F:C1.C1DataExtender.ItemListTypeEnum.FixedLookup" /> then list represents
            a lookup, where <see cref="P:C1.C1DataExtender.LookupItem.Value" /> represents
            a key that is matched against a column value, and 
            <see cref="P:C1.C1DataExtender.LookupItem.DisplayValue" /> defines a string that
            will be displayed instead of an actual column value.
            </para></remarks>
    </member>
    <member name="P:C1.C1DataExtender.ColumnStyleBase.ItemListEffective">
      <summary>
            Returns an actually used <see cref="P:C1.C1DataExtender.ColumnStyleBase.ItemList" /> depending on 
            the <see cref="!:Inherit" /> property value.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ColumnStyleBase.ItemListValidate">
      <summary>
            Indicates whether the user interface control should check that the value 
            entered by the user is present as a <see cref="P:C1.C1DataExtender.LookupItem.Value" /> 
            in <see cref="P:C1.C1DataExtender.ColumnStyleBase.ItemList" />.  
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ColumnStyleBase.Width">
      <summary>
            Specifies preferred width (in characters) that user interface controls should 
            allocate for this column.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ColumnStyleBase.NumericInput">
      <summary>
            Indicates whether a special numeric edit mode is used.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ColumnStyleBase.NumericAutoMask">
      <summary>
            Reserved for future use.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ColumnStyleBase.IntegralLength">
      <summary>
            Reserved for future use.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ColumnStyleBase.DecimalLength">
      <summary>
            Reserved for future use.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ColumnStyleBase.DateTimeInput">
      <summary>
            Indicates whether a special date-time edit mode is used.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ColumnStyle.BaseStyleName">
      <summary>
            Defines a name of a base global style from which this style
            inherits its property values.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ColumnStyle.Inherit">
      <summary>
            Defines what style properties inherit their values from the
            base style.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.ColumnStylePropertyFlags">
      <summary>
            Enumerates inheritable properties of column style.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.ColumnStylePropertyFlags.InheritNone">
      <summary>
            None of the properties are inherited.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.ColumnStylePropertyFlags.InheritAll">
      <summary>
            All the properties are inherited.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.ItemListTypeEnum">
      <summary>
            Defines the possible types of item list for a column style.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.ItemListTypeEnum.None">
      <summary>
            There is no item list for this column.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.ItemListTypeEnum.FixedLookup">
      <summary>
            List of items is explicitly defined by the 
            <see cref="P:C1.C1DataExtender.ColumnStyleBase.ItemList" /> property. 
            The list is treated as a lookup, that is, ItemList[i].Value defines 
            a column value, and ItemList[i].DisplayValue defines its display 
            string presentation.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.ItemListTypeEnum.FixedValues">
      <summary>
            List of items is explicitly defined by the 
            <see cref="P:C1.C1DataExtender.ColumnStyleBase.ItemList" /> property. 
            The Value property of each item defines both column value and 
            display value. DisplayValue is ignored.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.ItemListTypeEnum.ForeignKey">
      <summary>
        <see cref="P:C1.C1DataExtender.ColumnStyleBase.ItemList" /> is built dynamically at run 
            time. It contains values and display values from the parent table 
            corresponding to this foreign key column. If this field is not a 
            foreign key, then this value is treated as <see cref="F:C1.C1DataExtender.ItemListTypeEnum.None" />.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.HorizontalAlignmentEnum">
      <summary>
            Defines the possible types of text alignment.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.HorizontalAlignmentEnum.General">
      <summary>
            Sets text to be left-aligned and numbers to be right-aligned.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.HorizontalAlignmentEnum.Near">
      <summary>
            Aligns text to the near side (left side in left-to-right mode). 
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.HorizontalAlignmentEnum.Center">
      <summary>
            Aligns text to the center.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.HorizontalAlignmentEnum.Far">
      <summary>
            Aligns cell text to the far side (right side in left-to-right mode). 
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.HorizontalAlignmentEnum.Justify">
      <summary>
            Spreads text throughout. 
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.LookupItemList">
      <summary>
            Represents a collection of <see cref="T:C1.C1DataExtender.LookupItem" /> objects
            for the <see cref="P:C1.C1DataExtender.ColumnStyleBase.ItemList" /> property.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.LookupItemList.Add(C1.C1DataExtender.LookupItem)">
      <summary>
            Adds a <see cref="T:C1.C1DataExtender.LookupItem" /> object to the collection.
            </summary>
      <param name="item">
            A <see cref="T:C1.C1DataExtender.LookupItem" />.
            </param>
      <returns>
            An index of added <see cref="T:C1.C1DataExtender.LookupItem" /> in the collection.
            </returns>
    </member>
    <member name="P:C1.C1DataExtender.LookupItemList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:C1.C1DataExtender.LookupItem" /> object at the specified index.
            </summary>
      <param name="index">
            An index of <see cref="T:C1.C1DataExtender.LookupItem" />.
            </param>
      <returns>
            A <see cref="T:C1.C1DataExtender.LookupItem" />.
            </returns>
    </member>
    <member name="T:C1.C1DataExtender.LookupItem">
      <summary>
            Represents an item of <see cref="T:C1.C1DataExtender.LookupItemList" /> collection.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.LookupItem.Value">
      <summary>
            Gets or sets a value matching a <see cref="T:C1.C1DataExtender.C1ViewColumn" /> value.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.LookupItem.DisplayValue">
      <summary>
            Gets or sets a display string showing in the user interface. 
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.GlobalColumnStyleBase">
      <summary>
            Base class for all global column styles
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.GlobalColumnStyleCollectionBase">
      <summary>
            The base class for global column style collections.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.GlobalColumnStyleCollectionBase.Add(C1.C1DataExtender.GlobalColumnStyleBase)">
      <summary>
            Adds a <see cref="T:C1.C1DataExtender.GlobalColumnStyleBase" /> object in the 
            collection.
            </summary>
      <param name="style">
            A <see cref="T:C1.C1DataExtender.GlobalColumnStyleBase" />.
            </param>
      <returns>
            An index of newly added object in the collection.
            </returns>
    </member>
    <member name="M:C1.C1DataExtender.GlobalColumnStyleCollectionBase.Insert(System.Int32,C1.C1DataExtender.GlobalColumnStyleBase)">
      <summary>
            Inserts a <see cref="T:C1.C1DataExtender.GlobalColumnStyleBase" /> object at the
            specified position in the collection.
            </summary>
      <param name="index">
            An index of <see cref="T:C1.C1DataExtender.GlobalColumnStyleBase" /> in the collection.
            </param>
      <param name="style">
            A <see cref="T:C1.C1DataExtender.GlobalColumnStyleBase" />.
            </param>
    </member>
    <member name="T:C1.C1DataExtender.RowDisplayBase">
      <summary>
            Defines a pattern used to construct a string that represents
            a table row in lookup list.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.RowDisplayBase.RowDisplayColumns">
      <summary>
            Defines a collection of column names whose values constitute
            a row representation string.
            </summary>
      <remarks>
            If <see cref="P:C1.C1DataExtender.RowDisplayBase.RowDisplayFormat" /> property value is empty then
            row display string is constructed as specified column values 
            separated by space, in order as they go in this collection.
            If this collection is empty then a column representing a row
            is determined automatically.
            Presence of a column name in the collection is synchronazed with 
            the <see cref="!:DataColumnExtender.RowDisplayValue" /> property
            value of the corresponding <see cref="!:DataColumnExtender" />
            object. If column name is in the collection then 
            <see cref="!:DataColumnExtender.RowDisplayValue" /> is true,
            if not in the collection then false. The change can be performed
            by adding/removing the column name from the collection or by
            changing the <see cref="!:DataColumnExtender.RowDisplayValue" />
            property value.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.RowDisplayBase.RowDisplayFormat">
      <summary>
            Defines a formatting based on columns specified in the
            <see cref="P:C1.C1DataExtender.RowDisplayBase.RowDisplayColumns" /> collection.
            </summary>
      <remarks>
            This property value represents a format string (with syntax defined 
            by the String.Format() method) that defines the formatting of the 
            row display string. Format specifications ({0}, {1} , and so on) in this 
            format string correspond to columns in the 
            <see cref="P:C1.C1DataExtender.RowDisplayBase.RowDisplayColumns" /> collection.        
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.RowDisplayBase.SortByDisplayValue">
      <summary>
            Indicates whether items in lookup list should be sorted by
            row display values.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.SchemaExtender.Design.ClassNameListEditor">
      <summary>
            Defines a property editor for selecting a class name from list of classes
            derived from the class specified in its constructor.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.Design.BaseEnumEditor">
      <summary>
            Base UITypeEditor for all dynamic enums.
            NOTE: catched from C1Data1
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.SchemaExtender.Design.SchemaExtenderNamesEditor">
      <summary>
            Defines a property editor for referencing a DataSet Extender by name.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.SchemaExtender.Design.TypedDataSetNamesEditor">
      <summary>
            Defines a property editor for referencing a typed DataSet by name.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.Design.C1ViewSetDesigner.EditViewSetActionList.Edit">
      <summary>
            Brings viewset editor dialog.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.Design.BindingArrayList">
      <summary>
            Summary description for BindingArrayList.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.Design.C1ViewSetDesignerForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:C1.C1DataExtender.Design.ColumnExpressionBuilderForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:C1.C1DataExtender.Design.GlobalColumnStylesForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:C1.C1DataExtender.Design.ViewExpressionBuilderForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:C1.C1DataExtender.Design.C1DataViewReferenceEditorBase">
      <summary>
            Base class that allows the user to select a referncing object for 
            properties of type C1DataView.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.Design.C1ViewRelationDataViewReferenceEditor">
      <summary>
            Provides drop-down to select reference C1DataView object for C1ViewRelation
            class' property.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.Design.ColumnStyleNamesEditor">
      <summary>
            Provides drop-down to select a name of a base column style.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.Design.SchemaBaseConnectionNameEditor">
      <summary>
            Drop-down editor to select a name of base connection object.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.Design.C1DbConnectionEditor">
      <summary>
            NOTE: doesn't work due to absence of IDataEnvironment service under
            WinForms designer.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.Design.C1DbConnectionEditor2">
      <summary>
            Replacement for C1DbConnectionEditor
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.Design.AddViewNodeDialog.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:C1.C1DataExtender.Design.VDLAddTableDialog.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:C1.C1DataExtender.Design.VDLBuilderForm.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:C1.C1DataExtender.Design.VDLJoinPropertiesDialog.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:C1.C1DataExtender.Design.VDLNodePropertiesDialog.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:C1.C1DataExtender.C1ExpressionDef">
      <summary>
            Defines a programming language and text of expression.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.C1ExpressionDef.GetAvailableLanguages">
      <summary>
            Returns the list of names of available languages. These are
            language names which can be assigned to the <see cref="P:C1.C1DataExtender.C1ExpressionDef.Language" /> 
            property.
            </summary>
      <returns>
            An array of invariant names of available programming languages.
            </returns>
    </member>
    <member name="P:C1.C1DataExtender.C1ExpressionDef.Language">
      <summary>
            Gets or sets the name of the .NET Framework programming language 
            used to define an expression.
            </summary>
      <remarks>
            The names of programming languages supported on a host computer
            can be retrieved with the <see cref="M:C1.C1DataExtender.C1ExpressionDef.GetAvailableLanguages" /> method.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1ExpressionDef.Text">
      <summary>
            Gets or sets the expression text , which must conform to the language 
            defined in the <see cref="P:C1.C1DataExtender.C1ExpressionDef.Language" /> property.
            </summary>
      <remarks>
            Expression text is treated as code from a class method, returning a
            value (function); therefore, expression code must have a line which 
            returns a value from the method (for example, "return" statement for 
            Visual Basic and C#).
            </remarks>
    </member>
    <!-- Badly formed XML comment ignored for member "M:C1.C1DataExtender.ExpressionHost.FindFunction(System.String,System.Type[])" -->
    <member name="T:C1.C1DataExtender.EomElement">
      <summary>
            The base class for all elements of EOM
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.EomElement.Clone">
      <summary>
            Performs memberwise clone. Must be overridden in complex derived
            classes.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.EomMarkupElement">
      <summary>
            The base class for elements which are not operands, such as parentheses
            and operation signs.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.EomOperandElement">
      <summary>
            The base class for all elements representing operands of an expression.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.EomOperandElement.Clone">
      <summary>
            Ensure Parent is null in the clone.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.EomOperandElement.OperandType">
      <summary>
            Gets or sets the returning type of operand.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.EomOperandElement.Parent">
      <summary>
            If this operand is Left or Right of EomOperation element, returns
            that EomOperation element.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.EomOperatorSymbol">
      <summary>
            Represents an operator symbol.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.EomOperatorSymbol.Priority">
      <summary>
            Returns the operator priority
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.EomLParen">
      <summary>
            Represents "(".
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.EomRParen">
      <summary>
            Represents ")".
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.EomFunctionCallSymbol">
      <summary>
            Represents function call in "plain structure". For "expression tree"
            use the EomFunctionCall class.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.EomFunctionCallSymbol.FunctionName">
      <summary>
            The name of function.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.EomFunctionCallSymbol.SpecialFunction">
      <summary>
            For special SQL operators like "IS NULL", "LIKE" and so on
            returns a value denoting such an operator. Returns No for regular
            functions.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.EomFunctionCallSymbol.Parameters">
      <summary>
            The list of actual parameters.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.EomOperation">
      <summary>
            Represents an operation, in the form 
            Left Operator Right.
            To define unary operation set Left to null.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.EomOperation.Clone">
      <summary>
            Left and Right are nulls
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:C1.C1DataExtender.EomOperation.Left">
      <summary>
            Left operand of the operation, or null for unary operation.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.EomOperation.Right">
      <summary>
            Right operand of the operation
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.EomOperation.Operator">
      <summary>
            The operator of the operation.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.EomOperation.IsUnary">
      <summary>
            Indicates whether operation is unary (true) or binary (false),
            the first case is defined by setting Left to null.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.EomConstant.GetConvertedValue(System.Type)">
      <summary>
            Returns Value converted to the specified targetType, or null if
            converion is impossible.
            </summary>
      <param name="targetType">
      </param>
    </member>
    <member name="P:C1.C1DataExtender.EomConstant.Value">
      <summary>
            Original value of the constant, from expression source.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.EomConstant.OperandType">
      <summary>
            The target type of value, to which Value is converted when call to
            ConvertedValue property occurs.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.EomConstant.ConvertedValue">
      <summary>
            Returns the Value converted to OperandType, in case when CanConvertValue
            returns true. If CanConvertValue is false then returns null.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.EomConstant.CanConvertValue">
      <summary>
            Indicates whether Value can be converted to OperandType, and thus
            usage of the ConvertedValue property is permitted.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.EomFunctionCall">
      <summary>
            Represents a call to a function with a list of actual parameters in
            "expression tree". For "plain structure" use the EomFunctionCallSymbol
            class.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.EomFunctionCall.FunctionName">
      <summary>
            The name of function.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.EomFunctionCall.SpecialFunction">
      <summary>
            For special SQL operators like "IS NULL", "LIKE" and so on
            returns a value denoting such an operator. Returns "No" for regular
            functions.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.EomFunctionCall.Parameters">
      <summary>
            The list of actual parameters.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.EomColumnRef">
      <summary>
            The base class for defining of reference to table column.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.EomUtils.BuildExpressionTree(C1.C1DataExtender.EomElementCollection)">
      <summary>
            Returns "expression tree" for the specified "plain expression".
            Returning "expression tree" takes into account operators' priorities.
            plainExpression must represent a valid infix expression (or empty
            expression), in other case result is unpredictable.
            Returning "expression tree" contains clones of "plain expression"
            elements.
            </summary>
      <param name="plainExpression">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1DataExtender.C1ViewModel">
      <summary>
            Provides an object model for View Definition Language.
            </summary>
      <remarks>
            The <see cref="T:C1.C1DataExtender.C1ViewModel" /> an object model for View Definition Language. 
            The latter is the SQL-like language that is used to define the <see cref="T:C1.C1DataExtender.C1DataView" /> 
            structure in the <see cref="P:C1.C1DataExtender.C1DataView.Definition" /> property. The corresponding 
            instance of the <see cref="T:C1.C1DataExtender.C1ViewModel" /> class is accessible via the
            <see cref="P:C1.C1DataExtender.C1DataView.DefinitionModel" /> property. When the view definition
            in the <see cref="P:C1.C1DataExtender.C1DataView.Definition" /> property is changed, the 
            <see cref="P:C1.C1DataExtender.C1DataView.DefinitionModel" /> is changed automatically to be in sync
            with the view definition, and vice versa, changes in 
            <see cref="P:C1.C1DataExtender.C1DataView.DefinitionModel" /> automatically updates the 
            <see cref="P:C1.C1DataExtender.C1DataView.Definition" /> property value.
            </remarks>
    </member>
    <member name="M:C1.C1DataExtender.C1ViewModel.BeginUpdate">
      <summary>
            Starts a batch update cycle during which multiple changes
            can be made in the view without recreating an owner <see cref="T:C1.C1DataExtender.C1DataView" />'s
            rowset. The update cycle must be finished with the 
            <see cref="M:C1.C1DataExtender.C1ViewModel.EndUpdate" /> method call.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.C1ViewModel.EndUpdate">
      <summary>
            Finishes an update cycle started by the <see cref="M:C1.C1DataExtender.C1ViewModel.BeginUpdate" /> 
            method call.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewModel.RootNode">
      <summary>
            Gets or sets a root node of the <see cref="T:C1.C1DataExtender.C1ViewModel" />.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewModel.ColumnsDefined">
      <summary>
            Represents a collection of ViewModelColumn objects defining the list 
            of view columns. Each ViewModelColumn can define both the specific
            column (the ColumnName property is defined) and all the columns of 
            ViewNode (the ColumnName property is empty).
            If this collection is empty this means that all columns of all ViewNode
            objects should be included in the column list.
            To get actual list of columns begotten by this definition use the
            ColumnsEffective collection.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewModel.ColumnsEffective">
      <summary>
            The read-only collection of ViewModelColumn objects representing
            the actual list of view columns begotten from definition specified in
            the ColumnsDefined collection. Each item in this collection represents
            a single specific column, and all the properties of ViewModelColumn 
            objects are not empty.
            This collection is empty if view model is inconsistent.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewModel.FilterCondition">
      <summary>
            Gets or sets the filter expression defined in the WHERE clause of
            View Definition Language.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.JoinTypeEnum">
      <summary>
            Specify the possible types of <see cref="T:C1.C1DataExtender.ViewJoin" />.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.JoinTypeEnum.Inner">
      <summary>
            Inner join, which corresponds to SQL Inner join.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.JoinTypeEnum.Outer">
      <summary>
            Outer join, which corresponds to SQL Outer join.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.JoinSemanticsEnum">
      <summary>
            Specify the possible types of <see cref="T:C1.C1DataExtender.ViewJoin" /> semantics.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.JoinSemanticsEnum.Main">
      <summary>
            Join is main.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.JoinSemanticsEnum.Lookup">
      <summary>
            Join is lookup.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.ViewJoin">
      <summary>
            Represents a join between two base DataTables in the <see cref="T:C1.C1DataExtender.C1ViewModel" />.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.ViewJoin.#ctor(System.Data.DataRelation,System.Data.DataTable,System.String)">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1DataExtender.ViewJoin" /> class with
            the <see cref="P:C1.C1DataExtender.ViewJoin.ChildNode" /> representing the specified DataTable
            and referencing by the specified alias, where the join parameters corresponds
            to the specified DataRelation.
            </summary>
      <param name="childRelation">
            The DataRelation that the <see cref="T:C1.C1DataExtender.ViewJoin" /> represents.
            </param>
      <param name="childTable">
            The DataTable that is represented by the <see cref="P:C1.C1DataExtender.ViewJoin.ChildNode" />
            of the <see cref="T:C1.C1DataExtender.ViewJoin" />.
            </param>
      <param name="childTableAlias">
            The alias that is used to reference <see cref="P:C1.C1DataExtender.ViewJoin.ChildNode" />.
            </param>
    </member>
    <member name="M:C1.C1DataExtender.ViewJoin.#ctor(System.Data.DataRelation,System.Data.DataTable)">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1DataExtender.ViewJoin" /> class with
            the <see cref="P:C1.C1DataExtender.ViewJoin.ChildNode" /> representing the specified DataTable, 
            where the join parameters corresponds to the specified DataRelation.
            </summary>
      <param name="childRelation">
            The DataRelation that the <see cref="T:C1.C1DataExtender.ViewJoin" /> represents.
            </param>
      <param name="childTable">
            The DataTable that is represented by the <see cref="P:C1.C1DataExtender.ViewJoin.ChildNode" /></param>
    </member>
    <member name="M:C1.C1DataExtender.ViewJoin.#ctor(System.String,System.String,System.String)">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1DataExtender.ViewJoin" /> class with
            the <see cref="P:C1.C1DataExtender.ViewJoin.ChildNode" /> representing the DataTable
            with specified name
            and referencing by the specified alias, where the join parameters corresponds
            to the DataRelation with the specified relation name.
            </summary>
      <param name="childRelationName">
            The name of the DataRelation that the <see cref="T:C1.C1DataExtender.ViewJoin" /> represents.
            </param>
      <param name="childTableName">
            The name of the DataTable that is represented by the 
            <see cref="P:C1.C1DataExtender.ViewJoin.ChildNode" />.
            </param>
      <param name="childTableAlias">
            The alias that is used to reference <see cref="P:C1.C1DataExtender.ViewJoin.ChildNode" />.
            </param>
    </member>
    <member name="M:C1.C1DataExtender.ViewJoin.#ctor(System.String,System.String)">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1DataExtender.ViewJoin" /> class with
            the <see cref="P:C1.C1DataExtender.ViewJoin.ChildNode" /> representing the DataTable
            with specified name , where the join parameters corresponds
            to the DataRelation with the specified relation name.
            </summary>
      <param name="childRelationName">
            The name of the DataRelation that the <see cref="T:C1.C1DataExtender.ViewJoin" /> represents.
            </param>
      <param name="childTableName">
            The name of the DataTable that is represented by the 
            </param>
    </member>
    <member name="P:C1.C1DataExtender.ViewJoin.ParentNode">
      <summary>
            References the parent <see cref="T:C1.C1DataExtender.ViewNode" /> of the <see cref="T:C1.C1DataExtender.ViewJoin" />.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ViewJoin.ChildNode">
      <summary>
            References the child <see cref="T:C1.C1DataExtender.ViewNode" /> of the <see cref="T:C1.C1DataExtender.ViewJoin" />.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ViewJoin.JoinType">
      <summary>
            Gets or sets the type of the <see cref="T:C1.C1DataExtender.ViewJoin" />.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ViewJoin.JoinRelation">
      <summary>
            References the DataRelation represented by the <see cref="T:C1.C1DataExtender.ViewJoin" />.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ViewJoin.JoinRelationName">
      <summary>
            Gets the name of the DataRelation represented by the <see cref="T:C1.C1DataExtender.ViewJoin" />.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ViewJoin.JoinSemantics">
      <summary>
            Gets the semantics of the join.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.ViewModelColumn">
      <summary>
            Represents a column defined for a view in the <see cref="T:C1.C1DataExtender.C1ViewModel" />.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.ViewModelColumn.Clone">
      <summary>
            Gets a copy of this <see cref="T:C1.C1DataExtender.ViewModelColumn" />.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1DataExtender.ViewModelColumn.#ctor(C1.C1DataExtender.ViewNode)">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1DataExtender.ViewModelColumn" /> referencing a 
            column of the specified <see cref="P:C1.C1DataExtender.ViewModelColumn.ViewNode" />.
            </summary>
      <param name="viewNode">
            The <see cref="P:C1.C1DataExtender.ViewModelColumn.ViewNode" /> whose column is referenced by this 
            <see cref="T:C1.C1DataExtender.ViewModelColumn" />.
            </param>
    </member>
    <member name="M:C1.C1DataExtender.ViewModelColumn.#ctor(C1.C1DataExtender.ViewNode,System.Data.DataColumn)">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1DataExtender.ViewModelColumn" /> referencing the 
            specified DataColumn of the DataTable represented by the specified 
            <see cref="P:C1.C1DataExtender.ViewModelColumn.ViewNode" />.
            </summary>
      <param name="viewNode">
            The <see cref="P:C1.C1DataExtender.ViewModelColumn.ViewNode" /> whose column is referenced by this 
            <see cref="P:C1.C1DataExtender.ViewModelColumn.ViewNode" />.
            </param>
      <param name="dataColumn">
            The DataColumn represented by this <see cref="P:C1.C1DataExtender.ViewModelColumn.ViewNode" />.
            </param>
    </member>
    <member name="M:C1.C1DataExtender.ViewModelColumn.#ctor(C1.C1DataExtender.ViewNode,System.String)">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1DataExtender.ViewModelColumn" /> referencing the 
            DataColumn with the specified name that belongs to the DataTable represented 
            by the specified <see cref="P:C1.C1DataExtender.ViewModelColumn.ViewNode" />.
            </summary>
      <param name="viewNode">
            The <see cref="P:C1.C1DataExtender.ViewModelColumn.ViewNode" /> whose column is referenced by this 
            <see cref="P:C1.C1DataExtender.ViewModelColumn.ViewNode" />.
            </param>
      <param name="dataColumnName">
            The name of the DataColumn represented by this <see cref="P:C1.C1DataExtender.ViewModelColumn.ViewNode" />.
            </param>
    </member>
    <member name="M:C1.C1DataExtender.ViewModelColumn.#ctor(C1.C1DataExtender.ViewNode,System.Data.DataColumn,System.String)">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1DataExtender.ViewModelColumn" /> referencing the 
            specified DataColumn of the DataTable represented by the specified 
            <see cref="P:C1.C1DataExtender.ViewModelColumn.ViewNode" />, and provides it with the specified alias that is
            used to reference the column.
            </summary>
      <param name="viewNode">
            The <see cref="P:C1.C1DataExtender.ViewModelColumn.ViewNode" /> whose column is referenced by this 
            <see cref="P:C1.C1DataExtender.ViewModelColumn.ViewNode" />.
            </param>
      <param name="dataColumn">
            The DataColumn represented by this <see cref="P:C1.C1DataExtender.ViewModelColumn.ViewNode" />.
            </param>
      <param name="columnAlias">
            The that is used to reference the column.
            </param>
    </member>
    <member name="M:C1.C1DataExtender.ViewModelColumn.#ctor(C1.C1DataExtender.ViewNode,System.String,System.String)">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1DataExtender.ViewModelColumn" /> referencing the 
            DataColumn with the specified name that belongs to the DataTable represented 
            by the specified <see cref="P:C1.C1DataExtender.ViewModelColumn.ViewNode" />, and provides it with the specified 
            alias that is used to reference the column.
            </summary>
      <param name="viewNode">
            The <see cref="P:C1.C1DataExtender.ViewModelColumn.ViewNode" /> whose column is referenced by this 
            <see cref="P:C1.C1DataExtender.ViewModelColumn.ViewNode" />.
            </param>
      <param name="dataColumnName">
            The name of the DataColumn represented by this <see cref="P:C1.C1DataExtender.ViewModelColumn.ViewNode" />.
            </param>
      <param name="columnAlias">
            The that is used to reference the column.
            </param>
    </member>
    <member name="M:C1.C1DataExtender.ViewModelColumn.#ctor(System.String,System.String)">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1DataExtender.ViewModelColumn" /> class that 
            represents a calculated column with the specified calculation expression
            and alias.
            </summary>
      <param name="columnExpression">
            The expression that is used to calculate the column value.
            </param>
      <param name="columnAlias">
            The that is used to reference the column.
            </param>
    </member>
    <member name="P:C1.C1DataExtender.ViewModelColumn.DataColumn">
      <summary>
            Gets the DataColumn repesented by this <see cref="T:C1.C1DataExtender.ViewModelColumn" />.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ViewModelColumn.DataColumnName">
      <summary>
            Gets the name of the DataColumn repesented by this <see cref="T:C1.C1DataExtender.ViewModelColumn" />,
            or denotes all columns of ViewNode in case when its value is not set 
            (null or empty string).
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ViewModelColumn.ColumnAlias">
      <summary>
            Gets the alias used to reference this <see cref="T:C1.C1DataExtender.ViewModelColumn" /> by name.
            </summary>
      <remarks>
            If this property contains an empty value while the <see cref="T:C1.C1DataExtender.ViewModelColumn" /> 
            is the item of the 
            <see cref="P:C1.C1DataExtender.C1ViewModel.ColumnsDefined" /> collection then corresponding 
            <see cref="T:C1.C1DataExtender.ViewModelColumn" /> 
            object of the <see cref="P:C1.C1DataExtender.C1ViewModel.ColumnsEffective" /> collection contains 
            automatically generated value. This value is equal to ColumnName of
            representing DataColumn or is some modification of it which is 
            necessary to ensure column name uniqueness.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.ViewModelColumn.ViewNode">
      <summary>
            References the <see cref="P:C1.C1DataExtender.ViewModelColumn.ViewNode" /> whose column(s) represented by this 
            <see cref="T:C1.C1DataExtender.ViewModelColumn" />.
            </summary>
      <remarks>
            This property value is never the null for non-calculated column, 
            and the null for the calculated one.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.ViewModelColumn.ColumnExpression">
      <summary>
            Gets an expression used to calculate the column value in case when this
            <see cref="T:C1.C1DataExtender.ViewModelColumn" /> represents a calculated column.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ViewModelColumn.IsCalculated">
      <summary>
            Indicates wheather the <see cref="T:C1.C1DataExtender.ViewModelColumn" /> represents a calculated 
            column.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.ViewModelColumnCollectionBase">
      <summary>
            Represents a base class for collections of <see cref="T:C1.C1DataExtender.ViewModelColumn" />
            objects.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ViewModelColumnCollectionBase.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:C1.C1DataExtender.ViewModelColumn" /> object at the specified index.
            </summary>
      <param name="index">
            The index of the <see cref="T:C1.C1DataExtender.ViewModelColumn" /> object.
            </param>
      <returns>
        <see cref="T:C1.C1DataExtender.ViewModelColumn" /> object at the specified index.
            </returns>
    </member>
    <member name="T:C1.C1DataExtender.ViewModelColumnDefinitionCollection">
      <summary>
            Represents a collection of ViewModelColumn objects intended to define
            the list of C1ViewModel columns.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.ViewModelColumnEffectiveCollection">
      <summary>
            Represents a read-only collection of ViewModelColumn objects denoting 
            actual list of C1ViewModel columns.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.VDLExprFuncImpl">
      <summary>
            Implements VDL functions used in filter expressions.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.IRowAccessor">
      <summary>
            This interface is necessary to pass CompositeViewRow (which is internal)
            to expression implementation class, which is situated in another assembly.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.VDLExpressionImplBase.Row">
      <summary>
            Gets or sets a row on which expression is evaluated.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.ViewNode">
      <summary>
            Represents a reference to a base DataTable in the <see cref="T:C1.C1DataExtender.C1ViewModel" />.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.ViewNode.#ctor(System.Data.DataTable)">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1DataExtender.ViewNode" /> class that represents
            a specified DataTable.
            </summary>
      <remarks>
            Constructor should be only used to create <see cref="T:C1.C1DataExtender.ViewNode" />
            that will be assigned to the <see cref="P:C1.C1DataExtender.C1ViewModel.RootNode" /> property.
            Any other <see cref="T:C1.C1DataExtender.ViewNode" /> of the <see cref="T:C1.C1DataExtender.C1ViewModel" /> is created as a 
            <see cref="P:C1.C1DataExtender.ViewJoin.ChildNode" /> object of <see cref="T:C1.C1DataExtender.ViewJoin" /> 
            automatically when ViewJoin is being created.
            </remarks>
      <param name="dataTable">
            Specify a DataTable that is represented by this <see cref="T:C1.C1DataExtender.ViewNode" />.
            </param>
    </member>
    <member name="M:C1.C1DataExtender.ViewNode.#ctor(System.Data.DataTable,System.String)">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1DataExtender.ViewNode" /> class that represents
            a specified DataTable with a specified alias used to reference this node
            in the owner <see cref="T:C1.C1DataExtender.C1ViewModel" />.
            </summary>
      <remarks>
            Constructor should be only used to create <see cref="T:C1.C1DataExtender.ViewNode" />
            that will be assigned to the <see cref="P:C1.C1DataExtender.C1ViewModel.RootNode" /> property.
            Any other <see cref="T:C1.C1DataExtender.ViewNode" /> of the <see cref="T:C1.C1DataExtender.C1ViewModel" /> is created as a 
            <see cref="P:C1.C1DataExtender.ViewJoin.ChildNode" /> object of <see cref="T:C1.C1DataExtender.ViewJoin" /> 
            automatically when ViewJoin is being created.
            </remarks>
      <param name="dataTable">
            Specify a DataTable that is represented by this <see cref="T:C1.C1DataExtender.ViewNode" />.
            </param>
      <param name="tableAlias">
            Defines an alias that is used to reference this <see cref="T:C1.C1DataExtender.ViewNode" />.
            </param>
    </member>
    <member name="M:C1.C1DataExtender.ViewNode.#ctor(System.String)">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1DataExtender.ViewNode" /> class that represents
            a DataTable with a specified name.
            </summary>
      <remarks>
            Constructor should be only used to create <see cref="T:C1.C1DataExtender.ViewNode" />
            that will be assigned to the <see cref="P:C1.C1DataExtender.C1ViewModel.RootNode" /> property.
            Any other <see cref="T:C1.C1DataExtender.ViewNode" /> of the <see cref="T:C1.C1DataExtender.C1ViewModel" /> is created as a 
            <see cref="P:C1.C1DataExtender.ViewJoin.ChildNode" /> object of <see cref="T:C1.C1DataExtender.ViewJoin" /> 
            automatically when ViewJoin is being created.
            </remarks>
      <param name="dataTableName">
            Defines a name of DataTable that is represented by this <see cref="T:C1.C1DataExtender.ViewNode" />.
            </param>
    </member>
    <member name="M:C1.C1DataExtender.ViewNode.#ctor(System.String,System.String)">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1DataExtender.ViewNode" /> class that represents
            a DataTable with a specified name and alias used to reference this node
            in the owner <see cref="T:C1.C1DataExtender.C1ViewModel" />..
            </summary>
      <remarks>
            Constructor should be only used to create <see cref="T:C1.C1DataExtender.ViewNode" />
            that will be assigned to the <see cref="P:C1.C1DataExtender.C1ViewModel.RootNode" /> property.
            Any other <see cref="T:C1.C1DataExtender.ViewNode" /> of the <see cref="T:C1.C1DataExtender.C1ViewModel" /> is created as a 
            <see cref="P:C1.C1DataExtender.ViewJoin.ChildNode" /> object of <see cref="T:C1.C1DataExtender.ViewJoin" /> 
            automatically when ViewJoin is being created.
            </remarks>
      <param name="dataTableName">
            Defines a name of DataTable that is represented by this <see cref="T:C1.C1DataExtender.ViewNode" />.
            </param>
      <param name="tableAlias">
            Defines an alias that is used to reference this <see cref="T:C1.C1DataExtender.ViewNode" />.
            </param>
    </member>
    <member name="P:C1.C1DataExtender.ViewNode.ParentJoin">
      <summary>
            Gets a join with parent <see cref="T:C1.C1DataExtender.ViewNode" /> objects.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ViewNode.Table">
      <summary>
            References the DataTable represented by this <see cref="T:C1.C1DataExtender.ViewNode" />.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ViewNode.TableName">
      <summary>
            Gets the name of the DataTable represented by this <see cref="T:C1.C1DataExtender.ViewNode" />.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ViewNode.TableAlias">
      <summary>
            Gets the alias used to reference this <see cref="T:C1.C1DataExtender.ViewNode" />.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ViewNode.Joins">
      <summary>
            Gets a collection of joins with child <see cref="T:C1.C1DataExtender.ViewNode" /> objects.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.DataRowExpressionImplBase">
      <summary>
            Implementation base class for DataRowExpressionEvaluator
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.DataRowExpressionImplBase.row">
      <summary>
            Note: starts with lowercase letter to mimic a method parameter name.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.DataColumnExpressionImplBase.column">
      <summary>
            Note: starts with lowercase letter to mimic a method parameter name.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.VirtualModeEnum">
      <summary>
            Defines the possible Virtual Modes of a view.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.VirtualModeEnum.None">
      <summary>
            Virtual Mode is not used
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.VirtualModeEnum.KeySet">
      <summary>
            Virtual KeySet mode is used
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.IdentityColumnRetrieveModeEnum">
      <summary>
            Describes the possible moments when 
            <see cref="!:DataConnectionExtenderBase.IdentityColumnLastValueSelect" /> statement
            must be passed to a database server.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.IdentityColumnRetrieveModeEnum.BeforeInsertCommand">
      <summary>
            Statement is passed before INSERT statement.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.IdentityColumnRetrieveModeEnum.InInsertCommand">
      <summary>
            Statement is passed in one batch with INSERT statement.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.IdentityColumnRetrieveModeEnum.AfterInsertCommand">
      <summary>
            Statement is passed after INSERT statement.
            </summary>
    </member>
    <member name="M:antlr.collections.AST.getNumberOfChildren">
      <summary>
            Get number of children of this node; if leaf, returns 0
            </summary>
      <returns>Number of children</returns>
    </member>
    <member name="T:antlr.debug.misc.ASTFrame">
      <summary>
            Summary description for myASTFrame.
            </summary>
    </member>
    <member name="M:antlr.debug.misc.ASTFrame.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="T:antlr.debug.misc.JTreeASTPanel">
      <summary>
            Summary description for myJTreeASTPanel.
            </summary>
    </member>
    <member name="M:antlr.debug.misc.JTreeASTPanel.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="F:antlr.CharScanner.tokenCreator">
      <summary>Used for creating Token instances.</summary>
    </member>
    <member name="M:antlr.CharScanner.panic(System.String)">
      <summary>
            This method is executed by ANTLR internally when it detected an illegal
            state that cannot be recovered from.
            The previous implementation of this method called <see cref="M:System.Environment.Exit(System.Int32)" />
            and writes directly to <see cref="P:System.Console.Error" />, which is usually not 
            appropriate when a translator is embedded into a larger application.
            </summary>
      <param name="s">Error message.</param>
    </member>
    <member name="T:antlr.TokenCreator">
      <summary>
            A creator of Token object instances.
            </summary>
      <remarks>
        <para>
            This class and it's sub-classes exists primarily as an optimization
            of the reflection-based mechanism(s) previously used exclusively to 
            create instances of Token objects.
            </para>
        <para>
            Since Lexers in ANTLR use a single Token type, each TokenCreator can 
            create one class of Token objects (that's why it's not called TokenFactory).
            </para>
      </remarks>
    </member>
    <member name="M:antlr.TokenCreator.Create">
      <summary>
            Constructs a <see cref="T:antlr.Token" /> instance.
            </summary>
    </member>
    <member name="P:antlr.TokenCreator.TokenTypeName">
      <summary>
            Returns the fully qualified name of the Token type that this
            class creates.
            </summary>
    </member>
    <member name="T:antlr.debug.DebuggingParser">
      <summary> This type was created in VisualAge.
            </summary>
    </member>
    <member name="M:antlr.debug.DebuggingCharScanner.reportError(antlr.MismatchedCharException)">
      <summary>Report exception errors caught in nextToken() 
            </summary>
    </member>
    <member name="M:antlr.debug.DebuggingCharScanner.reportError(System.String)">
      <summary>Parser error-reporting function can be overridden in subclass 
            </summary>
    </member>
    <member name="M:antlr.debug.DebuggingCharScanner.reportWarning(System.String)">
      <summary>Parser warning-reporting function can be overridden in subclass 
            </summary>
    </member>
    <member name="T:antlr.InputBuffer">
      <summary>
            Represents a stream of characters fed to the lexer from that can be rewound 
            via mark()/rewind() methods.
            </summary>
      <remarks>
        <para>
            A dynamic array is used to buffer up all the input characters.  Normally,
            "k" characters are stored in the buffer.  More characters may be stored 
            during guess mode (testing syntactic predicate), or when LT(i&gt;k) is referenced.
            Consumption of characters is deferred.  In other words, reading the next
            character is not done by conume(), but deferred until needed by LA or LT.
            </para>
      </remarks>
    </member>
    <member name="M:antlr.debug.GuessingEventArgs.setValues(System.Int32,System.Int32)">
      <summary>This should NOT be called from anyone other than ParserEventSupport! 
            </summary>
    </member>
    <member name="T:antlr.debug.InputBufferListenerBase">
      <summary>
            Provides an abstract base for implementing <see cref="T:antlr.debug.InputBufferListener" /> subclasses.
            </summary>
      <remarks>
        <param>
            	This abstract class is provided to make it easier to create <see cref="T:antlr.debug.InputBufferListener" />s. 
            	You should extend this base class rather than creating your own.
            	</param>
      </remarks>
    </member>
    <member name="M:antlr.debug.InputBufferListenerBase.doneParsing(System.Object,antlr.debug.TraceEventArgs)">
      <summary>
            Handle the "Done" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.InputBufferListenerBase.inputBufferConsume(System.Object,antlr.debug.InputBufferEventArgs)">
      <summary>
            Handle the "CharConsumed" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.InputBufferListenerBase.inputBufferLA(System.Object,antlr.debug.InputBufferEventArgs)">
      <summary>
            Handle the "CharLA" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.InputBufferListenerBase.inputBufferMark(System.Object,antlr.debug.InputBufferEventArgs)">
      <summary>
            Handle the "Mark" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.InputBufferListenerBase.inputBufferRewind(System.Object,antlr.debug.InputBufferEventArgs)">
      <summary>
            Handle the "Rewind" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.InputBufferReporter.inputBufferConsume(System.Object,antlr.debug.InputBufferEventArgs)">
      <summary> charBufferConsume method comment.
            </summary>
    </member>
    <member name="M:antlr.debug.InputBufferReporter.inputBufferLA(System.Object,antlr.debug.InputBufferEventArgs)">
      <summary> charBufferLA method comment.
            </summary>
    </member>
    <member name="M:antlr.Parser.panic">
      <summary>
            @deprecated as of 2.7.2. This method calls System.exit() and writes
            directly to stderr, which is usually not appropriate when
            a parser is embedded into a larger application. Since the method is
            <code>static</code>, it cannot be overridden to avoid these problems.
            ANTLR no longer uses this method internally or in generated code.
            </summary>
    </member>
    <member name="M:antlr.Parser.setASTFactory(antlr.ASTFactory)">
      <summary>
            Specify an object with support code (shared by Parser and TreeParser.
            Normally, the programmer does not play with this, using 
            <see cref="M:antlr.Parser.setASTNodeClass(System.String)" /> instead.
            </summary>
      <param name="f">
      </param>
    </member>
    <member name="M:antlr.Parser.setASTNodeClass(System.String)">
      <summary>
            Specify the type of node to create during tree building. 
            </summary>
      <param name="cl">Fully qualified AST Node type name.</param>
    </member>
    <member name="M:antlr.Parser.setASTNodeType(System.String)">
      <summary>
            Specify the type of node to create during tree building. 
            use <see cref="M:antlr.Parser.setASTNodeClass(System.String)" /> now to be consistent with 
            Token Object Type accessor.
            </summary>
      <param name="nodeType">Fully qualified AST Node type name.</param>
    </member>
    <member name="E:antlr.Parser.EnterRule">
      <summary>
      </summary>
    </member>
    <member name="M:antlr.debug.LLkDebuggingParser.consume">
      <summary>Get another token object from the token stream 
            </summary>
    </member>
    <member name="M:antlr.debug.LLkDebuggingParser.LA(System.Int32)">
      <summary>Return the token type of the ith token of lookahead where i=1
            is the current token being examined by the parser (i.e., it
            has not been matched yet).
            </summary>
    </member>
    <member name="M:antlr.debug.LLkDebuggingParser.match(System.Int32)">
      <summary>Make sure current lookahead symbol matches token type <tt>t</tt>.
            Throw an exception upon mismatch, which is catch by either the
            error handler or by the syntactic predicate.
            </summary>
    </member>
    <member name="M:antlr.debug.LLkDebuggingParser.match(antlr.collections.impl.BitSet)">
      <summary>Make sure current lookahead symbol matches the given set
            Throw an exception upon mismatch, which is catch by either the
            error handler or by the syntactic predicate.
            </summary>
    </member>
    <member name="M:antlr.debug.LLkDebuggingParser.reportError(antlr.RecognitionException)">
      <summary>Parser error-reporting function can be overridden in subclass 
            </summary>
    </member>
    <member name="M:antlr.debug.LLkDebuggingParser.reportError(System.String)">
      <summary>Parser error-reporting function can be overridden in subclass 
            </summary>
    </member>
    <member name="M:antlr.debug.LLkDebuggingParser.reportWarning(System.String)">
      <summary>Parser warning-reporting function can be overridden in subclass 
            </summary>
    </member>
    <member name="M:antlr.debug.LLkDebuggingParser.setupDebugging(antlr.TokenStream,antlr.TokenBuffer)">
      <summary>User can override to do their own debugging 
            </summary>
    </member>
    <member name="T:antlr.debug.MessageListenerBase">
      <summary>
            Provides an abstract base for implementing <see cref="T:antlr.debug.MessageListener" /> subclasses.
            </summary>
      <remarks>
        <param>
            	This abstract class is provided to make it easier to create <see cref="T:antlr.debug.MessageListener" />s. 
            	You should extend this base class rather than creating your own.
            	</param>
      </remarks>
    </member>
    <member name="M:antlr.debug.MessageListenerBase.doneParsing(System.Object,antlr.debug.TraceEventArgs)">
      <summary>
            Handle the "Done" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.MessageListenerBase.reportError(System.Object,antlr.debug.MessageEventArgs)">
      <summary>
            Handle the "ReportError" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.MessageListenerBase.reportWarning(System.Object,antlr.debug.MessageEventArgs)">
      <summary>
            Handle the "ReportWarning" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.NewLineEventArgs.ToString">
      <summary>This should NOT be called from anyone other than ParserEventSupport! 
            </summary>
    </member>
    <member name="T:antlr.debug.ParserEventSupport">
      <summary>A class to assist in firing parser events
            NOTE: I intentionally _did_not_ synchronize the event firing and
            add/remove listener methods.  This is because the add/remove should
            _only_ be called by the parser at its start/end, and the _same_thread_
            should be performing the parsing.  This should help performance a tad...
            </summary>
    </member>
    <member name="T:antlr.debug.ParserListenerBase">
      <summary>
            Provides an abstract base for implementing <see cref="T:antlr.debug.ParserListener" /> subclasses.
            </summary>
      <remarks>
        <param>
            	This abstract class is provided to make it easier to create <see cref="T:antlr.debug.ParserListener" />s. 
            	You should extend this base class rather than creating your own.
            	</param>
      </remarks>
    </member>
    <member name="M:antlr.debug.ParserListenerBase.doneParsing(System.Object,antlr.debug.TraceEventArgs)">
      <summary>
            Handle the "Done" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.ParserListenerBase.enterRule(System.Object,antlr.debug.TraceEventArgs)">
      <summary>
            Handle the "EnterRule" event
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.ParserListenerBase.exitRule(System.Object,antlr.debug.TraceEventArgs)">
      <summary>
            Handle the "ExitRule" event
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.ParserListenerBase.parserConsume(System.Object,antlr.debug.TokenEventArgs)">
      <summary>
            Handle the "Consume" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.ParserListenerBase.parserLA(System.Object,antlr.debug.TokenEventArgs)">
      <summary>
            Handle the "ParserLA" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.ParserListenerBase.parserMatch(System.Object,antlr.debug.MatchEventArgs)">
      <summary>
            Handle the "Match" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.ParserListenerBase.parserMatchNot(System.Object,antlr.debug.MatchEventArgs)">
      <summary>
            Handle the "MatchNot" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.ParserListenerBase.parserMismatch(System.Object,antlr.debug.MatchEventArgs)">
      <summary>
            Handle the "MisMatch" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.ParserListenerBase.parserMismatchNot(System.Object,antlr.debug.MatchEventArgs)">
      <summary>
            Handle the "MisMatchNot" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.ParserListenerBase.reportError(System.Object,antlr.debug.MessageEventArgs)">
      <summary>
            Handle the "ReportError" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.ParserListenerBase.reportWarning(System.Object,antlr.debug.MessageEventArgs)">
      <summary>
            Handle the "ReportWarning" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.ParserListenerBase.semanticPredicateEvaluated(System.Object,antlr.debug.SemanticPredicateEventArgs)">
      <summary>
            Handle the "SemPreEvaluated" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.ParserListenerBase.syntacticPredicateFailed(System.Object,antlr.debug.SyntacticPredicateEventArgs)">
      <summary>
            Handle the "SynPredFailed" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.ParserListenerBase.syntacticPredicateStarted(System.Object,antlr.debug.SyntacticPredicateEventArgs)">
      <summary>
            Handle the "SynPredStarted" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.ParserListenerBase.syntacticPredicateSucceeded(System.Object,antlr.debug.SyntacticPredicateEventArgs)">
      <summary>
            Handle the "SynPredSucceeded" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="T:antlr.debug.ParserMatchListenerBase">
      <summary>
            Provides an abstract base for implementing <see cref="T:antlr.debug.ParserMatchListener" /> subclasses.
            </summary>
      <remarks>
        <param>
            	This abstract class is provided to make it easier to create <see cref="T:antlr.debug.ParserMatchListener" />s. 
            	You should extend this base class rather than creating your own.
            	</param>
      </remarks>
    </member>
    <member name="M:antlr.debug.ParserMatchListenerBase.doneParsing(System.Object,antlr.debug.TraceEventArgs)">
      <summary>
            Handle the "Done" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.ParserMatchListenerBase.parserMatch(System.Object,antlr.debug.MatchEventArgs)">
      <summary>
            Handle the "Match" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.ParserMatchListenerBase.parserMatchNot(System.Object,antlr.debug.MatchEventArgs)">
      <summary>
            Handle the "MatchNot" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.ParserMatchListenerBase.parserMismatch(System.Object,antlr.debug.MatchEventArgs)">
      <summary>
            Handle the "MisMatch" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.ParserMatchListenerBase.parserMismatchNot(System.Object,antlr.debug.MatchEventArgs)">
      <summary>
            Handle the "MisMatchNot" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="T:antlr.debug.TraceListenerBase">
      <summary>
            Provides an abstract base for implementing <see cref="T:antlr.debug.TraceListener" /> subclasses.
            </summary>
      <remarks>
        <param>
            	This abstract class is provided to make it easier to create <see cref="T:antlr.debug.TraceListener" />s. 
            	You should extend this base class rather than creating your own.
            	</param>
      </remarks>
    </member>
    <member name="M:antlr.debug.TraceListenerBase.doneParsing(System.Object,antlr.debug.TraceEventArgs)">
      <summary>
            Handle the "Done" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.TraceListenerBase.enterRule(System.Object,antlr.debug.TraceEventArgs)">
      <summary>
            Handle the "EnterRule" event
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.TraceListenerBase.exitRule(System.Object,antlr.debug.TraceEventArgs)">
      <summary>
            Handle the "ExitRule" event
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="T:antlr.debug.ParserTokenListenerBase">
      <summary>
            Provides an abstract base for implementing <see cref="T:antlr.debug.ParserTokenListener" /> subclasses.
            </summary>
      <remarks>
        <param>
            	This abstract class is provided to make it easier to create <see cref="T:antlr.debug.ParserTokenListener" />s. 
            	You should extend this base class rather than creating your own.
            	</param>
      </remarks>
    </member>
    <member name="M:antlr.debug.ParserTokenListenerBase.doneParsing(System.Object,antlr.debug.TraceEventArgs)">
      <summary>
            Handle the "Done" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.ParserTokenListenerBase.parserConsume(System.Object,antlr.debug.TokenEventArgs)">
      <summary>
            Handle the "Consume" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.ParserTokenListenerBase.parserLA(System.Object,antlr.debug.TokenEventArgs)">
      <summary>
            Handle the "ParserLA" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <!-- Badly formed XML comment ignored for member "T:antlr.debug.ParseTreeDebugParser" -->
    <member name="F:antlr.debug.ParseTreeDebugParser.currentParseTreeRoot">
      <summary>
            Each new rule invocation must have it's own subtree. Tokens are
            added to the current root so we must have a stack of subtree roots.
            </summary>
    </member>
    <member name="F:antlr.debug.ParseTreeDebugParser.mostRecentParseTreeRoot">
      <summary>
            Track most recently created parse subtree so that when parsing
            is finished, we can get to the root.
            </summary>
    </member>
    <member name="F:antlr.debug.ParseTreeDebugParser.numberOfDerivationSteps">
      <summary>
            For every rule replacement with a production, we bump up count.
            </summary>
    </member>
    <member name="M:antlr.debug.ParseTreeDebugParser.addCurrentTokenToParseTree">
      <summary>
            Adds LT(1) to the current parse subtree.
            </summary>
      <remarks>
        <para>
            Note that the match() routines add the node before checking for 
            correct match.  This means that, upon mismatched token, there 
            will a token node in the tree corresponding to where that token 
            was expected.  For no viable alternative errors, no node will 
            be in the tree as nothing was matched() (the lookahead failed 
            to predict an alternative).
            </para>
      </remarks>
    </member>
    <member name="M:antlr.debug.ParseTreeDebugParser.traceIn(System.String)">
      <summary>
            Create a rule node, add to current tree, and make it current root
            </summary>
      <param name="s">
      </param>
    </member>
    <member name="M:antlr.debug.ParseTreeDebugParser.traceOut(System.String)">
      <summary>
            Pop current root; back to adding to old root
            </summary>
      <param name="s">
      </param>
    </member>
    <member name="T:antlr.debug.ScannerEventSupport">
      <summary>A class to assist in firing parser events
            NOTE: I intentionally _did_not_ synchronize the event firing and
            add/remove listener methods.  This is because the add/remove should
            _only_ be called by the parser at its start/end, and the _same_thread_
            should be performing the parsing.  This should help performance a tad...
            </summary>
    </member>
    <member name="T:antlr.debug.SemanticPredicateListenerBase">
      <summary>
            Provides an abstract base for implementing <see cref="T:antlr.debug.SemanticPredicateListener" /> subclasses.
            </summary>
      <remarks>
        <param>
            	This abstract class is provided to make it easier to create <see cref="T:antlr.debug.SemanticPredicateListener" />s. 
            	You should extend this base class rather than creating your own.
            	</param>
      </remarks>
    </member>
    <member name="M:antlr.debug.SemanticPredicateListenerBase.doneParsing(System.Object,antlr.debug.TraceEventArgs)">
      <summary>
            Handle the "Done" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.SemanticPredicateListenerBase.semanticPredicateEvaluated(System.Object,antlr.debug.SemanticPredicateEventArgs)">
      <summary>
            Handle the "SemPreEvaluated" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="T:antlr.debug.SyntacticPredicateListenerBase">
      <summary>
            Provides an abstract base for implementing <see cref="T:antlr.debug.SyntacticPredicateListener" /> subclasses.
            </summary>
      <remarks>
        <param>
            	This abstract class is provided to make it easier to create <see cref="T:antlr.debug.SyntacticPredicateListener" />s. 
            	You should extend this base class rather than creating your own.
            	</param>
      </remarks>
    </member>
    <member name="M:antlr.debug.SyntacticPredicateListenerBase.doneParsing(System.Object,antlr.debug.TraceEventArgs)">
      <summary>
            Handle the "Done" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.SyntacticPredicateListenerBase.syntacticPredicateFailed(System.Object,antlr.debug.SyntacticPredicateEventArgs)">
      <summary>
            Handle the "SynPredFailed" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.SyntacticPredicateListenerBase.syntacticPredicateStarted(System.Object,antlr.debug.SyntacticPredicateEventArgs)">
      <summary>
            Handle the "SynPredStarted" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="M:antlr.debug.SyntacticPredicateListenerBase.syntacticPredicateSucceeded(System.Object,antlr.debug.SyntacticPredicateEventArgs)">
      <summary>
            Handle the "SynPredSucceeded" event.
            </summary>
      <param name="source">Event source object</param>
      <param name="e">Event data object</param>
    </member>
    <member name="T:antlr.ASTFactory">
      <summary>
            AST Support code shared by TreeParser and Parser.
            </summary>
      <remarks>
        <para>
            We use delegation to share code (and have only one 
            bit of code to maintain) rather than subclassing
            or superclassing (forces AST support code to be
            loaded even when you don't want to do AST stuff).
            </para>
        <para>
            Typically, <see cref="M:antlr.ASTFactory.setASTNodeType(System.String)" />  is used to specify the
            homogeneous type of node to create, but you can override
            <see cref="M:antlr.ASTFactory.create" />  to make heterogeneous nodes etc...
            </para>
      </remarks>
    </member>
    <member name="M:antlr.ASTFactory.#ctor">
      <summary>
            Constructs an <c>ASTFactory</c> with the default AST node type of
            <see cref="T:antlr.CommonAST" />.
            </summary>
    </member>
    <member name="M:antlr.ASTFactory.#ctor(System.String)">
      <summary>
            Constructs an <c>ASTFactory</c> and use the specified AST node type
            as the default.
            </summary>
      <param name="nodeTypeName">
            	Name of default AST node type for this factory.
            </param>
    </member>
    <member name="F:antlr.ASTFactory.defaultASTNodeTypeObject_">
      <summary>
            Stores the Type of the default AST node class to be used during tree construction.
            </summary>
    </member>
    <member name="F:antlr.ASTFactory.nodeTypeObjectList_">
      <summary>
            Stores the mapping between custom AST NodeTypes and their NodeTypeName/NodeTypeClass.
            </summary>
    </member>
    <member name="F:antlr.ASTFactory.typename2creator_">
      <summary>
            Stores the mapping between AST node typenames and their token ID.
            </summary>
    </member>
    <member name="M:antlr.ASTFactory.setTokenTypeASTNodeType(System.Int32,System.String)">
      <summary>
            Specify an "override" for the <see cref="T:antlr.collections.AST" /> type created for
            the specified Token type.
            </summary>
      <remarks>
            This method is useful for situations that ANTLR cannot oridinarily deal 
            with (i.e., when you  create a token based upon a nonliteral token symbol 
            like #[LT(1)].  This is a runtime value and ANTLR cannot determine the token 
            type (and hence the AST) statically.
            </remarks>
      <param name="tokenType">Token type to override.</param>
      <param name="NodeTypeName">
            	Fully qualified AST typename (or null to specify 
            	the factory's default AST type).
            </param>
    </member>
    <member name="M:antlr.ASTFactory.registerFactory(System.Int32,System.String)">
      <summary>
            Register an AST Node Type for a given Token type ID.
            </summary>
      <param name="NodeType">The Token type ID.</param>
      <param name="NodeTypeName">The AST Node Type to register.</param>
    </member>
    <member name="M:antlr.ASTFactory.setTokenTypeASTNodeCreator(System.Int32,antlr.ASTNodeCreator)">
      <summary>
            Register an ASTNodeCreator for a given Token type ID.
            </summary>
      <param name="NodeType">The Token type ID.</param>
      <param name="NodeTypeName">The AST Node Type to register.</param>
    </member>
    <member name="M:antlr.ASTFactory.setASTNodeCreator(antlr.ASTNodeCreator)">
      <summary>
            Register an ASTNodeCreator to be used for creating node by default.
            </summary>
      <param name="creator">The ASTNodeCreator.</param>
    </member>
    <member name="M:antlr.ASTFactory.setMaxNodeType(System.Int32)">
      <summary>
            Pre-expands the internal list of TokenTypeID-to-ASTNodeType mappings
            to the specified size.
            This is primarily a convenience method that can be used to prevent 
            unnecessary and costly re-org of the mappings list.
            </summary>
      <param name="NodeType">Maximum Token Type ID.</param>
    </member>
    <member name="M:antlr.ASTFactory.addASTChild(antlr.ASTPair,antlr.collections.AST)">
      <summary>
            Add a child to the current AST
            </summary>
      <param name="currentAST">The AST to add a child to</param>
      <param name="child">The child AST to be added</param>
    </member>
    <member name="M:antlr.ASTFactory.create">
      <summary>
            Creates a new uninitialized AST node. Since a specific AST Node Type
            wasn't indicated, the new AST node is created using the current default
            AST Node type - <see cref="F:antlr.ASTFactory.defaultASTNodeTypeObject_" /></summary>
      <returns>An uninitialized AST node object.</returns>
    </member>
    <member name="M:antlr.ASTFactory.create(System.Int32)">
      <summary>
            Creates and initializes a new AST node using the specified Token Type ID.
            The <see cref="T:System.Type" /> used for creating this new AST node is 
            determined by the following:
            <list type="bullet"><item>the current TokenTypeID-to-ASTNodeType mapping (if any) or,</item><item>the <see cref="F:antlr.ASTFactory.defaultASTNodeTypeObject_" /> otherwise</item></list></summary>
      <param name="type">Token type ID to be used to create new AST Node.</param>
      <returns>An initialized AST node object.</returns>
    </member>
    <member name="M:antlr.ASTFactory.create(System.Int32,System.String)">
      <summary>
            Creates and initializes a new AST node using the specified Token Type ID.
            The <see cref="T:System.Type" /> used for creating this new AST node is 
            determined by the following:
            <list type="bullet"><item>the current TokenTypeID-to-ASTNodeType mapping (if any) or,</item><item>the <see cref="F:antlr.ASTFactory.defaultASTNodeTypeObject_" /> otherwise</item></list></summary>
      <param name="type">Token type ID to be used to create new AST Node.</param>
      <param name="txt">Text for initializing the new AST Node.</param>
      <returns>An initialized AST node object.</returns>
    </member>
    <member name="M:antlr.ASTFactory.create(System.Int32,System.String,System.String)">
      <summary>
            Creates a new AST node using the specified AST Node Type name. Once created,
            the new AST node is initialized with the specified Token type ID and string.
            The <see cref="T:System.Type" /> used for creating this new AST node is 
            determined solely by <c>ASTNodeTypeName</c>.
            The AST Node type must have a default/parameterless constructor.
            </summary>
      <param name="type">Token type ID to be used to create new AST Node.</param>
      <param name="txt">Text for initializing the new AST Node.</param>
      <param name="ASTNodeTypeName">Fully qualified name of the Type to be used for creating the new AST Node.</param>
      <returns>An initialized AST node object.</returns>
    </member>
    <member name="M:antlr.ASTFactory.create(antlr.Token,System.String)">
      <summary>
            Creates a new AST node using the specified AST Node Type name.
            </summary>
      <param name="Token">Token instance to be used to initialize the new AST Node.</param>
      <param name="ASTNodeTypeName">
            	Fully qualified name of the Type to be used for creating the new AST Node.
            </param>
      <returns>A newly created and initialized AST node object.</returns>
      <remarks>
            Once created, the new AST node is initialized with the specified Token 
            instance. The <see cref="T:System.Type" /> used for creating this new AST 
            node is  determined solely by <c>ASTNodeTypeName</c>.
            <para>The AST Node type must have a default/parameterless constructor.</para></remarks>
    </member>
    <member name="M:antlr.ASTFactory.create(antlr.collections.AST)">
      <summary>
            Creates and initializes a new AST node using the specified AST Node instance.
            the new AST node is initialized with the specified Token type ID and string.
            The <see cref="T:System.Type" /> used for creating this new AST node is 
            determined solely by <c>aNode</c>.
            The AST Node type must have a default/parameterless constructor.
            </summary>
      <param name="aNode">AST Node instance to be used for creating the new AST Node.</param>
      <returns>An initialized AST node object.</returns>
    </member>
    <member name="M:antlr.ASTFactory.create(antlr.Token)">
      <summary>
            Creates and initializes a new AST node using the specified Token instance.
            The <see cref="T:System.Type" /> used for creating this new AST node is 
            determined by the following:
            <list type="bullet"><item>the current TokenTypeID-to-ASTNodeType mapping (if any) or,</item><item>the <see cref="F:antlr.ASTFactory.defaultASTNodeTypeObject_" /> otherwise</item></list></summary>
      <param name="tok">Token instance to be used to create new AST Node.</param>
      <returns>An initialized AST node object.</returns>
    </member>
    <member name="M:antlr.ASTFactory.dup(antlr.collections.AST)">
      <summary>
            Returns a copy of the specified AST Node instance. The copy is obtained by
            using the <see cref="T:System.ICloneable" /> method Clone().
            </summary>
      <param name="t">AST Node to copy.</param>
      <returns>An AST Node (or null if <c>t</c> is null).</returns>
    </member>
    <member name="M:antlr.ASTFactory.dupList(antlr.collections.AST)">
      <summary>
            Duplicate AST Node tree rooted at specified AST node and all of it's siblings.
            </summary>
      <param name="t">Root of AST Node tree.</param>
      <returns>Root node of new AST Node tree (or null if <c>t</c> is null).</returns>
    </member>
    <member name="M:antlr.ASTFactory.dupTree(antlr.collections.AST)">
      <summary>
            Duplicate AST Node tree rooted at specified AST node. Ignore it's siblings.
            </summary>
      <param name="t">Root of AST Node tree.</param>
      <returns>Root node of new AST Node tree (or null if <c>t</c> is null).</returns>
    </member>
    <member name="M:antlr.ASTFactory.make(antlr.collections.AST[])">
      <summary>
            Make a tree from a list of nodes.  The first element in the
            array is the root.  If the root is null, then the tree is
            a simple list not a tree.  Handles null children nodes correctly.
            For example, build(a, b, null, c) yields tree (a b c).  build(null,a,b)
            yields tree (nil a b).
            </summary>
      <param name="nodes">List of Nodes.</param>
      <returns>AST Node tree.</returns>
    </member>
    <member name="M:antlr.ASTFactory.make(antlr.collections.impl.ASTArray)">
      <summary>
            Make a tree from a list of nodes, where the nodes are contained
            in an ASTArray object.
            </summary>
      <param name="nodes">List of Nodes.</param>
      <returns>AST Node tree.</returns>
    </member>
    <member name="M:antlr.ASTFactory.makeASTRoot(antlr.ASTPair,antlr.collections.AST)">
      <summary>
            Make an AST the root of current AST.
            </summary>
      <param name="currentAST">
      </param>
      <param name="root">
      </param>
    </member>
    <member name="M:antlr.ASTFactory.setASTNodeType(System.String)">
      <summary>
            Sets the global default AST Node Type for this ASTFactory instance.
            This method also attempts to load the <see cref="T:System.Type" /> instance
            for the specified typename.
            </summary>
      <param name="t">Fully qualified AST Node Type name.</param>
    </member>
    <member name="M:antlr.ASTFactory.error(System.String)">
      <summary>
            To change where error messages go, can subclass/override this method
            and then setASTFactory in Parser and TreeParser.  This method removes
            a prior dependency on class antlr.Tool.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="T:antlr.ASTNodeCreator">
      <summary>
            A creator of AST node instances.
            </summary>
      <remarks>
        <para>
            This class and it's sub-classes exists primarily as an optimization
            of the reflection-based mechanism(s) previously used exclusively to 
            create instances of AST node objects.
            </para>
        <para>
            Parsers and TreeParsers already use the ASTFactory class in ANTLR whenever
            they need to create an AST node objeect. What this class does is to support
            performant extensibility of the basic ASTFactory. The ASTFactory can now be
            extnded as run-time to support more new AST node types without using needing
            to use reflection.
            </para>
      </remarks>
    </member>
    <member name="M:antlr.ASTNodeCreator.Create">
      <summary>
            Constructs an <see cref="T:antlr.collections.AST" /> instance.
            </summary>
    </member>
    <member name="P:antlr.ASTNodeCreator.ASTNodeTypeName">
      <summary>
            Returns the fully qualified name of the AST type that this
            class creates.
            </summary>
    </member>
    <member name="T:antlr.ASTVisitor">
      <summary>
            Summary description for ASTVisitor.
            </summary>
    </member>
    <member name="M:antlr.BaseAST.getNumberOfChildren">
      <summary>
            Get number of children of this node; if leaf, returns 0
            </summary>
      <returns>Number of children</returns>
    </member>
    <member name="M:antlr.CommonAST.CommonASTCreator.Create">
      <summary>
            Constructs a <see cref="T:antlr.collections.AST" /> instance.
            </summary>
    </member>
    <member name="P:antlr.CommonAST.CommonASTCreator.ASTNodeTypeName">
      <summary>
            Returns the fully qualified name of the AST type that this
            class creates.
            </summary>
    </member>
    <member name="M:antlr.CommonASTWithHiddenTokens.CommonASTWithHiddenTokensCreator.Create">
      <summary>
            Constructs a <see cref="T:antlr.collections.AST" /> instance.
            </summary>
    </member>
    <member name="P:antlr.CommonASTWithHiddenTokens.CommonASTWithHiddenTokensCreator.ASTNodeTypeName">
      <summary>
            Returns the fully qualified name of the AST type that this
            class creates.
            </summary>
    </member>
    <member name="M:antlr.CommonToken.CommonTokenCreator.Create">
      <summary>
            Constructs a <see cref="T:antlr.Token" /> instance.
            </summary>
    </member>
    <member name="P:antlr.CommonToken.CommonTokenCreator.TokenTypeName">
      <summary>
            Returns the fully qualified name of the Token type that this
            class creates.
            </summary>
    </member>
    <member name="M:antlr.CommonHiddenStreamToken.CommonHiddenStreamTokenCreator.Create">
      <summary>
            Constructs a <see cref="T:antlr.Token" /> instance.
            </summary>
    </member>
    <member name="P:antlr.CommonHiddenStreamToken.CommonHiddenStreamTokenCreator.TokenTypeName">
      <summary>
            Returns the fully qualified name of the Token type that this
            class creates.
            </summary>
    </member>
    <member name="T:antlr.DumpASTVisitor">
      <summary>
            Summary description for DumpASTVisitor.
            </summary>
            Simple class to dump the contents of an AST to the output 
        </member>
    <member name="M:antlr.ParseTree.getLeftmostDerivationStep(System.Int32)">
      <summary>
            Walk parse tree and return requested number of derivation steps.
            If steps less-than 0, return node text.  If steps equals 1, return derivation
            string at step.
            </summary>
      <param name="step">derivation steps</param>
      <returns>
      </returns>
    </member>
    <member name="M:antlr.ParseTree.getLeftmostDerivation(System.Text.StringBuilder,System.Int32)">
      <summary>
            Get derivation and return how many you did (less than requested for
            subtree roots.
            </summary>
      <param name="buf">string buffer</param>
      <param name="step">derivation steps</param>
      <returns>
      </returns>
    </member>
    <member name="M:antlr.ParseTreeRule.getLeftmostDerivation(System.Text.StringBuilder,System.Int32)">
      <summary>
            Do a step-first walk, building up a buffer of tokens until
            you've reached a particular step and print out any rule subroots
            insteads of descending.
            </summary>
      <param name="buf">derivation buffer</param>
      <param name="step">derivation steps</param>
      <returns>
      </returns>
    </member>
    <member name="T:antlr.TokenStreamRewriteEngine">
      <summary>
            This token stream tracks the *entire* token stream coming from
            a lexer, but does not pass on the whitespace (or whatever else
            you want to discard) to the parser.
            </summary>
      <remarks>
        <para>
            This class can then be asked for the ith token in the input stream.
            Useful for dumping out the input stream exactly after doing some
            augmentation or other manipulations.  Tokens are index from 0..n-1
            </para>
        <para>
            You can insert stuff, replace, and delete chunks.  Note that the
            operations are done lazily--only if you convert the buffer to a
            string.  This is very efficient because you are not moving data around
            all the time.  As the buffer of tokens is converted to strings, the
            toString() method(s) check to see if there is an operation at the
            current index.  If so, the operation is done and then normal string
            rendering continues on the buffer.  This is like having multiple Turing
            machine instruction streams (programs) operating on a single input tape. :)
            </para>
        <para>
            Since the operations are done lazily at toString-time, operations do not
            screw up the token index values.  That is, an insert operation at token
            index i does not change the index values for tokens i+1..n-1.
            </para>
        <para>
            Because operations never actually alter the buffer, you may always get
            the original token stream back without undoing anything.  Since
            the instructions are queued up, you can easily simulate transactions and
            roll back any changes if there is an error just by removing instructions.
            For example,
            </para>
        <example>For example:
            <code>
            TokenStreamRewriteEngine rewriteEngine = new TokenStreamRewriteEngine(lexer);
            JavaRecognizer           parser        = new JavaRecognizer(rewriteEngine);
            ...
            rewriteEngine.insertAfter("pass1", t, "foobar");}
            rewriteEngine.insertAfter("pass2", u, "start");}
            System.Console.Out.WriteLine(rewriteEngine.ToString("pass1"));
            System.Console.Out.WriteLine(rewriteEngine.ToString("pass2"));
            </code></example>
        <para>
            You can also have multiple "instruction streams" and get multiple
            rewrites from a single pass over the input.  Just name the instruction
            streams and use that name again when printing the buffer.  This could be
            useful for generating a C file and also its header file--all from the
            same buffer.
            </para>
        <para>
            If you don't use named rewrite streams, a "default" stream is used.
            </para>
        <para>
            Terence Parr, parrt@cs.usfca.edu
            University of San Francisco
            February 2004
            </para>
      </remarks>
    </member>
    <member name="F:antlr.TokenStreamRewriteEngine.tokens">
      <summary>
            Track the incoming list of tokens
            </summary>
    </member>
    <member name="F:antlr.TokenStreamRewriteEngine.programs">
      <summary>
            You may have multiple, named streams of rewrite operations.
            I'm calling these things "programs."
            Maps string (name) -&gt; rewrite (List)
            </summary>
    </member>
    <member name="F:antlr.TokenStreamRewriteEngine.lastRewriteTokenIndexes">
      <summary>
            Map string (program name) -&gt; Integer index
            </summary>
    </member>
    <member name="F:antlr.TokenStreamRewriteEngine.index">
      <summary>
            track index of tokens
            </summary>
    </member>
    <member name="F:antlr.TokenStreamRewriteEngine.stream">
      <summary>
            Who do we suck tokens from?
            </summary>
    </member>
    <member name="F:antlr.TokenStreamRewriteEngine.discardMask">
      <summary>
            Which (whitespace) token(s) to throw out
            </summary>
    </member>
    <member name="M:antlr.TokenStreamRewriteEngine.rollback(System.String,System.Int32)">
      <summary>
            Rollback the instruction stream for a program so that
            the indicated instruction (via instructionIndex) is no
            longer in the stream.
            </summary>
      <remarks>
            UNTESTED!
            </remarks>
      <param name="programName">
      </param>
      <param name="instructionIndex">
      </param>
    </member>
    <member name="M:antlr.TokenStreamRewriteEngine.deleteProgram(System.String)">
      <summary>
            Reset the program so that no instructions exist
            </summary>
      <param name="programName">
      </param>
    </member>
    <member name="M:antlr.TokenStreamRewriteEngine.addToSortedRewriteList(antlr.TokenStreamRewriteEngine.RewriteOperation)">
      <summary>
            If op.index &gt; lastRewriteTokenIndexes, just add to the end.
            Otherwise, do linear
            </summary>
      <param name="op">
      </param>
    </member>
    <member name="T:antlr.TokenWithIndex">
      <summary>
            This token tracks it's own index 0..n-1 relative to the beginning 
            of the stream. It is designed to work with 
            <see cref="T:antlr.TokenStreamRewriteEngine" /> in TokenStreamRewriteEngine.cs
            </summary>
    </member>
    <member name="M:antlr.TreeParser.panic">
      <summary>
            @deprecated as of 2.7.2. This method calls System.exit() and writes
            directly to stderr, which is usually not appropriate when
            a parser is embedded into a larger application. Since the method is
            <code>static</code>, it cannot be overridden to avoid these problems.
            ANTLR no longer uses this method internally or in generated code.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.SchemaExtender.DataConnectionExtenderBase">
      <summary>
            Represents the base type used to define in the "DataSet Extender" the 
            extended set of properties for the System.Data.Common.DbConnection derived 
            objects of typed ADO.NET DataSet.
            </summary>
      <remarks>
            General explanation of extended connection info is provided in the
            <span style="LinkTopic">Connection Information</span> topic.
            </remarks>
    </member>
    <member name="M:C1.C1DataExtender.SchemaExtender.DataConnectionExtenderBase.Invalidate">
      <summary>
            This method is called when some stored properties like DbConnection
            and ServerType should be recalculated.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataConnectionExtenderBase.AutoDetect">
      <summary>
            Gets or sets the value indicating whether property values of
            this <see cref="T:C1.C1DataExtender.SchemaExtender.DataConnectionExtenderBase" /> object are detected automatically
            for known types of database servers.
            </summary>
      <remarks>
            See See <span style="LinkTopic">Connection Information</span> for details.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataConnectionExtenderBase.IdentityColumnLastValueSelect">
      <summary>
            Gets or sets a SQL SELECT statement used to retrieve primary key
            value automatically generated on database server.
            </summary>
      <remarks>
            General explanation of extended connection info is provided in the
            <span style="LinkTopic">Connection Information</span> topic.
            <para>
            In the case of database server type that provides sequence or generator 
            object for autoincrement generation you should use a special mark
            in the statement definition to define the place for the sequence
            name: %AUTOINCREMENTSEQUENCENAME% (or its brief form: %%).
            If statement contains this mark then it will be substituted with
            the sequence name specified in the 
            <see cref="P:C1.C1DataExtender.SchemaExtender.DataTableExtender.AutoIncrementSequenceName" /> property
            before statement will be passed to server, for example when
            working against Oracle server:
            </para><para>
            SELECT %AUTOINCREMENTSEQUENCENAME%.CURRVAL FROM DUAL
            </para></remarks>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataConnectionExtenderBase.IdentityColumnRetrieveMode">
      <summary>
            Gets or sets the value indicating when the SELECT statement defined
            in the <see cref="P:C1.C1DataExtender.SchemaExtender.DataConnectionExtenderBase.IdentityColumnLastValueSelect" /> property must
            be passed to server: before INSERT command, in conjunction with 
            INSERT command (in one batch) or after it.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataConnectionExtenderBase.ServerType">
      <summary>
            Gets the type of an underlying database server represented by
            the connection which this <see cref="T:C1.C1DataExtender.SchemaExtender.DataConnectionExtenderBase" /> extends.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.SchemaExtender.DataConnectionExtenderBase.ServerTypeEnum">
      <summary>
            Describes database server types.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.SchemaExtender.DataConnectionExtenderBase.ServerTypeEnum.MSSql">
      <summary>
            Microsoft SQL Server
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.SchemaExtender.DataConnectionExtenderBase.ServerTypeEnum.Access">
      <summary>
            Microsoft Jet engine
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.SchemaExtender.DataConnectionExtenderBase.ServerTypeEnum.Oracle">
      <summary>
            Oracle SQL Server
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.SchemaExtender.DataConnectionExtenderBase.ServerTypeEnum.MySql">
      <summary>
            MySql SQL Server
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.SchemaExtender.DataConnectionExtenderBase.ServerTypeEnum.Unknown">
      <summary>
            Type of server is unknown
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.SchemaExtender.DataSetExtender">
      <summary>
            Represents a "DataSet Extender" for typed ADO.NET DataSet.
            </summary>
      <remarks>
            See <span style="LinkTopic">DataSetExtender</span> for details on
            what "DataSet Extender" is.
            </remarks>
    </member>
    <member name="M:C1.C1DataExtender.SchemaExtender.DataSetExtender.#ctor">
      <summary>
            Initializes a new <see cref="T:C1.C1DataExtender.SchemaExtender.DataSetExtender" /> object.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataSetExtender.DataSet">
      <summary>
            Gets the typed ADO.NET DataSet object that this DataSet Extender
            extends.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataSetExtender.Tables">
      <summary>
            Gets the collection of the <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" /> objects
            which extend the property set of the DataTable objects from the 
            underlying typed DataSet.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataSetExtender.ColumnStyles">
      <summary>
            Represents a global collection of column styles.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataSetExtender.ColumnStyleRules">
      <summary>
            Represents a collection of rules used to map global styles to 
            columns.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataSetExtender.ConnectionInfos">
      <summary>
            Gets the collection of global <see cref="T:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender" /> 
            objects defining the extended set of properties for connections
            used in the underlying typed DataSet.
            </summary>
      <remarks>
            See <span style="LinkTopic">Connection Information</span> topic for details
            on extended connection info.
            </remarks>
    </member>
    <member name="T:C1.C1DataExtender.SchemaExtender.C1SchemaTableCollection">
      <summary>
            Represents a collection of the <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" /> objects
            of the <see cref="T:C1.C1DataExtender.SchemaExtender.DataSetExtender" />.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.SchemaExtender.C1SchemaTableCollection.Add(C1.C1DataExtender.SchemaExtender.DataTableExtender)">
      <summary>
            This method is intended for C1DataExtender internal use only.
            </summary>
      <param name="schemaTable">
      </param>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.C1SchemaTableCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" /> at the specified index.
            </summary>
      <param name="index">
            An index.
            </param>
      <returns>
            A <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" /> object.
            </returns>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.C1SchemaTableCollection.Item(System.String)">
      <summary>
            Gets the <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" /> object by the name of
            DataTable that it represents.
            </summary>
      <param name="tableName">
            A <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" /> object or a null value in case
            if there is no such an object.
            </param>
      <returns>
            A <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" /> object.
            </returns>
    </member>
    <member name="T:C1.C1DataExtender.SchemaExtender.DataColumnExtender">
      <summary>
            Represents an object that defines the extended property set for
            the typed DataColumn in the "DataSet Extender".
            </summary>
      <remarks>
            See <span style="LinkTopic">DataSetExtender</span> for details on
            what "DataSet Extender" is.
            </remarks>
    </member>
    <member name="M:C1.C1DataExtender.SchemaExtender.DataColumnExtender.#ctor">
      <summary>
            This constructor is intended for C1DataExtender internal use only.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataColumnExtender.SchemaTable">
      <summary>
            Gets the owning <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" />.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataColumnExtender.DataColumn">
      <summary>
            Gets the DataColumn which property set this 
            <see cref="T:C1.C1DataExtender.SchemaExtender.DataColumnExtender" /> extends.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataColumnExtender.ConstraintExpression">
      <summary>
            Defines a column level constraint for the DataColumn 
            represented by this <see cref="T:C1.C1DataExtender.SchemaExtender.DataColumnExtender" />.
            </summary>
      <remarks>
            See <span style="LinkTopic">Defining Constraints</span> topic
            for details.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataColumnExtender.CalculationExpression">
      <summary>
            Defines an expression used to calculate a value of 
            <see cref="T:C1.C1DataExtender.C1ViewColumn" /> objects based on the System.DataColumn
            represented by this <see cref="T:C1.C1DataExtender.SchemaExtender.DataColumnExtender" />.
            </summary>
      <remarks>
            See <span style="LinkTopic">Defining Column value calculations</span> topic
            for details.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataColumnExtender.ColumnStyle">
      <summary>
            Represents Column Style definition - 
            a set of properties that affects column data 
            representation in ComponentOne user interface controls.
            </summary>
      <remarks>
            See <span style="LinkTopic">Defining Column Styles</span> topic for details.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataColumnExtender.RowDisplayValue">
      <summary>
            Gets or sets value indicating whether this column is included
            in the set of columns representing a table rows in lookup
            list.
            </summary>
      <remarks>
            This property value indicates whether this column is
            included in the 
            <see cref="!:DataTableExtender.RowDisplay.RowDisplayColumns" />
            collection. See <see cref="P:C1.C1DataExtender.RowDisplayBase.RowDisplayColumns" />
            description for details.
            </remarks>
    </member>
    <member name="T:C1.C1DataExtender.SchemaExtender.DataTableConnectionExtender">
      <summary>
            Represents connection info object of <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" /> defining 
            the extended set of properties for a connection of underlying typed
            DataSet used along with DataTable represented by the 
            <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" />.
            </summary>
      <remarks>
            See <span style="LinkTopic">Connection Information</span> topic for details
            on extended connection info.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataTableConnectionExtender.AutoDetect">
      <summary>
            Overrides the <see cref="P:C1.C1DataExtender.SchemaExtender.DataConnectionExtenderBase.AutoDetect" /> property.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataTableConnectionExtender.BaseConnection">
      <summary>
            Gets or sets the instance of <see cref="T:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender" /> object
            (from the <see cref="P:C1.C1DataExtender.SchemaExtender.DataSetExtender.ConnectionInfos" /> collection) which
            property values are inherited by this 
            <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableConnectionExtender" />.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender">
      <summary>
            Represents a DataSet Extender global connection info object defining the 
            extended set of properties for a connection of underlying typed
            DataSet.
            </summary>
      <remarks>
            See <span style="LinkTopic">Connection Information</span> topic for details
            on extended connection info.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender.RepresentsDataSetConnection">
      <summary>
            Gets or sets the connection string used to identify the connection
            from underlying typed DataSet represented by this 
            <see cref="T:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender" />.
            </summary>
      <remarks>
            DbConnection derived objects defined in typed DataSet Table Adapters
            has no a notion like "unique name", so to identify such a connection
            the DbConnection.ConnectionString property value is used.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender.ConnectionName">
      <summary>
            Gets or sets the unique name of the <see cref="T:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender" />
            in the <see cref="P:C1.C1DataExtender.SchemaExtender.DataSetExtender.ConnectionInfos" /> collection.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.SchemaExtender.DataSetConnectionCollection">
      <summary>
            Represents the collection of global <see cref="T:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender" />
            objects of <see cref="T:C1.C1DataExtender.SchemaExtender.DataSetExtender" />.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.SchemaExtender.DataSetConnectionCollection.Add(C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender)">
      <summary>
            Adds the specified <see cref="T:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender" /> to the collection.
            </summary>
      <param name="connection">
            The <see cref="T:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender" /> object to add.
            </param>
      <returns>
            An index of newly added <see cref="T:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender" /> object
            in the collection.
            </returns>
    </member>
    <member name="M:C1.C1DataExtender.SchemaExtender.DataSetConnectionCollection.Remove(C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender)">
      <summary>
            Removes the specified <see cref="T:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender" /> from 
            the collection.
            </summary>
      <param name="connection">
            The <see cref="T:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender" /> object to remove.
            </param>
    </member>
    <member name="M:C1.C1DataExtender.SchemaExtender.DataSetConnectionCollection.IndexOf(C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender)">
      <summary>
            Gets an index of the specified <see cref="T:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender" />
            object.
            </summary>
      <param name="connection">
            The <see cref="T:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender" /> object to find.
            </param>
      <returns>
            If the specified <see cref="T:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender" /> object is
            contained in the collection then returns its index; otherwise, -1.
            </returns>
    </member>
    <member name="M:C1.C1DataExtender.SchemaExtender.DataSetConnectionCollection.IndexOf(System.String)">
      <summary>
            Gets an index of <see cref="T:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender" /> in the collection
            by its <see cref="P:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender.ConnectionName" />.
            </summary>
      <param name="connectionName">
            The value corresponding to 
            <see cref="P:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender.ConnectionName" />.
            </param>
      <returns>
            If the object with the specified 
            <see cref="P:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender.ConnectionName" /> exists
            then returns its index; otherwise, -1.
            </returns>
    </member>
    <member name="M:C1.C1DataExtender.SchemaExtender.DataSetConnectionCollection.IndexOfConnectionString(System.String)">
      <summary>
            Gets an index of <see cref="T:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender" /> in the collection
            by its <see cref="P:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender.RepresentsDataSetConnection" />.
            </summary>
      <param name="dbConnectionString">
            The value corresponding to 
            <see cref="P:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender.RepresentsDataSetConnection" />.
            </param>
      <returns>
            If the object with the specified 
            <see cref="P:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender.RepresentsDataSetConnection" /> exists
            then returns its index; otherwise, -1.
            </returns>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataSetConnectionCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender" /> object at the specified
            index.
            </summary>
      <param name="index">
            An index of <see cref="T:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender" />.
            </param>
      <returns>
            A <see cref="T:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender" />.
            </returns>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataSetConnectionCollection.Item(System.String)">
      <summary>
            Gets the <see cref="T:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender" /> object by its
            <see cref="P:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender.ConnectionName" />.
            </summary>
      <param name="connectionName">
            A <see cref="P:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender.ConnectionName" /></param>
      <returns>
            A <see cref="T:C1.C1DataExtender.SchemaExtender.DataSetConnectionExtender" /> if exists; otherwise, a null value.
            </returns>
    </member>
    <member name="T:C1.C1DataExtender.SchemaExtender.DataTableExtender">
      <summary>
            Represents an object that defines the extended property set for
            the typed DataTable in the "DataSet Extender".
            </summary>
      <remarks>
            See <span style="LinkTopic">DataSetExtender</span> for details on
            what "DataSet Extender" is.
            </remarks>
    </member>
    <member name="M:C1.C1DataExtender.SchemaExtender.DataTableExtender.#ctor">
      <summary>
            This constructor is intended for C1DataExtender internal use only.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataTableExtender.DataSchema">
      <summary>
            Gets the <see cref="T:C1.C1DataExtender.SchemaExtender.DataSetExtender" /> that this 
            <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" /> belongs to.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataTableExtender.DataTable">
      <summary>
            Gets the DataTable which property set this 
            <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" /> extends.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataTableExtender.Columns">
      <summary>
            Gets the collection of <see cref="T:C1.C1DataExtender.SchemaExtender.DataColumnExtender" /> objects
            that extends the property set of DataColumn objects belonging
            to <see cref="P:C1.C1DataExtender.SchemaExtender.DataTableExtender.DataTable" />.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataTableExtender.AllowNew">
      <summary>
            Gets or sets a value indicating whether new rows can be added
            to the DataTable represented by this <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" />.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataTableExtender.AllowDelete">
      <summary>
            Gets or sets a value indicating whether rows can be deleted
            from the DataTable represented by this <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" />.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataTableExtender.AllowEdit">
      <summary>
            Gets or sets a value indicating whether row values in the DataTable 
            represented by this <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" /> can be modified.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataTableExtender.ConstraintExpression">
      <summary>
            Defines a row level constraint for the DataTable 
            represented by this <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" />.
            </summary>
      <remarks>
            See <span style="LinkTopic">Defining Constraints</span> topic
            for details.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataTableExtender.RowDisplay">
      <summary>
            Defines a pattern used to construct a string that represents
            a table row in lookup list.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataTableExtender.ConnectionInfo">
      <summary>
            Gets the object defining the extended set of properties for
            the connection used along with the DataTable represented by
            this <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" />.
            </summary>
      <remarks>
            See <span style="LinkTopic">Connection Information</span> topic for details
            on extended connection info.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataTableExtender.AutoIncrementSequenceName">
      <summary>
            Gets or sets the name of a sequence or generator database object used 
            for autoincrement on the server. 
            </summary>
      <remarks>
            This property is used to enable autoincrement key field functionality 
            in databases like Oracle that support special database objects used 
            to generate unique (autoincrementing) values.
            <para>
            Its value is used if statement defined in the
            <see cref="P:C1.C1DataExtender.SchemaExtender.DataConnectionExtenderBase.IdentityColumnLastValueSelect" /> property
            of the <see cref="P:C1.C1DataExtender.SchemaExtender.DataTableExtender.ConnectionInfo" /> has a mark indicating that
            autoincrement sequence name must be inserted there.
            </para></remarks>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataTableExtender.AutoFetchParentsForOrphans">
      <summary>
            Indicates whether automatic fetching of an absent on a client parent row 
            for an existing child row is permitted in order to prevent foreign key
            constraint violation in the underlying DataSet.
            </summary>
      <remarks>
            See the <see cref="P:C1.C1DataExtender.C1DataViewSet.AutoFetchParentsForOrphans" />
            property description for details.
            </remarks>
    </member>
    <member name="T:C1.C1DataExtender.SchemaExtender.C1SchemaColumnCollection">
      <summary>
            Represents a collection of the <see cref="T:C1.C1DataExtender.SchemaExtender.DataColumnExtender" /> objects
            of the <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" />.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.SchemaExtender.C1SchemaColumnCollection.Add(C1.C1DataExtender.SchemaExtender.DataColumnExtender)">
      <summary>
            This method is intended for C1DataExtender internal use only.
            </summary>
      <param name="schemaColumn">
      </param>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.C1SchemaColumnCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:C1.C1DataExtender.SchemaExtender.DataColumnExtender" /> object at the specified index.
            </summary>
      <param name="index">
            An index of <see cref="T:C1.C1DataExtender.SchemaExtender.DataColumnExtender" />.
            </param>
      <returns>
            A <see cref="T:C1.C1DataExtender.SchemaExtender.DataColumnExtender" /> object.
            </returns>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.C1SchemaColumnCollection.Item(System.String)">
      <summary>
            Gets the <see cref="T:C1.C1DataExtender.SchemaExtender.DataColumnExtender" /> object by the name of DataColumn
            object that it represents.
            </summary>
      <param name="columnName">
            The name of DataColumn.
            </param>
      <returns>
            A <see cref="T:C1.C1DataExtender.SchemaExtender.DataColumnExtender" /> object if exists; otherwise, a null 
            value.
            </returns>
    </member>
    <member name="T:C1.C1DataExtender.SchemaExtender.DataSchemaColumnStyle">
      <summary>
            Represents Column Style definition for <see cref="T:C1.C1DataExtender.SchemaExtender.DataColumnExtender" /> - 
            a set of properties that affects <see cref="T:C1.C1DataExtender.C1ViewColumn" /> data 
            representation in ComponentOne user interface controls.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.SchemaExtender.DataSchemaGlobalColumnStyle">
      <summary>
            Represents a global Column Style definition for 
            <see cref="T:C1.C1DataExtender.SchemaExtender.DataSetExtender" /> - 
            a set of properties that affects <see cref="T:C1.C1DataExtender.C1ViewColumn" /> data 
            representation in ComponentOne user interface controls.
            </summary>
      <remarks>
            The style objects represented by this class are items of
            <see cref="P:C1.C1DataExtender.SchemaExtender.DataSetExtender.ColumnStyles" /> collection. These styles
            are used as base styles for any style of <see cref="T:C1.C1DataExtender.SchemaExtender.DataColumnExtender" />
            and <see cref="T:C1.C1DataExtender.C1DataViewSet" />.
            </remarks>
    </member>
    <member name="T:C1.C1DataExtender.SchemaExtender.DataSchemaColumnStyleCollection">
      <summary>
            Represents a collection of <see cref="T:C1.C1DataExtender.SchemaExtender.DataSchemaGlobalColumnStyle" />
            objects for the <see cref="P:C1.C1DataExtender.SchemaExtender.DataSetExtender.ColumnStyles" /> property.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataSchemaColumnStyleCollection.Item(System.Int32)">
      <summary>
            Gets a <see cref="T:C1.C1DataExtender.SchemaExtender.DataSchemaGlobalColumnStyle" /> at the specified
            index.
            </summary>
      <param name="index">
            An index of <see cref="T:C1.C1DataExtender.SchemaExtender.DataSchemaGlobalColumnStyle" />.
            </param>
      <returns>
            A <see cref="T:C1.C1DataExtender.SchemaExtender.DataSchemaGlobalColumnStyle" />.
            </returns>
    </member>
    <member name="P:C1.C1DataExtender.SchemaExtender.DataSchemaColumnStyleCollection.Item(System.String)">
      <summary>
            Gets a <see cref="T:C1.C1DataExtender.SchemaExtender.DataSchemaGlobalColumnStyle" /> with the specified
            name.
            </summary>
      <param name="name">
            A name of <see cref="T:C1.C1DataExtender.SchemaExtender.DataSchemaGlobalColumnStyle" />.
            </param>
      <returns>
            A <see cref="T:C1.C1DataExtender.SchemaExtender.DataSchemaGlobalColumnStyle" /> with the specified name
            if exists; otherwise, a null value.
            </returns>
    </member>
    <member name="T:C1.C1DataExtender.SchemaExtender.SchemaRowDisplay">
      <summary>
            Defines a pattern used to construct a string that represents
            a table row in lookup list.
            </summary>
      <remarks>
            In the case when a <see cref="T:C1.C1DataExtender.C1ViewColumn" /> represents a foreign key
            column and its <see cref="!:C1ViewColumn.ColumnStyle.ItemListType" />
            property is set to <see cref="F:C1.C1DataExtender.ItemListTypeEnum.ForeignKey" />, a text
            of items of a lookup list is constructed based on the definition
            provided by <see cref="P:C1.C1DataExtender.SchemaExtender.DataTableExtender.RowDisplay" /> propery
            value which is an object of <see cref="T:C1.C1DataExtender.SchemaExtender.SchemaRowDisplay" /> class,
            where <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" /> object is the one that 
            represents a DataTable that is a parent for those foreign key.
            </remarks>
    </member>
    <member name="T:C1.C1DataExtender.C1DataView">
      <summary>
            Represents a customized view of a DataTable (single or multiple joined 
            tables) destined for user interface controls binding, sorting, filtering, searching, 
            navigation and editing. 
            </summary>
      <remarks>
            In order to make C1DataView operable, you should add it to the 
            <see cref="P:C1.C1DataExtender.C1DataViewSet.Views" /> collection and set its definition statement
            in the <see cref="P:C1.C1DataExtender.C1DataView.Definition" /> property, see 
            <span style="LinkTopic">C1DataView Definitions</span> topic for details.
            <para>
            In design time you could use C1DataViewSet Editor to define views and
            their definitions.
            </para></remarks>
    </member>
    <member name="M:C1.C1DataExtender.C1DataView.#ctor(C1.C1DataExtender.C1DataViewSet)">
      <summary>
            Initializes a new instance of <see cref="T:C1.C1DataExtender.C1DataView" /> object
            and adds it to the <see cref="P:C1.C1DataExtender.C1DataViewSet.Views" /> collection
            of the specified <see cref="T:C1.C1DataExtender.C1DataViewSet" />.
            </summary>
      <param name="viewSet">
            A <see cref="T:C1.C1DataExtender.C1DataViewSet" /> object to which new instance of
            <see cref="T:C1.C1DataExtender.C1DataView" /> will be added. If a null value is specified
            then <see cref="T:C1.C1DataExtender.C1DataView" /> will not belong to any 
            <see cref="T:C1.C1DataExtender.C1DataViewSet" />.
            </param>
      <remarks>
            After <see cref="T:C1.C1DataExtender.C1DataView" /> has been created and added to
            a <see cref="T:C1.C1DataExtender.C1DataViewSet" />, you should set its definition statements
            in the <see cref="P:C1.C1DataExtender.C1DataView.Definition" /> property. See 
            <span style="LinkTopic">C1DataView Definitions</span> topic for details.
            </remarks>
    </member>
    <member name="M:C1.C1DataExtender.C1DataView.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:C1.C1DataExtender.C1DataView" /> object.
            </summary>
      <remarks>
            After <see cref="T:C1.C1DataExtender.C1DataView" /> has been created, you should add it to 
            the <see cref="P:C1.C1DataExtender.C1DataViewSet.Views" /> collection and set its definition 
            statement in the <see cref="P:C1.C1DataExtender.C1DataView.Definition" /> property, see 
            <span style="LinkTopic">C1DataView Definitions</span> topic for details.
            </remarks>
    </member>
    <member name="M:C1.C1DataExtender.C1DataView.Fill">
      <summary>
            Re-fetch data represented by this <see cref="T:C1.C1DataExtender.C1DataView" /> from 
            database server.
            </summary>
      <remarks>
            This method is equivalent to C1DataView.Fill(False).
            </remarks>
    </member>
    <member name="M:C1.C1DataExtender.C1DataView.Fill(System.Boolean)">
      <summary>
            Re-fetch data represented by this <see cref="T:C1.C1DataExtender.C1DataView" /> from 
            database server, optionally refetching a data for foreign key lookup
            tables.
            </summary>
      <remarks>
            This method re-fetch rows of base DataTable objects and rebuild
            this C1DataViewSet's rowset accordingly. It doesn't clear base tables
            rows before filling, instead it refreshes client rowsets with
            a data fetched from server in the following way: for each row
            retrieved from server it finds the existing client DataRow with the same 
            primary key, if such a row has not been found then adds a new DataRow
            to DataTable. If DataRow has been found and if it has not been modified
            since it was fetched first time (DataRow.RowState == 
            DataRowState.Unchanged) then its data is refreshed with the values
            retrieved from server; otherwise, if row has been changed then it
            stays untouched.
            <para>
            The <paramref name="includingLookupTables" /> indicates whether 
            foreign key lookup tables of this C1DataView should be re-fetched.
            It has an effect only for view columns that represents a foreign key 
            DataColumn and has the <see cref="!:ColumnStyle.ItemListType" /> property 
            set to <see cref="F:C1.C1DataExtender.ItemListTypeEnum.ForeignKey" />.
            See the <span style="LinkTopic">Data Fetching</span> topic for
            details.
            </para></remarks>
      <param name="includingLookupTables">
            Indicates whether foreign key lookup tables should be re-fetched.
            </param>
    </member>
    <member name="M:C1.C1DataExtender.C1DataView.Fill(System.Boolean,System.Boolean)">
      <summary>
            Re-fetch data represented by this <see cref="T:C1.C1DataExtender.C1DataView" /> from 
            database server, optionally refetching a data for foreign key lookup
            tables.
            </summary>
      <param name="includingLookupTables">
            Indicates whether foreign key lookup tables should be re-fetched.
            </param>
      <param name="forceFetch">
            Indicates whether data should be fetched even it has been fetched
            before by fetch requests from another views.
            </param>
    </member>
    <member name="M:C1.C1DataExtender.C1DataView.ShowQueryBuilder">
      <summary>
            Shows the view definition query builder in a modal window.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.C1DataView.ShowQueryBuilder(System.Windows.Forms.IWin32Window)">
      <summary>
            Shows the view definition query builder in a modal window with the specified owner.
            </summary>
      <param name="ownerWindow">
            The window that will own the query builder window.
            </param>
    </member>
    <member name="M:C1.C1DataExtender.C1DataView.AddNew">
      <summary>
            Adds a new row to this <see cref="T:C1.C1DataExtender.C1DataView" />.
            </summary>
      <returns>
            A newly added <see cref="T:C1.C1DataExtender.C1ViewRow" />.
            </returns>
      <remarks>
            See the <span style="LinkTopic">Composite View Definition</span> topic 
            for details on row editing.
            </remarks>
    </member>
    <member name="M:C1.C1DataExtender.C1DataView.Delete(System.Int32)">
      <summary>
            Deletes <see cref="T:C1.C1DataExtender.C1ViewRow" /> at the specified index.
            </summary>
      <param name="index">
            A zero-based index of the deleting <see cref="T:C1.C1DataExtender.C1ViewRow" />.
            </param>
    </member>
    <member name="M:C1.C1DataExtender.C1DataView.Find(System.Object)">
      <summary>
            Finds a row in this <see cref="T:C1.C1DataExtender.C1DataView" /> by the specified sort 
            key value.
            </summary>
      <param name="sortKey">
            A sort key value to search. This value corresponds to the first
            column of sort key which is specified in the <see cref="P:C1.C1DataExtender.C1DataView.Sort" />
            property.
            If the System.Type of the value differs from the 
            <see cref="P:C1.C1DataExtender.C1ViewColumn.DataType" /> of the corresponding sort key 
            column then this value will be converted to the column target type
            automatically. In the case where such a conversion is impossible an exception
            will be raised.
            </param>
      <returns>
            An index of the row if it was found; otherwise a negative number, 
            which is the bitwise complement of the index of the next row which key 
            is larger than specified.
            </returns>
      <remarks>
            Finds a row in the C1DataView by the specified sort key value and
            returns its index or, in the case that a row is not found, a negative number, 
            which is the bitwise complement of the index of the next row which key 
            is larger than specified.
            If a row has been found and there are multiple rows with the specified
            sort key then an accidental row index that matches the search criteria
            is returned.
            </remarks>
    </member>
    <member name="M:C1.C1DataExtender.C1DataView.Find(System.Object[],C1.C1DataExtender.DuplicateKeyOccurenceEnum)">
      <summary>
            Finds a row in this <see cref="T:C1.C1DataExtender.C1DataView" /> by the specified sort 
            key value.
            </summary>
      <remarks>
            Finds a row in the C1DataView by the specified sort key value and
            returns its index or, in the case that a row is not found, a negative number, 
            which is the bitwise complement of the index of the next row which key 
            is larger than specified.
            The length of the specified sort key can be less then number of
            sort columns specified in the <see cref="P:C1.C1DataExtender.C1DataView.Sort" /> property.
            If a row has been found and there are multiple rows with the specified
            sort key, the <paramref name="duplicateKeyOccurence" />  parameter 
            specifies what row from
            the set of these rows to return. Note that setting it to
            <see cref="F:C1.C1DataExtender.DuplicateKeyOccurenceEnum.Accidental" /> gives faster search 
            than <see cref="F:C1.C1DataExtender.DuplicateKeyOccurenceEnum.First" /> or 
            <see cref="F:C1.C1DataExtender.DuplicateKeyOccurenceEnum.Last" />.
            </remarks>
      <param name="sortKey">
            An array of sort key values. The order of values in the array must
            correspond to the order of columns specified in the <see cref="P:C1.C1DataExtender.C1DataView.Sort" />
            property. 
            If the System.Type of some array value differs from the 
            <see cref="P:C1.C1DataExtender.C1ViewColumn.DataType" /> of the corresponding sort key 
            column then this value will be converted to the column's target type
            automatically. In the case where such a conversion is impossible, an exception
            will be raised.
            </param>
      <param name="duplicateKeyOccurence">
            Specify which row occurrence to return in the case of multiple
            rows with the same sort key value: first, last or accidental.
            </param>
      <returns>
            An index of the row if it was found; otherwise a negative number, 
            which is the bitwise complement of the index of the next row which key 
            is larger than specified.
            </returns>
    </member>
    <member name="M:C1.C1DataExtender.C1DataView.Find(System.Object[])">
      <summary>
            Finds a row in this <see cref="T:C1.C1DataExtender.C1DataView" /> by the specified sort 
            key value.
            </summary>
      <param name="sortKey">
            An array of sort key values. The order of values in the array must
            correspond to the order of columns specified in the <see cref="P:C1.C1DataExtender.C1DataView.Sort" />
            property.
            If the System.Type of some array value differs from the 
            <see cref="P:C1.C1DataExtender.C1ViewColumn.DataType" /> of the corresponding sort key 
            column then this value will be converted to the column's target type
            automatically. In the case where such a conversion is impossible, an exception
            will be raised.
            </param>
      <returns>
            An index of the row if it was found; otherwise a negative number, 
            which is the bitwise complement of the index of the next row which key 
            is larger than specified.
            </returns>
      <remarks>
            Finds a row in the C1DataView by the specified sort key value and
            returns its index or, in the case that a row is not found, a negative number, 
            which is the bitwise complement of the index of the next row which key 
            is larger than specified.
            The length of the specified sort key can be less then number of
            sort columns specified in the <see cref="P:C1.C1DataExtender.C1DataView.Sort" /> property.
            If a row has been found and there are multiple rows with the specified
            sort key then an accidental row index that matches the search criteria
            is returned.
            </remarks>
    </member>
    <member name="M:C1.C1DataExtender.C1DataView.FindByPrimaryKey(System.Object)">
      <summary>
            Finds a row in this <see cref="T:C1.C1DataExtender.C1DataView" /> by the specified primary 
            key value.
            </summary>
      <param name="key">
            A primary key value. The <see cref="P:C1.C1DataExtender.C1DataView.PrimaryKey" /> property must
            contain a single <see cref="T:C1.C1DataExtender.C1ViewColumn" />.
            If the System.Type of the value differs from the 
            <see cref="P:C1.C1DataExtender.C1ViewColumn.DataType" /> of the corresponding primary key 
            column then this value will be converted to the column's target type
            automatically. In the case where such a conversion is impossible, an exception
            will be raised.
            </param>
      <returns>
            An index of found row or -1 if row has not been found.
            </returns>
    </member>
    <member name="M:C1.C1DataExtender.C1DataView.FindByPrimaryKey(System.Object[])">
      <summary>
            Finds a row in this <see cref="T:C1.C1DataExtender.C1DataView" /> by the specified primary 
            key value.
            </summary>
      <param name="key">
            An array of primary key values. The length and order of values of the 
            array must be the same as in the <see cref="P:C1.C1DataExtender.C1DataView.PrimaryKey" /> property.
            If the System.Type of some array value differs from the 
            <see cref="P:C1.C1DataExtender.C1ViewColumn.DataType" /> of the corresponding primary key 
            column then this value will be converted to the column's target type
            automatically. In the case where such a conversion is impossible, an exception
            will be raised.
            </param>
      <returns>
            An index of found row or -1 if row has not been found.
            </returns>
    </member>
    <member name="M:C1.C1DataExtender.C1DataView.Find(System.String[],System.Object[])">
      <summary>
            Finds a row in this <see cref="T:C1.C1DataExtender.C1DataView" /> by the specified values
            of the specified columns.
            </summary>
      <param name="columnNames">
            An array of column names to search on.
            </param>
      <param name="columnValues">
            An array of values of the columns specified in the 
            <paramref name="columnNames" /> parameter. The length and order
            of values must correspond to column names specified in the
            <paramref name="columnNames" /> parameter.
            If the System.Type of some array value differs from the 
            <see cref="P:C1.C1DataExtender.C1ViewColumn.DataType" /> of the corresponding  
            column then this value will be converted to the column's target type
            automatically. In the case where such a conversion is impossible, an exception
            will be raised.
            </param>
      <returns>
            An index of found row or -1 if row has not been found.
            </returns>
      <remarks>
            This method investigates the passed set of columns before
            performing a search.
            If columnNames matches subkey of primary key or sort key then performs
            quick search by the corresponding key; otherwise, performs
            linear search.
            </remarks>
    </member>
    <member name="M:C1.C1DataExtender.C1DataView.Reset">
      <summary>
            Rebuilds the Rows collection and sends Reset notification.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.C1DataView.GetEnumerator">
      <summary>
            Gets a <see cref="T:C1.C1DataExtender.C1ViewRow" /> enumerator for this 
            <see cref="T:C1.C1DataExtender.C1DataView" />.
            </summary>
      <returns>
            An IEnumerator for navigating throw the list of <see cref="T:C1.C1DataExtender.C1ViewRow" />
            objects.
            </returns>
    </member>
    <member name="M:C1.C1DataExtender.C1DataView.CreateCrudeRow">
      <summary>
            Creates a crude row object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1DataExtender.C1DataView.GetRowType">
      <summary>
            Returns a base type of this view rows.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:C1.C1DataExtender.C1DataView.ViewSet">
      <summary>
            Gets the <see cref="T:C1.C1DataExtender.C1DataViewSet" /> object that this 
            <see cref="T:C1.C1DataExtender.C1DataView" /> belongs to.
            </summary>
      <value>
            If this <see cref="T:C1.C1DataExtender.C1DataView" /> is added to the 
            <see cref="P:C1.C1DataExtender.C1DataViewSet.Views" /> collection, returns the
            <see cref="T:C1.C1DataExtender.C1DataViewSet" /> that this C1DataView belongs to,
            otherwise returns a null value.
            </value>
    </member>
    <member name="P:C1.C1DataExtender.C1DataView.ViewName">
      <summary>
            Gets or sets the name of the <see cref="T:C1.C1DataExtender.C1DataView" />.
            </summary>
      <remarks>
            This property value should be assigned to the DataMember property 
            of data bound control (while the control's DataSource property 
            references <see cref="T:C1.C1DataExtender.C1DataViewSet" /> that this <see cref="T:C1.C1DataExtender.C1DataView" />
            belongs to) to connect that control to this view.
            <para>
            It also can be used to find this view by name in the 
            <see cref="P:C1.C1DataExtender.C1DataViewSet.Views" /> collection.
            </para><para>
            If this property value was not set explicitly, <see cref="T:C1.C1DataExtender.C1DataView" />
            generates its unique name automatically.
            </para></remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1DataView.Definition">
      <summary>
            Gets or sets view definition statement.
            </summary>
      <remarks>
            See the <span style="LinkTopic">C1DataView Definitions</span> 
            topic for details on view definition language.
            <para>
            If this property value is empty or contains a definition statement
            that has syntactic or semantic errors then view is inactive, that is
            represents neither columns nor rows.
            </para></remarks>
      <example>
            The following example uses a button control to update the view's 
            definition at run time:
            <list type="bullet"><item><term /><description>
            Visual Basic
            <code>
            Private Sub Button1_Click(sender As Object, e As EventArgs)
                 C1DataViewSet1.Views(0).Definition = TextBox1.Text
            End Sub 
            </code></description></item><item><term /><description>
            C#
            <code>
            private void button1_Click(object sender, EventArgs e)
            {
                C1DataViewSet1.Views[0].Definition = textBox1.Text;
            }
            </code></description></item></list></example>
    </member>
    <member name="P:C1.C1DataExtender.C1DataView.DefinitionModel">
      <summary>
            Represents an object model for the definition statement assigned to the 
            <see cref="P:C1.C1DataExtender.C1DataView.Definition" /> property.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1DataView.BaseTables">
      <summary>
            Gets the collection of System.Data.DataTable objects referenced
            in the <see cref="P:C1.C1DataExtender.C1DataView.Definition" /> property.
            </summary>
      <remarks>
            Tables can be retrieved from the collection by index or by table alias
            specified in <see cref="P:C1.C1DataExtender.C1DataView.Definition" />. If alias for a table has not 
            been defined explicitly in the definition statement then table name
            should be used (it is treated as an alias).
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1DataView.BaseSchemaTables">
      <summary>
            Gets the collection of <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" /> objects from
            the <see cref="P:C1.C1DataExtender.C1DataViewSet.SchemaExtender" /> of the owning 
            <see cref="T:C1.C1DataExtender.C1DataViewSet" /> that extends System.Data.DataTable objects
            from the <see cref="P:C1.C1DataExtender.C1DataView.BaseTables" /> collection.
            </summary>
      <remarks>
        <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" /> objects in this collection has the same
            order as corresponding System.Data.DataTable objects
            from the <see cref="P:C1.C1DataExtender.C1DataView.BaseTables" /> collection.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1DataView.Columns">
      <summary>
            Gets the collection of <see cref="T:C1.C1DataExtender.C1ViewColumn" /> objects that
            belong to this <see cref="T:C1.C1DataExtender.C1DataView" />.
            </summary>
      <remarks>
            The set of columns represented by <see cref="T:C1.C1DataExtender.C1DataView" /> is
            defined as a part of view definition statement 
            (see <see cref="P:C1.C1DataExtender.C1DataView.Definition" />).
            C1DataViewSet can make the following forced corrections to the final 
            set of columns:
            <list type="bullet"><item><term /><description>
            Columns that are in the primary key of <see cref="T:C1.C1DataExtender.C1DataView" />
            are included in the list of columns even if they are not specified
            in the definition statement.
            </description></item><item><term /><description>
            For joined DataTable objects in composite view, columns that 
            are in the child key of DataRelation that join is based on are
            not included in the final set of view columns even if they are 
            explicitly specified in the definition statement.
            </description></item></list></remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1DataView.Item(System.Int32)">
      <summary>
            Returns a <see cref="T:C1.C1DataExtender.C1ViewRow" /> object at the specified index.
            </summary>
      <param name="index">
            The zero-based index of the <see cref="T:C1.C1DataExtender.C1ViewRow" /> to get.
            </param>
      <returns>
            A <see cref="T:C1.C1DataExtender.C1ViewRow" />.
            </returns>
    </member>
    <member name="P:C1.C1DataExtender.C1DataView.Count">
      <summary>
            Returns a number of rows in the <see cref="T:C1.C1DataExtender.C1DataView" />.
            </summary>
      <remarks>
            This property returns value with regards to <see cref="P:C1.C1DataExtender.C1DataView.RowFilter" />
            and master-detail relationship for a detail view.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1DataView.Current">
      <summary>
            Returns the current <see cref="T:C1.C1DataExtender.C1ViewRow" /> of 
            the System.Windows.Forms.CurrencyManager that services this
            <see cref="T:C1.C1DataExtender.C1DataView" />.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1DataView.Position">
      <summary>
            Returns the position of current <see cref="T:C1.C1DataExtender.C1ViewRow" /> in 
            the System.Windows.Forms.CurrencyManager that services this
            <see cref="T:C1.C1DataExtender.C1DataView" />.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1DataView.AllowNew">
      <summary>
            Gets or sets a value indicating whether addition of new rows is
            permitted for this <see cref="T:C1.C1DataExtender.C1DataView" />.
            </summary>
      <remarks>
            This property value is inherited by default from the 
            <see cref="P:C1.C1DataExtender.SchemaExtender.DataTableExtender.AllowNew" /> property values
            of <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" /> objects from the 
            <see cref="P:C1.C1DataExtender.C1DataView.BaseSchemaTables" /> collection that corresponds
            to "Main" table nodes (see 
            <span style="LinkTopic">Composite View Definition</span> topic for details
            on "Main" and "Lookup" table nodes). If 
            <see cref="P:C1.C1DataExtender.SchemaExtender.DataTableExtender.AllowNew" /> property values are true 
            for all "Main" tables then default value is true; otherwise, false.
            <para>
            You can change this value to false only if default calculated value
            is true. You can't change default false value to true.
            </para></remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1DataView.AllowDelete">
      <summary>
            Gets or sets a value indicating whether deletion of rows is
            permitted for this <see cref="T:C1.C1DataExtender.C1DataView" />.
            </summary>
      <remarks>
            This property value is inherited by default from the 
            <see cref="P:C1.C1DataExtender.SchemaExtender.DataTableExtender.AllowDelete" /> property values
            of <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" /> objects from the 
            <see cref="P:C1.C1DataExtender.C1DataView.BaseSchemaTables" /> collection that corresponds
            to "Main" table nodes (see 
            <span style="LinkTopic">Composite View Definition</span> topic for details
            on "Main" and "Lookup" table nodes). If 
            <see cref="P:C1.C1DataExtender.SchemaExtender.DataTableExtender.AllowNew" /> property values are true 
            for all "Main" tables then default value is true; otherwise, false.
            <para>
            You can change this value to false only if default calculated value
            is true. You can't change default false value to true.
            </para></remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1DataView.AllowEdit">
      <summary>
            Gets or sets a value indicating whether editing of
            <see cref="T:C1.C1DataExtender.C1ViewRow" /> objects that belong to this
            <see cref="T:C1.C1DataExtender.C1DataView" /> is permitted.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1DataView.PrimaryKey">
      <summary>
            Returns an array of <see cref="T:C1.C1DataExtender.C1ViewColumn" /> objects that
            constitute a primary key of this view.
            </summary>
      <remarks>
            See the <span style="LinkTopic">Composite View Definition</span> topic
            for details on how a primary key is determined.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1DataView.ConstraintExpression">
      <summary>
            Defines a row level constraint.
            </summary>
      <remarks>
            See the <span style="LinkTopic">Row and Column Level Constraints</span> topic
            for details.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1DataView.RowFilter">
      <summary>
            Gets or sets an expression used to filter rows in 
            <see cref="T:C1.C1DataExtender.C1DataView" />.
            </summary>
      <remarks>
            The syntax of filter expression is the same as for WHERE
            clause of <see cref="P:C1.C1DataExtender.C1DataView.Definition" />, with the only exception
            that column names should reference <see cref="T:C1.C1DataExtender.C1DataView" /> columns
            while column names in <see cref="P:C1.C1DataExtender.C1DataView.Definition" /> reference columns
            of base DataTable objects.
            <para>
            There are some semantic differences in the calculation of this filter condition
            compared to expressions used View Definition Statements:
            </para><list type="bullet"><item><term /><description>
            The &lt;match_expression&gt; [ NOT ] LIKE &lt;pattern_expression&gt; 
            [ ESCAPE &lt;escape_character&gt; ]  
            comparison condition mimics the behavior
            of this condition in the System.Data.DataColumn.Expression, that is,  
            supports '*' char as an alternative to standard '%' char in a matching pattern 
            and doesn't support '_' char. In addition to DataColumn.Expression implementation
            it supports 'Escape' clause and allows '*' or '%' char in any place of a matching
            pattern.
            The reason for following the DataColumn.Expression behavior in <see cref="P:C1.C1DataExtender.C1DataView.RowFilter" /> 
            implementation is that a value of the latter property can be set by user interface control
            via the IBindingListView.Filter property, but user interface control usually expects the behavior
            specific to the DataColumn.Expression property in this case.
            </description></item></list></remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1DataView.Sort">
      <summary>
            Gets or sets a string defining a sort order of rows in this
            <see cref="T:C1.C1DataExtender.C1DataView" />.
            </summary>
      <remarks>
            Sort order is defined as a list of view column names breaked
            by comma, with optional sort direction qualifier "ASC" (ascending) or 
            "DESC" (descending) that follows the column name. If this qualifier is
            omited then the ascending order is supposed. Column names
            can be wrapped in square brackets ("[]"). 
            <para>
            For example:
            </para><para>
            "OrderID, ProductID DESC, [UnitPrice] ASC"
            </para></remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1DataView.IsActive">
      <summary>
            Indicates wheather this <see cref="T:C1.C1DataExtender.C1DataView" /> is active, that is
            able to represent data according to its <see cref="P:C1.C1DataExtender.C1DataView.Definition" />.
            </summary>
      <remarks>
        <see cref="T:C1.C1DataExtender.C1DataView" /> is active if all of the following conditions
            are satisfied:
            <list type="bullet"><item><term /><description>
            C1DataView is added to the <see cref="P:C1.C1DataExtender.C1DataViewSet.Views" /> collection.
            </description></item><item><term /><description>
            The owning <see cref="T:C1.C1DataExtender.C1DataViewSet" /> is connected to a data source 
            (via the <see cref="T:System.Data.DataSet" /> or the <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionString" />
            properties).
            </description></item><item><term /><description>
            The <see cref="P:C1.C1DataExtender.C1DataView.Definition" /> property defined a valid definition 
            statement, that is it has no syntactic and semantic errors. 
            </description></item></list><para>
            In this case <see cref="T:C1.C1DataExtender.C1DataView" /> is able to represent the
            list of columns and rows.
            </para></remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1DataView.AutoFetch">
      <summary>
            Controls the autofetching behavior for this <see cref="T:C1.C1DataExtender.C1DataView" />.
            </summary>
      <remarks>
            This property allows to turn on 
            or off automatic data fetching
            for this <see cref="T:C1.C1DataExtender.C1DataView" />. If <see cref="P:C1.C1DataExtender.C1DataView.AutoFetch" /> 
            is set to <see cref="F:C1.C1DataExtender.AutoFetchModeEnum.Default" /> (which is the default) 
            then the effective value is determined by the 
            <see cref="P:C1.C1DataExtender.C1DataViewSet.AutoFetch" /> property value of an owning 
            <see cref="T:C1.C1DataExtender.C1DataViewSet" />. 
            See the <span style="LinkTopic">Data Fetching</span> topic for
            details.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1DataView.RaiseFilterRowEvent">
      <summary>
            Indicates whether the <see cref="E:C1.C1DataExtender.C1DataView.FilterRow" /> event
            should be fired.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1DataView.VirtualMode">
      <summary>
            Indicates whether Virtual Mode should be used for this 
            <see cref="T:C1.C1DataExtender.C1DataView" />.
            </summary>
      <remarks>
            If this property is set to the <see cref="F:C1.C1DataExtender.VirtualModeEnum.KeySet" /> value, 
            then the view initially fetches only a
            minimal set of columns for DataTables the view is based on. In the simplest
            case this minimal set consist solely of primary key columns. It can be expanded
            by columns referenced in view's sort and filter conditions. This approach
            minimizes the time necessary to perform initial fetching of data for a view.
            When the view row is later accessed by an application, the rest of the columns 
            of the base DataRows that have not been fetched yet are fetched automatically.
            </remarks>
    </member>
    <member name="E:C1.C1DataExtender.C1DataView.CalculateColumn">
      <summary>
            Occurs when the <see cref="T:C1.C1DataExtender.C1ViewColumn" /> value is being retrieved.
            </summary>
      <remarks>
            This is the same event as <see cref="E:C1.C1DataExtender.C1DataViewSet.CalculateColumn" />,
            see the <see cref="E:C1.C1DataExtender.C1DataViewSet.CalculateColumn" /> event description for
            details on this event.
            <para>
            Note that this event is triggered on <see cref="T:C1.C1DataExtender.C1DataView" />
            first and then on <see cref="T:C1.C1DataExtender.C1DataViewSet" />. 
            </para></remarks>
    </member>
    <member name="E:C1.C1DataExtender.C1DataView.PositionChanged">
      <summary>
            Occurs when <see cref="P:C1.C1DataExtender.C1DataView.Position" /> property has
            been changed for this <see cref="T:C1.C1DataExtender.C1DataView" />.
            </summary>
      <remarks>
            This is the same event as <see cref="E:C1.C1DataExtender.C1DataViewSet.PositionChanged" />,
            with the only difference that event data in C1DataViewSet has
            the additional <see cref="P:C1.C1DataExtender.C1ViewPositionChangedEventArgs.View" />
            property that specify in what C1DataView this has occured.
            See <see cref="E:C1.C1DataExtender.C1DataViewSet.PositionChanged" /> event description for
            details on this event.
            <para>
            Note that this event is triggered on <see cref="T:C1.C1DataExtender.C1DataView" />
            first and than on <see cref="T:C1.C1DataExtender.C1DataViewSet" />. 
            </para></remarks>
    </member>
    <member name="E:C1.C1DataExtender.C1DataView.RowChanging">
      <summary>
            Occurs before editing of <see cref="T:C1.C1DataExtender.C1ViewRow" /> will be finished.
            </summary>
      <remarks>
            This is the same event as <see cref="E:C1.C1DataExtender.C1DataViewSet.RowChanging" />,
            see <see cref="E:C1.C1DataExtender.C1DataViewSet.RowChanging" /> event description for
            details on this event.
            <para>
            Note that this event is triggered on <see cref="T:C1.C1DataExtender.C1DataView" />
            first and than on <see cref="T:C1.C1DataExtender.C1DataViewSet" />. 
            </para></remarks>
    </member>
    <member name="E:C1.C1DataExtender.C1DataView.RowChanged">
      <summary>
            Occurs after editing of <see cref="T:C1.C1DataExtender.C1ViewRow" /> has been successfully 
            finished.
            </summary>
      <remarks>
            This is the same event as <see cref="E:C1.C1DataExtender.C1DataViewSet.RowChanged" />,
            see <see cref="E:C1.C1DataExtender.C1DataViewSet.RowChanged" /> event description for
            details on this event.
            <para>
            Note that this event is triggered on <see cref="T:C1.C1DataExtender.C1DataView" />
            first and than on <see cref="T:C1.C1DataExtender.C1DataViewSet" />. 
            </para></remarks>
    </member>
    <member name="E:C1.C1DataExtender.C1DataView.ColumnChanging">
      <summary>
            Occurs when a value is being changed for specified 
            <see cref="T:C1.C1DataExtender.C1ViewColumn" /> in a <see cref="T:C1.C1DataExtender.C1ViewRow" />.
            </summary>
      <remarks>
            This is the same event as <see cref="E:C1.C1DataExtender.C1DataViewSet.ColumnChanging" />,
            see <see cref="E:C1.C1DataExtender.C1DataViewSet.ColumnChanging" /> event description for
            details on this event.
            <para>
            Note that this event is triggered on <see cref="T:C1.C1DataExtender.C1DataView" />
            first and than on <see cref="T:C1.C1DataExtender.C1DataViewSet" />. 
            </para></remarks>
    </member>
    <member name="E:C1.C1DataExtender.C1DataView.ColumnChanged">
      <summary>
            Occurs after a value has been changed for the specified  
            <see cref="T:C1.C1DataExtender.C1ViewColumn" /> in a <see cref="T:C1.C1DataExtender.C1ViewRow" />.
            </summary>
      <remarks>
            This is the same event as <see cref="E:C1.C1DataExtender.C1DataViewSet.ColumnChanged" />,
            see <see cref="E:C1.C1DataExtender.C1DataViewSet.ColumnChanged" /> event description for
            details on this event.
            <para>
            Note that this event is triggered on <see cref="T:C1.C1DataExtender.C1DataView" />
            first and than on <see cref="T:C1.C1DataExtender.C1DataViewSet" />. 
            </para></remarks>
    </member>
    <member name="E:C1.C1DataExtender.C1DataView.CurrentChanged">
      <summary>
            Occurs when row or values of the current <see cref="T:C1.C1DataExtender.C1ViewRow" />
            belonging to this <see cref="T:C1.C1DataExtender.C1DataView" /> has been
            changed.
            </summary>
      <remarks>
            This is the same event as <see cref="E:C1.C1DataExtender.C1DataViewSet.CurrentChanged" />,
            see <see cref="E:C1.C1DataExtender.C1DataViewSet.CurrentChanged" /> event description for
            details on this event.
            <para>
            Note that this event is triggered on <see cref="T:C1.C1DataExtender.C1DataView" />
            first and than on <see cref="T:C1.C1DataExtender.C1DataViewSet" />. 
            </para></remarks>
    </member>
    <member name="E:C1.C1DataExtender.C1DataView.RowAddNew">
      <summary>
            Occurs when the <see cref="M:C1.C1DataExtender.C1DataView.AddNew" /> method is
            being called.
            </summary>
      <remarks>
            This is the same event as <see cref="E:C1.C1DataExtender.C1DataViewSet.RowAddNew" />,
            see <see cref="E:C1.C1DataExtender.C1DataViewSet.RowAddNew" /> event description for
            details on this event.
            <para>
            Note that this event is triggered first on <see cref="T:C1.C1DataExtender.C1DataView" />
            and then on <see cref="T:C1.C1DataExtender.C1DataViewSet" />. 
            </para></remarks>
    </member>
    <member name="E:C1.C1DataExtender.C1DataView.FilterRow">
      <summary>
            Allows to filter out <see cref="T:C1.C1DataExtender.C1DataView" /> rows on a client in code.
            </summary>
      <remarks>
            This is the same event as <see cref="E:C1.C1DataExtender.C1DataViewSet.FilterRow" />,
            see <see cref="E:C1.C1DataExtender.C1DataViewSet.FilterRow" /> event description for
            details on this event.
            <para>
            Note that this event is triggered first on <see cref="T:C1.C1DataExtender.C1DataView" />
            and then on <see cref="T:C1.C1DataExtender.C1DataViewSet" />. 
            </para></remarks>
    </member>
    <member name="T:C1.C1DataExtender.C1ViewSchemaTableCollection">
      <summary>
            Represents the collection of <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" /> objects
            corresponding to base DataTable
            objects.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewSchemaTableCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" /> object at the specified index.
            </summary>
      <param name="index">
            An index of <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" /> in the collection.
            </param>
      <returns>
            A <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" /> object at the specified index.
            </returns>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewSchemaTableCollection.Item(System.String)">
      <summary>
            Gets the <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" /> object corresponding to
            the table with the specified alias.
            </summary>
      <param name="tableAlias">
            An alias of the base table which <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" /> 
            is should be retrieved.
            </param>
      <returns>
            If base DataTable with the specified alias exists then returns
            the corresponding <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" /> object; otherwise,
            a null value is returning.
            </returns>
    </member>
    <member name="T:C1.C1DataExtender.C1ViewColumnCalculateEventArgs">
      <summary>
            Provides data for the <see cref="T:C1.C1DataExtender.C1ViewColumnCalculateEventHandler" /> delegate.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewColumnCalculateEventArgs.Column">
      <summary>
            Gets the <see cref="T:C1.C1DataExtender.C1ViewColumn" /> object for which a value is 
            being calculated.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewColumnCalculateEventArgs.Row">
      <summary>
            Gets the <see cref="T:C1.C1DataExtender.C1ViewRow" /> in which the <see cref="T:C1.C1DataExtender.C1ViewColumn" />
            value is being calculated.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewColumnCalculateEventArgs.Value">
      <summary>
            Gets or sets the calculated value of the column.
            </summary>
      <remarks>
            This property should be set to a value which becomes a final
            value of the column. See the 
            <span style="LinkTopic">Defining Column Value Calculations</span> topic
            for details.
            </remarks>
    </member>
    <member name="T:C1.C1DataExtender.C1ViewColumnCalculateEventHandler">
      <summary>
            Represents the method that handles the 
            <see cref="E:C1.C1DataExtender.C1DataView.CalculateColumn" /> event.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            Event data.
            </param>
    </member>
    <member name="T:C1.C1DataExtender.C1ViewRowChangeEventArgs">
      <summary>
            Provides data for the <see cref="T:C1.C1DataExtender.C1ViewRowChangeEventHandler" /> 
            delegate.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewRowChangeEventArgs.Row">
      <summary>
            Gets the <see cref="T:C1.C1DataExtender.C1ViewRow" /> that is being changed.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewRowChangeEventArgs.Action">
      <summary>
            Gets the type of change occurred on the <see cref="T:C1.C1DataExtender.C1ViewRow" />.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.C1ViewRowChangeEventHandler">
      <summary>
            Represents the method that handles the
            <see cref="E:C1.C1DataExtender.C1DataViewSet.RowChanging" />,
            <see cref="E:C1.C1DataExtender.C1DataViewSet.RowChanged" />,
            <see cref="E:C1.C1DataExtender.C1DataView.RowChanging" /> and 
            <see cref="E:C1.C1DataExtender.C1DataView.RowChanged" /> events.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="T:C1.C1DataExtender.C1ViewColumnChangeEventArgs">
      <summary>
            Provides data for the <see cref="T:C1.C1DataExtender.C1ViewColumnChangeEventHandler" /> 
            delegate.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewColumnChangeEventArgs.Column">
      <summary>
            Gets the <see cref="T:C1.C1DataExtender.C1ViewColumn" /> which value is being changed.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewColumnChangeEventArgs.Row">
      <summary>
            Gets the <see cref="T:C1.C1DataExtender.C1ViewRow" /> in which <see cref="T:C1.C1DataExtender.C1ViewColumn" />
            is being changed.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewColumnChangeEventArgs.OldValue">
      <summary>
            Gets an old column value.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewColumnChangeEventArgs.NewValue">
      <summary>
            Gets or sets a new proposed value for the <see cref="T:C1.C1DataExtender.C1ViewColumn" />
            which is being changed.
            </summary>
      <remarks>
            If another value is assigned to this property in 
            the <see cref="E:C1.C1DataExtender.C1DataViewSet.ColumnChanging" /> 
            event handler then this value becomes a new value of a column.
            </remarks>
    </member>
    <member name="T:C1.C1DataExtender.C1ViewColumnChangeEventHandler">
      <summary>
            Represents the method that handles the
            <see cref="E:C1.C1DataExtender.C1DataViewSet.ColumnChanging" />,
            <see cref="E:C1.C1DataExtender.C1DataViewSet.ColumnChanged" />,
            <see cref="E:C1.C1DataExtender.C1DataView.ColumnChanging" /> and 
            <see cref="E:C1.C1DataExtender.C1DataView.ColumnChanged" /> events.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            Event data.
            </param>
    </member>
    <member name="T:C1.C1DataExtender.C1ViewCurrentChangedEventArgs">
      <summary>
            Provides data for the <see cref="T:C1.C1DataExtender.C1ViewCurrentChangedEventHandler" /> 
            delegate.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewCurrentChangedEventArgs.Reason">
      <summary>
            Gets the reason why this event has been triggered.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewCurrentChangedEventArgs.View">
      <summary>
            Gets the <see cref="T:C1.C1DataExtender.C1DataView" /> that event occurred in.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.C1ViewCurrentChangedEventHandler">
      <summary>
            Represents the method that handles the 
            <see cref="E:C1.C1DataExtender.C1DataViewSet.CurrentChanged" /> and
            <see cref="E:C1.C1DataExtender.C1DataView.CurrentChanged" /> events.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            Event data.
            </param>
    </member>
    <member name="T:C1.C1DataExtender.C1ViewRowAddNewEventArgs">
      <summary>
            Provides data for the <see cref="T:C1.C1DataExtender.C1ViewRowAddNewEventHandler" /> 
            delegate.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewRowAddNewEventArgs.Row">
      <summary>
            Gets the <see cref="T:C1.C1DataExtender.C1ViewRow" /> that is being added.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.C1ViewRowAddNewEventHandler">
      <summary>
            Represents the method that handles the 
            <see cref="E:C1.C1DataExtender.C1DataViewSet.RowAddNew" /> and
            <see cref="E:C1.C1DataExtender.C1DataView.RowAddNew" /> events.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            Event data.
            </param>
    </member>
    <member name="T:C1.C1DataExtender.C1ViewFilterRowEventArgs">
      <summary>
            Provides data for the <see cref="T:C1.C1DataExtender.C1ViewFilterRowEventHandler" /> 
            delegate.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewFilterRowEventArgs.Accept">
      <summary>
            Allows to accept row (true) or filter it out (false). 
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewFilterRowEventArgs.Row">
      <summary>
            Gets a row whose filter conditions are being checked.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.C1ViewFilterRowEventHandler">
      <summary>
            Represents the method that handles the 
            <see cref="E:C1.C1DataExtender.C1DataViewSet.FilterRow" /> event.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            Event data.
            </param>
    </member>
    <member name="T:C1.C1DataExtender.C1ViewColumn">
      <summary>
            Represents a column of <see cref="T:C1.C1DataExtender.C1DataView" />.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.C1ViewColumn.FillLookupTable">
      <summary>
            Re-fetches a foreign key lookup DataTable of this <see cref="T:C1.C1DataExtender.C1ViewColumn" />.
            </summary>
      <remarks>
            This method has an effect only if the column represents a foreign key 
            DataColumn and its <see cref="P:C1.C1DataExtender.ColumnStyleBase.ItemListType" /> property 
            is assigned with <see cref="F:C1.C1DataExtender.ItemListTypeEnum.ForeignKey" /> value.  
            <para>
            See the <span style="LinkTopic">Data Fetching</span> topic for
            details.
            </para></remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewColumn.DataView">
      <summary>
            Gets the <see cref="T:C1.C1DataExtender.C1DataView" /> that this column belongs to.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewColumn.DataColumn">
      <summary>
            Gets the System.Data.DataColumn that this <see cref="T:C1.C1DataExtender.C1ViewColumn" />
            represents in the <see cref="T:C1.C1DataExtender.C1DataView" />.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewColumn.ColumnName">
      <summary>
            Gets the name of this <see cref="T:C1.C1DataExtender.C1ViewColumn" />.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewColumn.DataType">
      <summary>
            Gets the type of data stored in the column.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewColumn.Caption">
      <summary>
            Gets or sets the caption of this column.
            </summary>
      <remarks>
            This property allows you to override the Caption property value of the 
            underlying DataColumn.
            If Caption property was explicitly set to value other then null or
            "", then this value is used as the property value. If it's not the 
            case then looks for DataColumn.Caption property value, and it it's 
            different from
            DataColumn.ColumnName then returns Caption of DataColumn. Otherwise, 
            returns the ColumnName property value of this 
            <see cref="T:C1.C1DataExtender.C1ViewColumn" /> object.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewColumn.DefaultValue">
      <summary>
            Gets or sets the default value for this column when creating new row.
            </summary>
      <remarks>
            If this property is assigned to an empty value (null or empty string)
            then it returns the DefaultValue property value of the underlying
            DataColumn; otherwise, returns an assigned value.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewColumn.ReadOnly">
      <summary>
            Gets or sets the value indicating wheather this column is read only
            or modifiable.
            </summary>
      <remarks>
            The default value of this property is determined as follows.
            If one of the following conditions are satisfied then default value
            is true:
            <list type="bullet"><item><term /><description>
            If the ReadOnly property value of the underlying DataColumn is true.
            </description></item><item><term /><description>
            If the <see cref="P:C1.C1DataExtender.C1DataView.AllowEdit" /> property value of
            the owning <see cref="T:C1.C1DataExtender.C1DataView" /> is false. 
            </description></item><item><term /><description>
            If the <see cref="P:C1.C1DataExtender.SchemaExtender.DataTableExtender.AllowEdit" /> property value is
            false for the <see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" /> that represents the
            DataTable containing the underlying DataColumn for this 
            <see cref="T:C1.C1DataExtender.C1ViewColumn" />.
            </description></item></list><para>
            You can change this property value (to true) only if its default value is
            false, changing of default true to false is ignored.
            </para></remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewColumn.ConstraintExpression">
      <summary>
            Defines a column level constraint.
            </summary>
      <remarks>
            See the <span style="LinkTopic">Row and Column Level Constraints</span> topic
            for details.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewColumn.CalculationExpression">
      <summary>
            Defines an expression used to calculate a value returning for this
            <see cref="T:C1.C1DataExtender.C1ViewColumn" />.
            </summary>
      <remarks>
            See the <span style="LinkTopic">Defining Column Value Calculations</span> topic
            for more details.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewColumn.ColumnStyle">
      <summary>
            Represents Column Style definition - 
            a set of properties that affects column data 
            representation in ComponentOne user interface controls.
            </summary>
      <remarks>
            See the <span style="LinkTopic">Defining Column Styles</span> topic for details.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewColumn.RaiseCalculateColumnEvents">
      <summary>
            Gets or sets a value indicating whether 
            <see cref="E:C1.C1DataExtender.C1DataViewSet.CalculateColumn" /> and 
            <see cref="E:C1.C1DataExtender.C1DataView.CalculateColumn" /> events must
            be triggered.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewColumn.IsCalculated">
      <summary>
            Gets a value indicating whether this <see cref="T:C1.C1DataExtender.C1ViewColumn" />
            is calculated.
            </summary>
      <remarks>
            A calculated column is a column that is defined via expression
            in the <see cref="P:C1.C1DataExtender.C1DataView.Definition" /> property, as opposite to columns
            that represents a certain System.DataColumn. See
            <span style="LinkTopic">C1DataView Definitions</span> topic
            for details on calculated columns.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewColumn.AutoFetchLookupTable">
      <summary>
            Controls the autofetching behavior of this column foreign key lookup 
            DataTable. 
            </summary>
      <remarks>
            This property has an effect only if the column represents a foreign key 
            DataColumn and its <see cref="P:C1.C1DataExtender.ColumnStyleBase.ItemListType" /> property 
            is assigned with <see cref="F:C1.C1DataExtender.ItemListTypeEnum.ForeignKey" /> value.
            <para>
            It allows to turn on (<see cref="F:C1.C1DataExtender.AutoFetchModeEnum.Yes" />)
            or off (<see cref="F:C1.C1DataExtender.AutoFetchModeEnum.No" />) automatic data fetching
            for foreign key lookup table of this column. 
            If <see cref="P:C1.C1DataExtender.C1DataView.AutoFetch" /> 
            is set to <see cref="F:C1.C1DataExtender.AutoFetchModeEnum.Default" /> (which is the default) 
            then the effective value is determined by the 
            <see cref="P:C1.C1DataExtender.C1DataView.AutoFetch" /> property value of an owning 
            <see cref="T:C1.C1DataExtender.C1DataView" />. 
            </para><para>
            See the <span style="LinkTopic">Data Fetching</span> topic for
            details.
            </para></remarks>
    </member>
    <member name="T:C1.C1DataExtender.C1ViewColumnCollectionBase">
      <summary>
            The base class of the collection of <see cref="T:C1.C1DataExtender.C1ViewColumn" /> objects
            for the <see cref="T:C1.C1DataExtender.C1DataViewSet" />. 
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewColumnCollectionBase.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:C1.C1DataExtender.C1ViewColumn" /> object at the specified index.
            </summary>
      <param name="index">
            An index of <see cref="T:C1.C1DataExtender.C1ViewColumn" />.
            </param>
      <returns>
            A <see cref="T:C1.C1DataExtender.C1ViewColumn" />.
            </returns>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewColumnCollectionBase.Item(System.String)">
      <summary>
            Gets the <see cref="T:C1.C1DataExtender.C1ViewColumn" /> object with the specified name.
            </summary>
      <param name="columnName">
            A name of <see cref="T:C1.C1DataExtender.C1ViewColumn" />.
            </param>
      <returns>
            If <see cref="T:C1.C1DataExtender.C1ViewColumn" /> object with the specified name is
            contained in the collection then returns this column; otherwise,
            a null value.
            </returns>
    </member>
    <member name="T:C1.C1DataExtender.C1ViewColumnCollection">
      <summary>
            Represents the collection of <see cref="T:C1.C1DataExtender.C1ViewColumn" /> objects
            for the <see cref="T:C1.C1DataExtender.C1DataViewSet" />.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.C1ViewColumnDefCollection">
      <summary>
            This class is intended for C1DataExtender internal use only.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.C1ViewColumnDefCollection.Add(C1.C1DataExtender.C1ViewColumn)">
      <summary>
            This method is intended for C1DataExtender internal use only.
            </summary>
      <param name="viewColumn">
      </param>
    </member>
    <member name="M:C1.C1DataExtender.C1ViewColumnDefCollection.Remove(C1.C1DataExtender.C1ViewColumn)">
      <summary>
            This method is intended for C1DataExtender internal use only.
            </summary>
      <param name="viewColumn">
      </param>
    </member>
    <member name="M:C1.C1DataExtender.C1ViewColumnDefCollection.RemoveAt(System.Int32)">
      <summary>
            This method is intended for C1DataExtender internal use only.
            </summary>
      <param name="index">
      </param>
    </member>
    <member name="T:C1.C1DataExtender.C1ViewRowExpressionImplBase">
      <summary>
            Implementation base class for C1ViewRowExpressionEvaluator
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewRowExpressionImplBase.row">
      <summary>
            Note: starts with lowercase letter to mimic a method parameter name.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.C1ViewColumnExpressionImplBase">
      <summary>
            Implementation base class for C1ViewColumnExpressionEvaluator
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewColumnExpressionImplBase.column">
      <summary>
            Note: starts with lowercase letter to mimic a method parameter name.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.C1ViewRelation">
      <summary>
            Represents a master-detail relationship between two 
            <see cref="T:C1.C1DataExtender.C1DataView" /> objects in the <see cref="T:C1.C1DataExtender.C1DataViewSet" />.
            </summary>
      <remarks>
            To define a relationship between two <see cref="T:C1.C1DataExtender.C1DataView" /> objects of 
            the <see cref="T:C1.C1DataExtender.C1DataViewSet" /> you should create an instance of
            <see cref="T:C1.C1DataExtender.C1ViewRelation" />, add it to the 
            <see cref="P:C1.C1DataExtender.C1DataViewSet.Relations" /> collection and specify parent and
            child (master and detail in other words) <see cref="T:C1.C1DataExtender.C1DataView" /> objects
            connecting by this <see cref="T:C1.C1DataExtender.C1ViewRelation" /> via the 
            <see cref="P:C1.C1DataExtender.C1ViewRelation.ParentView" /> and <see cref="P:C1.C1DataExtender.C1ViewRelation.ChildView" /> properties.
            <para>
            In some cases you should additionally define the 
            <see cref="P:C1.C1DataExtender.C1ViewRelation.DataSetRelation" /> (or <see cref="P:C1.C1DataExtender.C1ViewRelation.DataSetRelationName" /> as an
            alternative), <see cref="P:C1.C1DataExtender.C1ViewRelation.ParentTableAlias" />
            and <see cref="P:C1.C1DataExtender.C1ViewRelation.ChildTableAlias" /> properties, see the
            <span style="LinkTopic">C1DataView Relations</span> topic for details.
            </para></remarks>
    </member>
    <member name="M:C1.C1DataExtender.C1ViewRelation.#ctor(C1.C1DataExtender.C1DataView,C1.C1DataExtender.C1DataView,System.Data.DataRelation,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1DataExtender.C1ViewRelation" />.
            </summary>
      <param name="parentView">
            The parent <see cref="T:C1.C1DataExtender.C1DataView" />.
            </param>
      <param name="childView">
            The child <see cref="T:C1.C1DataExtender.C1DataView" />.
            </param>
      <param name="dataSetRelation">
            The System.Data.DataRelation object that this 
            <see cref="T:C1.C1DataExtender.C1ViewRelation" /> is based on. If null is passed
            as the parameter value then base DataRelation is detected automatically.
            </param>
      <param name="parentTableAlias">
            The alias of the base DataTable which identify parent rows of
            relation.
            </param>
      <param name="childTableAlias">
            The alias of the base DataTable which identify child rows of
            relation.
            </param>
      <remarks>
            After the <see cref="T:C1.C1DataExtender.C1ViewRelation" /> has been created you should add 
            it to the <see cref="P:C1.C1DataExtender.C1DataViewSet.Relations" /> collection, until that
            relationship will not be activated.
            <para>
            See the <span style="LinkTopic">C1DataView Relations</span> topic for details on
            the <see cref="T:C1.C1DataExtender.C1ViewRelation" /> definition.
            </para></remarks>
    </member>
    <member name="M:C1.C1DataExtender.C1ViewRelation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1DataExtender.C1ViewRelation" />.
            </summary>
      <remarks>
            After the <see cref="T:C1.C1DataExtender.C1ViewRelation" /> has been created you should 
            at least add it to the 
            <see cref="P:C1.C1DataExtender.C1DataViewSet.Relations" /> collection and specify parent and
            child <see cref="T:C1.C1DataExtender.C1DataView" /> objects
            connecting by this <see cref="T:C1.C1DataExtender.C1ViewRelation" /> via the 
            <see cref="P:C1.C1DataExtender.C1ViewRelation.ParentView" /> and <see cref="P:C1.C1DataExtender.C1ViewRelation.ChildView" /> properties,
            until that relationship will not be activated.
            <para>
            See the <span style="LinkTopic">C1DataView Relations</span> topic for details on
            the <see cref="T:C1.C1DataExtender.C1ViewRelation" /> definition.
            </para></remarks>
    </member>
    <member name="M:C1.C1DataExtender.C1ViewRelation.#ctor(C1.C1DataExtender.C1DataView,C1.C1DataExtender.C1DataView)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1DataExtender.C1ViewRelation" />.
            </summary>
      <param name="parentView">
            The parent <see cref="T:C1.C1DataExtender.C1DataView" />.
            </param>
      <param name="childView">
            The child <see cref="T:C1.C1DataExtender.C1DataView" />.
            </param>
      <remarks>
            After the <see cref="T:C1.C1DataExtender.C1ViewRelation" /> has been created you should add 
            it to the <see cref="P:C1.C1DataExtender.C1DataViewSet.Relations" /> collection, until that
            relationship will not be activated.
            <para>
            See the <span style="LinkTopic">C1DataView Relations</span> topic for details on
            the <see cref="T:C1.C1DataExtender.C1ViewRelation" /> definition.
            </para></remarks>
    </member>
    <member name="M:C1.C1DataExtender.C1ViewRelation.#ctor(C1.C1DataExtender.C1DataView,C1.C1DataExtender.C1DataView,System.Data.DataRelation)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1DataExtender.C1ViewRelation" />.
            </summary>
      <param name="parentView">
            The parent <see cref="T:C1.C1DataExtender.C1DataView" />.
            </param>
      <param name="childView">
            The child <see cref="T:C1.C1DataExtender.C1DataView" />.
            </param>
      <param name="dataSetRelation">
            The System.Data.DataRelation object that this 
            <see cref="T:C1.C1DataExtender.C1ViewRelation" /> is based on. If null is passed
            as the parameter value then base DataRelation is detected automatically.
            </param>
      <remarks>
            After the <see cref="T:C1.C1DataExtender.C1ViewRelation" /> has been created you should add 
            it to the <see cref="P:C1.C1DataExtender.C1DataViewSet.Relations" /> collection, until that
            relationship will not be activated.
            <para>
            See the <span style="LinkTopic">C1DataView Relations</span> topic for details on
            the <see cref="T:C1.C1DataExtender.C1ViewRelation" /> definition.
            </para></remarks>
    </member>
    <member name="M:C1.C1DataExtender.C1ViewRelation.#ctor(C1.C1DataExtender.C1DataView,C1.C1DataExtender.C1DataView,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1DataExtender.C1ViewRelation" />.
            </summary>
      <param name="parentView">
            The parent <see cref="T:C1.C1DataExtender.C1DataView" />.
            </param>
      <param name="childView">
            The child <see cref="T:C1.C1DataExtender.C1DataView" />.
            </param>
      <param name="dataSetRelationName">
            The name of System.Data.DataRelation object that this 
            <see cref="T:C1.C1DataExtender.C1ViewRelation" /> is based on. If null or empty string 
            is passed as the parameter value then base DataRelation is detected 
            automatically.
            </param>
      <remarks>
            After the <see cref="T:C1.C1DataExtender.C1ViewRelation" /> has been created you should add 
            it to the <see cref="P:C1.C1DataExtender.C1DataViewSet.Relations" /> collection, until that
            relationship will not be activated.
            <para>
            See the <span style="LinkTopic">C1DataView Relations</span> topic for details on
            the <see cref="T:C1.C1DataExtender.C1ViewRelation" /> definition.
            </para></remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewRelation.ParentView">
      <summary>
            Gets or sets the parent (master) <see cref="T:C1.C1DataExtender.C1DataView" /> of the
            relation.
            </summary>
      <remarks>
            See the <span style="LinkTopic">C1DataView Relations</span> topic for details on
            the <see cref="T:C1.C1DataExtender.C1ViewRelation" /> definition.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewRelation.ChildView">
      <summary>
            Gets or sets the child (detail) <see cref="T:C1.C1DataExtender.C1DataView" /> of the
            relation.
            </summary>
      <remarks>
            See the <span style="LinkTopic">C1DataView Relations</span> topic for details on
            the <see cref="T:C1.C1DataExtender.C1ViewRelation" /> definition.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewRelation.DataSetRelation">
      <summary>
            Gets or sets the base DataRelation.
            </summary>
      <remarks>
            See the <span style="LinkTopic">C1DataView Relations</span> topic for details on
            the <see cref="T:C1.C1DataExtender.C1ViewRelation" /> definition.
            <para>
            The <see cref="P:C1.C1DataExtender.C1ViewRelation.DataSetRelation" /> and <see cref="P:C1.C1DataExtender.C1ViewRelation.DataSetRelationName" />
            are interchangeable; you can define base DataRelation directly or
            by its name, and in any case the other property will get an appropriate value.
            </para><para>
            If you set this property value to null then a base DataRelation will
            be detected automatically.
            </para></remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewRelation.DataSetRelationName">
      <summary>
            Gets or sets the base DataRelation by its name.
            </summary>
      <remarks>
            See the <span style="LinkTopic">C1DataView Relations</span> topic for details on
            the <see cref="T:C1.C1DataExtender.C1ViewRelation" /> definition.
            <para>
            The <see cref="P:C1.C1DataExtender.C1ViewRelation.DataSetRelation" /> and <see cref="P:C1.C1DataExtender.C1ViewRelation.DataSetRelationName" />
            are interchangeable; you can define base DataRelation directly or
            by its name, and in any case the other property will get an appropriate value.
            </para><para>
            If you set this property value to a null or empty string value then a 
            base DataRelation will be detected automatically.
            </para></remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewRelation.ParentTableAlias">
      <summary>
            Gets or sets the alias of parent DataTable.
            </summary>
      <remarks>
            See <span style="LinkTopic">C1DataView Relations</span> topic for details on
            <see cref="T:C1.C1DataExtender.C1ViewRelation" /> definition.
            <para>
            If you set this property value to a null or empty string value then a 
            parent table alias will be detected automatically.
            </para></remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewRelation.ChildTableAlias">
      <summary>
            Gets or sets the alias of child DataTable.
            </summary>
      <remarks>
            See the <span style="LinkTopic">C1DataView Relations</span> topic for details on
            the <see cref="T:C1.C1DataExtender.C1ViewRelation" /> definition.
            <para>
            If you set this property value to a null or empty string value then a 
            child table alias will be detected automatically.
            </para></remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewRelation.IsActive">
      <summary>
            Indicates whether relation is active, that is actually establish
            the relationship between <see cref="T:C1.C1DataExtender.C1DataView" /> objects.
            </summary>
      <remarks>
        <see cref="T:C1.C1DataExtender.C1ViewRelation" /> is active if all of the following
            conditions are satisfied:
            <list type="bullet"><item><term /><description><see cref="T:C1.C1DataExtender.C1ViewRelation" /> is added to the 
            <see cref="P:C1.C1DataExtender.C1DataViewSet.Relations" /> collection.
            </description></item><item><term /><description>
            Its <see cref="P:C1.C1DataExtender.C1ViewRelation.ParentView" /> and <see cref="P:C1.C1DataExtender.C1ViewRelation.ChildView" /> properties
            reference active <see cref="T:C1.C1DataExtender.C1DataView" /> objects (i.e. which
            <see cref="P:C1.C1DataExtender.C1DataView.IsActive" /> is true) belonging to the same
            <see cref="T:C1.C1DataExtender.C1DataViewSet" />.
            </description></item><item><term /><description>
            The <see cref="T:System.Data.DataRelation" /> property references the DataRelation
            that actually connects DataTable objects, one the base 
            for the <see cref="P:C1.C1DataExtender.C1ViewRelation.ParentView" /> and other the base for
            the <see cref="P:C1.C1DataExtender.C1ViewRelation.ChildView" />.
            </description></item></list></remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewRelation.ParentColumns">
      <summary>
            Gets an array of <see cref="T:C1.C1DataExtender.C1ViewColumn" /> objects from the 
            <see cref="P:C1.C1DataExtender.C1ViewRelation.ParentView" /> which are the parent columns of this relation.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewRelation.ChildColumns">
      <summary>
            Gets an array of <see cref="T:C1.C1DataExtender.C1ViewColumn" /> objects from the 
            <see cref="P:C1.C1DataExtender.C1ViewRelation.ChildView" /> which are the child columns of this relation.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.C1ViewRelationCollection">
      <summary>
            Represents a collection of <see cref="T:C1.C1DataExtender.C1ViewRelation" /> objects
            contained in the <see cref="T:C1.C1DataExtender.C1DataViewSet" />.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.C1ViewRelationCollection.Add(C1.C1DataExtender.C1ViewRelation)">
      <summary>
            Adds the specified <see cref="T:C1.C1DataExtender.C1ViewRelation" /> to the collection.
            </summary>
      <param name="viewRelation">
            The <see cref="T:C1.C1DataExtender.C1ViewRelation" /> to add.
            </param>
      <returns>
            An index of newly added <see cref="T:C1.C1DataExtender.C1ViewRelation" /> in the collection.
            </returns>
    </member>
    <member name="M:C1.C1DataExtender.C1ViewRelationCollection.Remove(C1.C1DataExtender.C1ViewRelation)">
      <summary>
            Removes the specified <see cref="T:C1.C1DataExtender.C1ViewRelation" /> from the collection.
            </summary>
      <param name="viewRelation">
            The <see cref="T:C1.C1DataExtender.C1ViewRelation" /> to remove.
            </param>
    </member>
    <member name="M:C1.C1DataExtender.C1ViewRelationCollection.Contains(C1.C1DataExtender.C1ViewRelation)">
      <summary>
            Indicates whether the specified <see cref="T:C1.C1DataExtender.C1ViewRelation" />
            is contained in the collection.
            </summary>
      <param name="viewRelation">
            The <see cref="T:C1.C1DataExtender.C1ViewRelation" /> to find.
            </param>
      <returns>
            true if the collection contains the specified 
            <see cref="T:C1.C1DataExtender.C1ViewRelation" />; otherwise, false.
            </returns>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewRelationCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:C1.C1DataExtender.C1ViewRelation" /> at the specified index.
            </summary>
      <param name="index">
            An index.
            </param>
      <returns>
            A <see cref="T:C1.C1DataExtender.C1ViewRelation" /> object.
            </returns>
    </member>
    <member name="T:C1.C1DataExtender.C1ViewRow">
      <summary>
            Represents a row of <see cref="T:C1.C1DataExtender.C1DataView" />.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.C1ViewRow.#ctor">
      <summary>
            WARNING: Dont't use this constructor, use 
            <see cref="M:C1.C1DataExtender.C1DataView.CreateNewRow(C1.C1DataExtender.ICompositeViewRow)" /> instead.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.C1ViewRow.BeginEdit">
      <summary>
            Starts an editing of the row.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.C1ViewRow.CancelEdit">
      <summary>
            Cancels current row editing.
            </summary>
      <remarks>
            If this method is called after the call of the <see cref="M:C1.C1DataExtender.C1ViewRow.BeginEdit" />
            method, all the changes made to the row after <see cref="M:C1.C1DataExtender.C1ViewRow.BeginEdit" />
            call are discarded.
            </remarks>
    </member>
    <member name="M:C1.C1DataExtender.C1ViewRow.EndEdit">
      <summary>
            Finishes current row editing.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.C1ViewRow.Delete">
      <summary>
            Deletes this row.
            </summary>
      <remarks>
            See the <span style="LinkTopic">Composite View Definition</span> 
            topic for details on view row deletion.
            </remarks>
    </member>
    <member name="M:C1.C1DataExtender.C1ViewRow.GetChildRows(C1.C1DataExtender.C1ViewRelation)">
      <summary>
            Gets the child rows of this <see cref="T:C1.C1DataExtender.C1ViewRow" /> using the 
            specified <see cref="T:C1.C1DataExtender.C1ViewRelation" />.
            </summary>
      <param name="relation">
            The <see cref="T:C1.C1DataExtender.C1ViewRelation" /> to use.
            </param>
      <returns>
            An array of child <see cref="T:C1.C1DataExtender.C1ViewRow" /> objects.
            </returns>
    </member>
    <member name="M:C1.C1DataExtender.C1ViewRow.GetChildRows">
      <summary>
            Gets the child rows of this <see cref="T:C1.C1DataExtender.C1ViewRow" /> using the
            first meat child <see cref="T:C1.C1DataExtender.C1ViewRelation" /></summary>
      <returns>
            An array of child <see cref="T:C1.C1DataExtender.C1ViewRow" /> objects.
            </returns>
      <remarks>
            This method is useful when owning <see cref="T:C1.C1DataExtender.C1DataView" /> has
            a single child <see cref="T:C1.C1DataExtender.C1ViewRelation" />.
            </remarks>
    </member>
    <member name="M:C1.C1DataExtender.C1ViewRow.GetParentRows">
      <summary>
            Gets an array of parent rows of this <see cref="T:C1.C1DataExtender.C1ViewRow" />.
            </summary>
      <returns>
            An array of parent rows.
            </returns>
    </member>
    <member name="M:C1.C1DataExtender.C1ViewRow.GetParentRow">
      <summary>
            Gets a parent <see cref="T:C1.C1DataExtender.C1ViewRow" /> for this row.
            </summary>
      <returns>
            A parent <see cref="T:C1.C1DataExtender.C1ViewRow" /> or a null value if there is no
            such a row.
            </returns>
    </member>
    <member name="M:C1.C1DataExtender.C1ViewRow.IsNull(C1.C1DataExtender.C1ViewColumn)">
      <summary>
            Gets a value that indicates whether the specified 
            <see cref="T:C1.C1DataExtender.C1ViewColumn" /> contains a null value.
            </summary>
      <param name="column">
            A <see cref="T:C1.C1DataExtender.C1ViewColumn" />.
            </param>
      <returns>
            true if the column contains a null value; otherwise, false. 
            </returns>
    </member>
    <member name="M:C1.C1DataExtender.C1ViewRow.IsNull(System.Int32)">
      <summary>
            Gets a value that indicates whether the column at the 
            specified index contains a null value.
            </summary>
      <param name="columnIndex">
            The zero-based index of the column.
            </param>
      <returns>
            true if the column contains a null value; otherwise, false. 
            </returns>
    </member>
    <member name="M:C1.C1DataExtender.C1ViewRow.IsNull(System.String)">
      <summary>
            Gets a value that indicates whether the column with the 
            specified name contains a null value.
            </summary>
      <param name="columnName">
            The name of the column.
            </param>
      <returns>
            true if the column contains a null value; otherwise, false. 
            </returns>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewRow.View">
      <summary>
            Gets the <see cref="T:C1.C1DataExtender.C1DataView" /> that this row belongs to.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewRow.BaseRows">
      <summary>
            Gets the collection of System.Data.DataRow objects referenced
            in this <see cref="T:C1.C1DataExtender.C1ViewRow" />.
            </summary>
      <remarks>
            The order of DataRow objects in this collection corresponds to
            the order of DataTable objects in the 
            <see cref="P:C1.C1DataExtender.C1DataView.BaseTables" /> collection. If there is 
            no base DataRow for the certain DataTable then corresponding collection
            item contains null. See the
            <span style="LinkTopic">Composite View Definition</span> topic for details
            on view rows.
            <para>
            The base DataRow also can be retrieved using an alias of base table.
            </para></remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewRow.Item(C1.C1DataExtender.C1ViewColumn)">
      <summary>
            Gets or sets the value stored in the specified 
            <see cref="T:C1.C1DataExtender.C1ViewColumn" /> of this row.
            </summary>
      <param name="column">
            The <see cref="T:C1.C1DataExtender.C1ViewColumn" /> that stores the value.
            </param>
      <returns>
            The column value.
            </returns>
      <remarks>
            If row is not in the editing state when column value is being assigned,
            that is the <see cref="M:C1.C1DataExtender.C1ViewRow.BeginEdit" /> method was not called for this
            row, then <see cref="M:C1.C1DataExtender.C1ViewRow.BeginEdit" /> method is called automatically,
            column value is assigned, after that the <see cref="M:C1.C1DataExtender.C1ViewRow.EndEdit" />
            method is called. 
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewRow.Item(System.Int32)">
      <summary>
            Gets or sets the value stored in the column with the specified index.
            </summary>
      <param name="columnIndex">
            The index of the <see cref="T:C1.C1DataExtender.C1ViewColumn" /> that stores the value.
            </param>
      <returns>
            The column value.
            </returns>
      <remarks>
            If row is not in the editing state when column value is being assigned,
            that is the <see cref="M:C1.C1DataExtender.C1ViewRow.BeginEdit" /> method was not called for this
            row, then <see cref="M:C1.C1DataExtender.C1ViewRow.BeginEdit" /> method is called automatically,
            column value is assigned, after that the <see cref="M:C1.C1DataExtender.C1ViewRow.EndEdit" />
            method is called. 
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewRow.Item(System.String)">
      <summary>
            Gets or sets the value stored in the column with the specified name.
            </summary>
      <param name="columnName">
            The name of the <see cref="T:C1.C1DataExtender.C1ViewColumn" /> that stores the value.
            </param>
      <returns>
            The column value.
            </returns>
      <remarks>
            If row is not in the editing state when column value is being assigned,
            that is the <see cref="M:C1.C1DataExtender.C1ViewRow.BeginEdit" /> method was not called for this
            row, then <see cref="M:C1.C1DataExtender.C1ViewRow.BeginEdit" /> method is called automatically,
            column value is assigned, after that the <see cref="M:C1.C1DataExtender.C1ViewRow.EndEdit" />
            method is called. 
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewRow.ItemArray">
      <summary>
            Gets or sets the column values of this row through an array.
            </summary>
      <remarks>
            The order of elements in the assigning or returning array coresponds
            to the order of <see cref="T:C1.C1DataExtender.C1ViewColumn" /> objects in the
            <see cref="P:C1.C1DataExtender.C1DataView.Columns" /> collection of the owning
            <see cref="T:C1.C1DataExtender.C1DataView" />.
            <para>
            When this property value is set, a null value in the assigning array 
            means that value is not specified (setting a value to the corresponding 
            column is skipped). You should specify a System.DbNull value instead
            of a null value to set a column to null.
            In the same manner read only columns are skipped 
            as well.
            </para><para>
            A number of items in the assigning array can be less than a number
            of columns in the owning <see cref="T:C1.C1DataExtender.C1DataView" />, in this case
            the values of the rest of columns not covered by array values are 
            not changed.
            </para>
            If row is not in the editing state when column value is being assigned,
            that is the <see cref="M:C1.C1DataExtender.C1ViewRow.BeginEdit" /> method was not called for this
            row, then <see cref="M:C1.C1DataExtender.C1ViewRow.BeginEdit" /> method is called automatically,
            column values are assigned, after that the <see cref="M:C1.C1DataExtender.C1ViewRow.EndEdit" />
            method is called. If row is in the editing state before an assignment
            then it stays in the same state after it.
            <para></para></remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewRow.PrimaryKeyValue">
      <summary>
            Returns an array of values representing a primary key of
            the row.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewRow.SortKeyValue">
      <summary>
            Returns an array of values representing a sort key of
            the row.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.BaseRowCollection">
      <summary>
            Represents a collection of base System.Data.DataRow objects for
            the <see cref="T:C1.C1DataExtender.C1ViewRow" />.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.BaseRowCollection.Item(System.Int32)">
      <summary>
            Gets the base DataRow at the specified index.
            </summary>
      <param name="index">
            An index of DataRow.
            </param>
      <returns>
            A DataRow at the specified index.
            </returns>
    </member>
    <member name="P:C1.C1DataExtender.BaseRowCollection.Item(System.String)">
      <summary>
            Gets DataRow corresponding to the base DataTable with the specified
            alias.
            </summary>
      <param name="tableAlias">
            A base DataTable alias.
            </param>
      <returns>
            A DataRow if DataTable with the specified alias exists; otherwise,
            a null value.
            </returns>
    </member>
    <member name="T:C1.C1DataExtender.C1DataViewSet">
      <summary>
            Represents a set of related <see cref="T:C1.C1DataExtender.C1DataView" /> objects constituting
            a client's data model.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.C1DataViewSet.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1DataExtender.C1DataViewSet" /> class.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.C1DataViewSet.Fill">
      <summary>
            Refetch data represented by constituting <see cref="T:C1.C1DataExtender.C1DataView" /> 
            objects from database server.
            </summary>
      <remarks>
            This method is equivalent to C1DataViewSet.Fill(False).
            </remarks>
    </member>
    <member name="M:C1.C1DataExtender.C1DataViewSet.Fill(System.Boolean)">
      <summary>
            Re-fetch data represented by constituting <see cref="T:C1.C1DataExtender.C1DataView" /> 
            objects from database server.
            </summary>
      <remarks>
            This method calls the <see cref="M:C1.C1DataExtender.C1DataView.Fill" /> method for
            each constituent <see cref="T:C1.C1DataExtender.C1DataView" /> passing
            <paramref name="includingLookupTables" /> as a parameter value.
            </remarks>
      <param name="includingLookupTables">
            Indicates whether foreign key lookup tables should be re-fetched.
            </param>
    </member>
    <member name="M:C1.C1DataExtender.C1DataViewSet.Fill(System.Boolean,System.Boolean)">
      <summary>
            Re-fetch data represented by constituting <see cref="T:C1.C1DataExtender.C1DataView" /> 
            objects from database server.
            </summary>
      <param name="includingLookupTables">
            Indicates whether foreign key lookup tables should be re-fetched.
            </param>
      <param name="forceFetch">
            Indicates whether data should be fetched even it has been fetched
            before by fetch requests from another views.
            </param>
    </member>
    <member name="M:C1.C1DataExtender.C1DataViewSet.Update">
      <summary>
            Commit data changes made in contained <see cref="T:C1.C1DataExtender.C1DataView" />
            objects and underlying DataTable objects back to database server.
            </summary>
      <remarks>
            When performing database update, C1DataViewSet takes in account types 
            of corrections performed on data rows and interrelations between 
            DataTable objects of an underlying DataSet so as to commit data rows 
            in a correct order, preventing possible conflicts on a server.
            <para>
            For newly added rows which has a server-side autogenerated primary key,
            C1DataViewSet retrieve (if possible, see below) this value from server 
            and update corresponding row column on a client with this value.
            If such a row has child rows from another DataTable, C1DataViewSet updates
            their foreign key values with the new value as well, and only after it 
            commit those child rows to server, which guarantee that child rows are
            committed with correct foreign key values.
            </para><para>
            Because some values of committing row can be changed on a server 
            during update process, C1DataViewSet retrieve values of each committed
            row back to a client and updates client row values.
            </para><para>
            Different database servers provides different ways to retrieve
            generated autoincrement values. The details of how autoincrement
            values can be retrieved from server can be defined for a specific 
            server in DataSet Extender, see the 
            <see cref="P:C1.C1DataExtender.SchemaExtender.DataTableExtender.ConnectionInfo" /> property description
            for details.
            Note that for some types of database servers with which C1DataExtender
            is familiar this information is detected automatically, so you could
            not set up it manually. Examples of such servers are Access, 
            MS SQL and Oracle.
            </para></remarks>
      <example>
            The following example uses a button control to implement the Update method:
            <list type="bullet"><item><term /><description>
            Visual Basic
            <code>
            Private Sub Button1_Click(sender As Object, e As EventArgs)
                 C1DataViewSet1.Update()
            End Sub 
            </code></description></item><item><term /><description>
            C#
            <code>
            private void button1_Click(object sender, EventArgs e)
            {
                C1DataViewSet1.Update();
            }
            </code></description></item></list></example>
    </member>
    <member name="M:C1.C1DataExtender.C1DataViewSet.IsDataTableFilling(System.Data.DataTable)">
      <summary>
            Indicates whether the specified DataTable is currently filling with 
            data from server by some <see cref="T:C1.C1DataExtender.C1DataView" /> of some 
            <see cref="T:C1.C1DataExtender.C1DataViewSet" />.
            </summary>
      <param name="table">
            The DataTable in question.
            </param>
      <returns>
            True if the specified DataTable is currently filling; otherwise, 
            false.
            </returns>
    </member>
    <member name="M:C1.C1DataExtender.C1DataViewSet.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1DataViewSet.DataSet">
      <summary>
            Gets or sets the source System.Data.DataSet which data this C1DataViewSet
            represents.
            </summary>
      <remarks>
            This property value can be set to an instance of typed or untyped
            DataSet. 
            <para>
            If data source is defined by means of <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionString" />
            and <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionProvider" /> properties, this property
            returns a reference to an internally created DataSet.
            </para><para>
            See <span style="LinkTopic">C1DataViewSet Data Sources</span> for details.
            </para></remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1DataViewSet.DataSetShared">
      <summary>
            Allows to specify a DataSet which is situated beyond a Form where this
            <see cref="T:C1.C1DataExtender.C1DataViewSet" /> is placed as a data source.
            </summary>
      <remarks>
            This property allows you to define a path
            to some static (shared in VB) public property or field or its nested property that
            references an object of DataSet derived type. The path definition has the following
            structure:
            [NameSpace.]TypeName.StaticPropertyName[.SubPropertyPath]
            , where the parts in square brackets are optional.
            [NameSpace.]TypeName - a name of a type that contains a static property, with
              an optional namespace.
            StaticPropertyName[.SubPropertyPath] - a name of static property or field of the 
              type, with optional path to subproperty. All the properties or fields in
              the path must be public. The final property or field of the path must return 
            an object of DataSet derived type.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1DataViewSet.Connection">
      <summary>
            Gets DbConnection object used to connect to database in the case
            when data source is defined by means of <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionString" />
            and <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionProvider" /> properties. Allows you to set up
            data source via existing DbConnection derived component in run time.
            </summary>
      <remarks>
            This property is related to <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionString" />
            and <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionProvider" /> properties, which allows
            you to denote data source via connection string, see 
            <span style="LinkTopic">C1DataViewSet Data Sources</span> for details on
            this type of data source.
            <para>
            If <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionString" /> property set to a non empty value,
            C1DataViewSet creates a DbConnection derived object of the type 
            corresponding to the value of the <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionProvider" />
            property, which is accessible via this property.
            </para><para>
            This property can be set directly in run time to an instance of
            a DbConnection derived object denoting a desired database. In this
            case values of <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionString" />
            and <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionProvider" /> are updated accordingly.
            </para></remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1DataViewSet.ConnectionString">
      <summary>
            Gets or sets a connection string to a database which should be
            used as a data source, using syntax and conventions of connection 
            string definition peculiar to ADO.NET Data Provider denoted by
            the <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionProvider" /> property.
            </summary>
      <remarks>
            By setting this property to a non-empty value you can define
            a database denoted by the specified connection string as a data source
            for this C1DataViewSet. In this case C1DataViewSet retrieve database schema
            information and creates internal DataSet object with DataTable,
            DataRelation, DataColumn objects and constraints which reflect
            the schema of specified database, see 
            <span style="LinkTopic">C1DataViewSet Data Sources</span> for details.
            This DataSet object is accessible via the <see cref="P:C1.C1DataExtender.C1DataViewSet.DataSet" />
            property. If at this moment C1DataViewSet is connected to an instance
            of DataSet via the DataSet property, the usage of those Dataset as
            a data source is stopped.
            <para>
            In case where the SqlClient provider is used to connect to a server,
            it's possible to retrieve schema and data from multiple catalogs,
            including catalogs on linked servers, by specifying the catalog
            names in the <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionCatalogs" /> collection property.
            </para><para>
            The specified connection string must follow syntax and conventions
            stated by an ADO.NET Data Provider specified in the 
            <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionProvider" /> property.
            When this property is set to non-empty value, C1DataViewSet creates
            a DbConnection derived object corresponding to the specified 
            Data Provider and assigns its ConnectionString property with the
            provided value. This connection object is accessible via 
            the <see cref="P:C1.C1DataExtender.C1DataViewSet.Connection" /> property.
            </para><para>
            To stop using the specified database as C1DataViewSet data source set
            this property value to an empty string. 
            </para></remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1DataViewSet.ConnectionCatalogs">
      <summary>
            Defines a set of catalogs (databases) that should be retrieved from server when
            <see cref="T:C1.C1DataExtender.C1DataViewSet" /> is connected to a data source via the 
            <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionString" /> property and <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionProvider" /> is
            SqlClient provider.
            </summary>
      <remarks>
            The <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionCatalogs" /> property has an effect only if 
            <see cref="T:C1.C1DataExtender.C1DataViewSet" /> is connected to a data source via the 
            <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionString" /> property and <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionProvider" /> is
            SqlClient provider. In all other cases this property is ignored.
            <para>
            If this collection is empty then data is retrieved from a catalog specified in the 
            "Initial Catalog" parameter of the <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionString" /> property.
            Each item of the collection is a name of a catalog (database) from the server
            referenced in the <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionString" /> property, or a catalog name from
            a linked server registered on the server referenced in the 
            <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionString" /> property. In the letter case the name must be specified in 
            the form of linked_server_name.catalog_name. An empty item denotes a default catalog
            specified in the 
            "Initial Catalog" parameter of the <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionString" /> property.
            </para><para>
            For example, let's suppose that <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionString" /> is set to 
            "Data Source=(local);Initial Catalog=NorthWind;Integrated Security=True" and 
            <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionCatalogs" /> has the following list of items: "" (empty string),
            "AdventureWorks" and "LinkedServer.NorthWind". In this case the following databases
            will be retrieved to <see cref="T:C1.C1DataExtender.C1DataViewSet" /> respectively: local NorthWind database,
            local AdventureWorks database and the NorthWind database from the linked server 
            LinkedServer registered on the local server.
            </para><para>
            In order to provide an ability to commit data changes to databases from linked servers, 
            make sure that the following conditions are satisfied:
            <list type="bullet"><item><term /><description>
            Microsoft Distributed Transaction Coordinator is started for SQL Server
            that <see cref="T:C1.C1DataExtender.C1DataViewSet" /> is connected to.
            </description></item><item><term /><description>
            RPC calls to the linked server are allowed in the linked server definition. 
            To enable it in the SQL Server 2008 Management Studio, in the linked server properties
            window, "Server Options" page, set the "RPC Out" option to true.
            </description></item></list></para><para>
            By default, when <see cref="T:C1.C1DataExtender.C1DataViewSet" /> imports DataSet structure from server,
            it adds the catalog name prefixes to created DataTables' names, with dots replaced by
            underscores. For example, a DataTable representing the Customers table from the 
            "LinkedServer.NorthWind" database will get the "LinkedServer_NorthWind_Customers"
            name. The tables corresponding to the default catalog (denoted by an empty string item 
            in the <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionCatalogs" /> collection) doesn't get such a prefix.
            This behavior can be changed by setting the <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionAddTablePrefixes" />
            property to false, in this case the prefixes will not be added to the DataTable names.
            In case of name conflicts, that is when a table with the same name exists in multiple
            referenced catalogs, the name of each conflicting table will be suffixed with and
            unique number. For the example above, the Customers table from the local server will
            be named "Customers", and the Customers table from the linked server will be named
            "Customers2". Note that the catalogs are processed in the same order as they go in the 
            collection.
            </para><para>
            Any change in the <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionCatalogs" /> collection causes 
            <see cref="T:C1.C1DataExtender.C1DataViewSet" /> to re-fetch the whole DataSet structure.
            If in run-time you need to perform multiple changes to the collection at once 
            then it's recommended to wrap those changes with the 
            <see cref="M:C1.C1DataExtender.CatalogCollection.BeginUpdate" /> and <see cref="M:C1.C1DataExtender.CatalogCollection.EndUpdate" />
            method calls, in this case the data fetching will be performed only once after the
            <see cref="M:C1.C1DataExtender.CatalogCollection.EndUpdate" /> method is called, which will cut down the time
            necessary to perform this operation.
            </para></remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1DataViewSet.ConnectionAddTablePrefixes">
      <summary>
            Indicates whether catalog name prefixes specified in the <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionCatalogs" /> 
            collection will be added to names of imported DataTables, in the case where 
            <see cref="T:C1.C1DataExtender.C1DataViewSet" /> is connected to a data source via the 
            <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionString" /> property.
            </summary>
      <remarks>
            See the <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionCatalogs" /> property description for details.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1DataViewSet.ConnectionProvider">
      <summary>
            Gets or sets an invariant name of ADO.NET Data Provider that 
            C1DataViewSet uses when connecting to database denoted by the 
            <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionString" /> property value.
            </summary>
      <remarks>
            See the <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionString" /> property description for
            details on connecting to data source using connection string.
            <para>
            When this property value is changed, the <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionString" /> 
            property value is reset to an empty string.
            </para><para>
            An invariant name of data provider (that must be specified as this
            property value) corresponds to a value of the "InvariantName" column
            of DataRow representing this adapter from DataTable returning by
            the DbProviderFactories.GetFactoryClasses method.
            </para></remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1DataViewSet.SchemaExtender">
      <summary>
            Gets or sets DataSet Extender that is used along with this C1DataViewSet.
            </summary>
      <remarks>
            This property allows you to define DataSet Extender for this C1DataViewSet,
            see <span style="LinkTopic">DataSetExtender</span> for details on
            what DataSet Extender is.
            <para>
            This property never returns null. If it's not set or set to a null
            (Nothing in VB) value, a default DataSet Extender is created and
            returned by this property.
            </para></remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1DataViewSet.Views">
      <summary>
            Gets the collection of <see cref="T:C1.C1DataExtender.C1DataView" /> objects constituting
            this C1DataViewSet.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1DataViewSet.Relations">
      <summary>
            Gets the collection of <see cref="T:C1.C1DataExtender.C1ViewRelation" /> objects that
            link <see cref="T:C1.C1DataExtender.C1DataView" /> objects contained in C1DataViewSet and
            establishing master-detail relationships between them.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1DataViewSet.ColumnStyles">
      <summary>
            Represents a global collection of column styles.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1DataViewSet.ColumnStyleRules">
      <summary>
            Represents a collection of rules used to map global styles to 
            columns.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1DataViewSet.Locale">
      <summary>
            Allows you to consistently change the Locale property value of an
            underlying DataSet in run time.
            </summary>
      <remarks>
            This property allows you to set locale in run time, changing in turn
            Locale property of underlying DataSet. This change must be performed
            via this property (instead of changing it directly in DataSet) because
            C1DataViewSet can't detect the fact of changing it at DataSet.
            In design time Locale should be set at an underlying DataSet.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1DataViewSet.CaseSensitive">
      <summary>
            Allows you to consistently change the CaseSensitive property value of an
            underlying DataSet in run-time.
            </summary>
      <remarks>
            This property allows you to set CaseSensitive in run time, changing in turn
            CaseSensitive property of the underlying DataSet. This change must be performed
            via this property (instead of changing it at DataSet) because
            C1DataViewSet can't detect the fact of changing it at DataSet.
            In design time CaseSensitive should be set at an underlying DataSet.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1DataViewSet.AutoFetch">
      <summary>
            Turns on or off autofetching for all <see cref="T:C1.C1DataExtender.C1DataView" /> objects
            in <see cref="T:C1.C1DataExtender.C1DataViewSet" />.
            </summary>
      <remarks>
            This property defines a default autofetching mode for all
            <see cref="T:C1.C1DataExtender.C1DataView" /> objects of <see cref="T:C1.C1DataExtender.C1DataViewSet" />.
            It affect only <see cref="T:C1.C1DataExtender.C1DataView" /> that has 
            <see cref="P:C1.C1DataExtender.C1DataView.AutoFetch" /> set to 
            <see cref="F:C1.C1DataExtender.AutoFetchModeEnum.Default" />.
            This property never return the <see cref="F:C1.C1DataExtender.AutoFetchModeEnum.Default" />
            value. Assigning it to the <see cref="F:C1.C1DataExtender.AutoFetchModeEnum.Default" />
            value is equivalent to setting it to <see cref="F:C1.C1DataExtender.AutoFetchModeEnum.Yes" />.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1DataViewSet.AutoFetchParentsForOrphans">
      <summary>
            Indicates whether automatic fetching of an absent on a client parent row 
            for an existing child row is permitted in order to prevent foreign key
            constraint violation in the underlying DataSet.
            </summary>
      <remarks>
            Since C1DataView performs server side filtering when
            its definition statement contains the WHERE clause, 
            there is a chance that some rows of a child DataTable in a C1DataViewSet's
            underlying DataSet have no corresponding rows in a parent DataTable.
            Not because this is actually the case, but due to specific filter conditions
            defined in WHERE clauses of views' definition statements. This situation
            causes a foreign key constraint violation on a client, which is logically
            wrong because a corresponding parent row really exists on a server. To
            bypass this issue, C1DataViewSet automatically detects orphan child
            rows and makes an attempt to fetch a correspondig parent row from a server.
            Note that those "redundant" rows fetched from server to a parent DataTable
            for the sake of preventing a foreign key constraint violation will not affect
            rowsets of C1DataViews based on this table because a filter condition specified
            in the WHERE clause of such C1DataView is evaluated on a client as well.
            You can turn this behaviour on or off for C1DataViewSet using its 
            AutoFetchParentsForOrphans property, by setting it to 
            <see cref="F:C1.C1DataExtender.AutoFetchParentsModeEnum.Yes" />  to turn on auto fetching
            and to <see cref="F:C1.C1DataExtender.AutoFetchParentsModeEnum.No" /> to turn it off. 
            If this property is assigned to 
            <see cref="F:C1.C1DataExtender.AutoFetchParentsModeEnum.Default" /> value (which
            is the default) then permission to fetch rows in a certain DataTable (to satisfy
            orphan rows in its child tables) is determined by settings in DataSet Extender
            that are referenced by C1DataViewSet in the <see cref="P:C1.C1DataExtender.C1DataViewSet.SchemaExtender" /> property. 
            Each table (<see cref="T:C1.C1DataExtender.SchemaExtender.DataTableExtender" /> class) in DataSet Extender has the 
            <see cref="P:C1.C1DataExtender.SchemaExtender.DataTableExtender.AutoFetchParentsForOrphans" />
            property that enables (true) or disables (false) auto fetching rows for this table.
            If C1DataViewSet doesn't reference any DataSet Extender then  
            <see cref="F:C1.C1DataExtender.AutoFetchParentsModeEnum.Default" /> value of
            the AutoFetchParentsForOrphans property is treated as being set to Yes.
            </remarks>
    </member>
    <member name="E:C1.C1DataExtender.C1DataViewSet.RowChanging">
      <summary>
            Occurs before editing of <see cref="T:C1.C1DataExtender.C1ViewRow" /> will be finished.
            </summary>
      <remarks>
            This event is triggered when editing of <see cref="T:C1.C1DataExtender.C1ViewRow" /> 
            belonging to a <see cref="T:C1.C1DataExtender.C1DataView" /> contained in this C1DataViewSet 
            is finishing, that is, the <see cref="M:C1.C1DataExtender.C1ViewRow.EndEdit" /> method has been
            called for the row when it was in editing state (row is switched to
            an editing state by call of the <see cref="M:C1.C1DataExtender.C1ViewRow.BeginEdit" /> 
            method).
            <para>
            Raising an exception in this event prevents a row from leaving of
            editing state.
            </para><para>
            Note that this event is not triggered when changes are made directly
            to DataRow objects on which <see cref="T:C1.C1DataExtender.C1ViewRow" /> is based. To
            process this case you should use <see cref="E:C1.C1DataExtender.C1DataViewSet.ViewListChanged" />
            event.
            </para></remarks>
    </member>
    <member name="E:C1.C1DataExtender.C1DataViewSet.RowChanged">
      <summary>
            Occurs after editing of <see cref="T:C1.C1DataExtender.C1ViewRow" /> has been successfully 
            finished.
            </summary>
      <remarks>
            This event is triggered after editing of <see cref="T:C1.C1DataExtender.C1ViewRow" /> 
            belonging to a <see cref="T:C1.C1DataExtender.C1DataView" /> contained in this C1DataViewSet 
            has been successfully finished, i.e. the <see cref="M:C1.C1DataExtender.C1ViewRow.EndEdit" /> 
            method has been called for the row when it was in editing state 
            (row is switched to an editing state by call of the 
            <see cref="M:C1.C1DataExtender.C1ViewRow.BeginEdit" /> method).
            <para>
            Note that this event is not triggered when changes are made directly
            to DataRow objects on which <see cref="T:C1.C1DataExtender.C1ViewRow" /> is based. To
            process this case you should use <see cref="E:C1.C1DataExtender.C1DataViewSet.ViewListChanged" />
            event.
            </para></remarks>
    </member>
    <member name="E:C1.C1DataExtender.C1DataViewSet.ColumnChanging">
      <summary>
            Occurs when a value is being changed for specified 
            <see cref="T:C1.C1DataExtender.C1ViewColumn" /> in a <see cref="T:C1.C1DataExtender.C1ViewRow" />.
            </summary>
      <remarks>
            This event is triggered before new proposed value for a 
            <see cref="T:C1.C1DataExtender.C1ViewColumn" /> of a <see cref="T:C1.C1DataExtender.C1ViewRow" />
            is actually stored in a row.
            <para>
            You can substitute a proposed value with another one by setting
            the <see cref="P:C1.C1DataExtender.C1ViewColumnChangeEventArgs.NewValue" /> property
            value in passed event arguments.
            </para><para>
            Raising an exception in this event prevents from storing of a new value
            in a row.
            </para><para>
            Note that this event is thrown only when change of a value is being 
            made via <see cref="T:C1.C1DataExtender.C1ViewRow" /> object, it's not triggered
            when changing is performing directly in DataRow object on which 
            <see cref="T:C1.C1DataExtender.C1ViewRow" /> is based. 
            </para></remarks>
    </member>
    <member name="E:C1.C1DataExtender.C1DataViewSet.ColumnChanged">
      <summary>
            Occurs after a value has been changed for the specified  
            <see cref="T:C1.C1DataExtender.C1ViewColumn" /> in a <see cref="T:C1.C1DataExtender.C1ViewRow" />.
            </summary>
      <remarks>
            This event is triggered after new proposed value for a 
            <see cref="T:C1.C1DataExtender.C1ViewColumn" /> of a <see cref="T:C1.C1DataExtender.C1ViewRow" />
            has been actually stored in a row.
            <para>
            Note that this event is thrown only when change of a value is being 
            made via <see cref="T:C1.C1DataExtender.C1ViewRow" /> object, it's not triggered
            when changing is performing directly in DataRow object on which 
            <see cref="T:C1.C1DataExtender.C1ViewRow" /> is based. 
            </para></remarks>
    </member>
    <member name="E:C1.C1DataExtender.C1DataViewSet.ViewListChanged">
      <summary>
            Occurs on any change in rows of the specified 
            <see cref="T:C1.C1DataExtender.C1DataView" />.
            </summary>
      <remarks>
            This event is triggered independently of a reason of row changes,
            whether changes was made via <see cref="T:C1.C1DataExtender.C1ViewRow" /> of base DataRow
            objects. Note that in the case of composite view, changing of a 
            single DataRow can cause changing of multiple <see cref="T:C1.C1DataExtender.C1ViewRow" /> 
            objects based on that DataRow. In this case event will be thrown for
            each <see cref="T:C1.C1DataExtender.C1ViewRow" /> affected by this change.
            <para>
            This event provides event arguments parameter of type 
            <see cref="T:C1.C1DataExtender.C1ViewListChangedEventArgs" /> which is derived 
            from the System.ComponentModel.ListChangedEventArgs class. It 
            adds the single <see cref="P:C1.C1DataExtender.C1ViewListChangedEventArgs.View" />
            parameter which references the <see cref="T:C1.C1DataExtender.C1DataView" /> object
            which row set has been changed.
            </para></remarks>
    </member>
    <member name="E:C1.C1DataExtender.C1DataViewSet.PositionChanged">
      <summary>
            Occurs when <see cref="P:C1.C1DataExtender.C1DataView.Position" /> property has
            been changed for the specified <see cref="T:C1.C1DataExtender.C1DataView" /> object.
            </summary>
    </member>
    <member name="E:C1.C1DataExtender.C1DataViewSet.CurrentChanged">
      <summary>
            Occurs when values of the current <see cref="T:C1.C1DataExtender.C1ViewRow" />
            belonging to the specified <see cref="T:C1.C1DataExtender.C1DataView" /> have been
            changed, either because another row becomes the current one or 
            because values of the current row have been changed.
            </summary>
      <remarks>
            This event is triggered when one of the following occurs:
            <list type="bullet"><item><term /><description>
            Another row becomes the current row of the specified 
            <see cref="T:C1.C1DataExtender.C1DataView" />. Current row is accessible via
            the <see cref="P:C1.C1DataExtender.C1DataView.Current" /> property.
            </description></item><item><term /><description>
            Values of the current <see cref="T:C1.C1DataExtender.C1DataView" /> row have been changed.
            </description></item></list><para>
            The reason for triggering this event can be determined via
            the <see cref="!:C1ViewListChangedEventHandler.Reason" /> property.
            </para><para>
            This event is useful if you need to provide a custom processing
            of current row changing independently of the reason of this change.
            </para></remarks>
    </member>
    <member name="E:C1.C1DataExtender.C1DataViewSet.CalculateColumn">
      <summary>
            Occurs when <see cref="T:C1.C1DataExtender.C1ViewColumn" /> value is being retrieved.
            </summary>
      <remarks>
            This event allows you to calculate <see cref="T:C1.C1DataExtender.C1ViewColumn" /> value
            in code. It is triggered when column value is being read by
            a client code for columns having the 
            <see cref="P:C1.C1DataExtender.C1ViewColumn.RaiseCalculateColumnEvents" /> property
            value set to true. To define a calculated column value the
            <see cref="P:C1.C1DataExtender.C1ViewColumnCalculateEventArgs.Value" /> must be set.
            See the <span style="LinkTopic">Defining Column Value Calculations</span> topic
            for details on <see cref="T:C1.C1DataExtender.C1ViewColumn" /> value calculation.
            </remarks>
    </member>
    <member name="E:C1.C1DataExtender.C1DataViewSet.ConnectionOpening">
      <summary>
            Occurs before <see cref="T:C1.C1DataExtender.C1DataViewSet" /> opens a connection for
            data and schema fetching or data updating. This event allows you to set up 
            connection properties such as login attributes before it will be opened.
            </summary>
      <remarks>
            This event is mainly intended to define login attributes in the
            connection string of the opening connection, but the other properties
            can be changed as well. 
            <para>
            To make the process of updating the connection string simple and
            safe you can use an object of the System.Data.Common.DbConnectionStringBuilder 
            type or of a derived class which is appropriate to the type of connection,
            for example System.Data.SqlClient.SqlConnectionStringBuilder 
            for the System.Data.SqlClient.SqlConnection.
            </para></remarks>
    </member>
    <member name="E:C1.C1DataExtender.C1DataViewSet.RowAddNew">
      <summary>
            Occurs when the <see cref="M:C1.C1DataExtender.C1DataView.AddNew" /> method is
            being called.
            </summary>
      <remarks>
            In contrast to the <see cref="E:C1.C1DataExtender.C1DataViewSet.RowChanging" /> 
            and <see cref="E:C1.C1DataExtender.C1DataViewSet.RowChanged" /> events, which are
            raised when editing of a newly added row is being finished,
            this event is raised just after a new row has been created.
            <para>
            This event is an appropriate place to define default values
            for the row columns in code.
            </para><para>
            Raising an exception in this event handler prevents a new
            row from being added to <see cref="T:C1.C1DataExtender.C1DataView" />.
            </para></remarks>
    </member>
    <member name="E:C1.C1DataExtender.C1DataViewSet.FilterRow">
      <summary>
            Allows to filter out <see cref="T:C1.C1DataExtender.C1DataView" /> rows on a client in code.
            </summary>
      <remarks>
            An event argument of this event handler has the 
            <see cref="P:C1.C1DataExtender.C1ViewFilterRowEventArgs.Accept" /> property that 
            should be set to true to accept row or to false to reject it.
            To enable triggering of this event for a view the 
            <see cref="!:C1DataView.RaiseFilterRow" />  
            property of this view must be set to true (the default is false due to performance
            reasons).
            Note that this event is raised only for rows that satisfy filter conditions
            specified in a view definition's WHERE clause and in the 
            <see cref="P:C1.C1DataExtender.C1DataView.RowFilter" /> 
            property, that is the FilterRow event doesn't allow enabling rows that have 
            been rejected by those conditions.
            Because a filter condition that is coded in the FilterRow event handler may 
            depend on data that is beyond the checking row's data (say some property of 
            some object), you should call the <see cref="M:C1.C1DataExtender.C1DataView.Reset" /> method 
            to force the view
            to reapply filter conditions coded in the FilterRow event handler. This method
            doesn't causes refetching the view's data from server, it only forces the view to
            rebuild its rowset.
            </remarks>
    </member>
    <member name="T:C1.C1DataExtender.C1DataViewCollection">
      <summary>
            Represents the collection of <see cref="T:C1.C1DataExtender.C1DataView" /> objects belonging
            to <see cref="T:C1.C1DataExtender.C1DataViewSet" />.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.C1DataViewCollection.Add(C1.C1DataExtender.C1DataView)">
      <summary>
            Adds the specified <see cref="T:C1.C1DataExtender.C1DataView" /> to the collection.
            </summary>
      <param name="dataView">
            The <see cref="T:C1.C1DataExtender.C1DataView" /> to add.
            </param>
      <returns>
            Returns an index of newly added <see cref="T:C1.C1DataExtender.C1DataView" /> in the
            collection.
            </returns>
    </member>
    <member name="M:C1.C1DataExtender.C1DataViewCollection.Remove(C1.C1DataExtender.C1DataView)">
      <summary>
            Removes the specified <see cref="T:C1.C1DataExtender.C1DataView" /> from the collection.
            </summary>
      <param name="dataView">
            The <see cref="T:C1.C1DataExtender.C1DataView" /> to remove.
            </param>
      <remarks>
            If the specified <see cref="T:C1.C1DataExtender.C1DataView" /> doesn't belong to the 
            collection then do nothing.
            </remarks>
    </member>
    <member name="M:C1.C1DataExtender.C1DataViewCollection.Contains(C1.C1DataExtender.C1DataView)">
      <summary>
            Returns a value indicating whether the specified 
            <see cref="T:C1.C1DataExtender.C1DataView" /> object belongs to the collection.
            </summary>
      <param name="dataView">
            The <see cref="T:C1.C1DataExtender.C1DataView" /> object to find.
            </param>
      <returns>
            True if the specified <see cref="T:C1.C1DataExtender.C1DataView" /> exists; otherwise, false.
            </returns>
    </member>
    <member name="P:C1.C1DataExtender.C1DataViewCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:C1.C1DataExtender.C1DataView" /> object at the specified index. 
            </summary>
      <param name="index">
            The zero-based index of the <see cref="T:C1.C1DataExtender.C1DataView" /> to get.
            </param>
      <returns>
            A <see cref="T:C1.C1DataExtender.C1DataView" />.
            </returns>
    </member>
    <member name="P:C1.C1DataExtender.C1DataViewCollection.Item(System.String)">
      <summary>
            Gets the <see cref="T:C1.C1DataExtender.C1DataView" /> object with the specified name.
            </summary>
      <param name="name">
            The name of <see cref="T:C1.C1DataExtender.C1DataView" /> to find.
            </param>
      <returns>
            If <see cref="T:C1.C1DataExtender.C1DataView" /> with the specified name is contained
            in the collection then returns it, otherwise returns a null value.
            </returns>
    </member>
    <member name="T:C1.C1DataExtender.C1ViewListChangedEventArgs">
      <summary>
            Provides data for the <see cref="T:C1.C1DataExtender.C1ViewListChangedEventHandler" />
            delegate.
            </summary>
      <remarks>
            A data provided by this class has the same meaning as in the base
            System.ComponentModel.ListChangedEventArgs class.
            In addition it has the <see cref="P:C1.C1DataExtender.C1ViewListChangedEventArgs.View" /> property referencing
            the <see cref="T:C1.C1DataExtender.C1DataView" /> object in which event occurred.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewListChangedEventArgs.View">
      <summary>
            Gets the <see cref="T:C1.C1DataExtender.C1DataView" /> in which event occurred.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.C1ViewListChangedEventHandler">
      <summary>
            Represents the method that handles the
            <see cref="E:C1.C1DataExtender.C1DataViewSet.ViewListChanged" /> event.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            Event data.
            </param>
    </member>
    <member name="T:C1.C1DataExtender.C1ViewPositionChangedEventArgs">
      <summary>
            Provides data for the <see cref="T:C1.C1DataExtender.C1ViewPositionChangedEventHandler" />
            delegate.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.C1ViewPositionChangedEventArgs.View">
      <summary>
            Gets the <see cref="T:C1.C1DataExtender.C1DataView" /> object in which position has
            been changed.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.C1ViewPositionChangedEventHandler">
      <summary>
            Represents the method that handles the
            <see cref="E:C1.C1DataExtender.C1DataViewSet.PositionChanged" /> event.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            Event data.
            </param>
    </member>
    <member name="T:C1.C1DataExtender.ConnectionOpeningEventArgs">
      <summary>
            Provides data for the <see cref="T:C1.C1DataExtender.ConnectionOpeningEventHandler" />
            delegate.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ConnectionOpeningEventArgs.Connection">
      <summary>
            Gets the connection that is about to be opened.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.ConnectionOpeningEventHandler">
      <summary>
            Represents the method that handles the
            <see cref="E:C1.C1DataExtender.C1DataViewSet.ConnectionOpening" /> event.
            </summary>
      <param name="sender">
            The source of the event.
            </param>
      <param name="e">
            Event data.
            </param>
    </member>
    <member name="T:C1.C1DataExtender.CatalogCollection">
      <summary>
            Represents a collection of SQL Server catalog names for the 
            <see cref="P:C1.C1DataExtender.C1DataViewSet.ConnectionCatalogs" /> property.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.CatalogCollection.BeginUpdate">
      <summary>
            Starts the collection update mode, thus preventing <see cref="T:C1.C1DataExtender.C1DataViewSet" /> from
            re-fetching DataSet schema on each collection's change. The update mode must be finished
            by the <see cref="M:C1.C1DataExtender.CatalogCollection.EndUpdate" /> method call after all necessary changes to the collection 
            are completed.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.CatalogCollection.EndUpdate">
      <summary>
            Ends the collection update mode started by the <see cref="M:C1.C1DataExtender.CatalogCollection.BeginUpdate" /> method and
            forces <see cref="T:C1.C1DataExtender.C1DataViewSet" /> to re-fetch a DataSet schema from server.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.C1TypedDataViewSet">
      <summary>
            The base class for a typed ViewSet.
            </summary>
    </member>
    <member name="M:C1.C1DataExtender.C1TypedDataViewSet.InitializeComponentDesignTime">
      <summary>
            This method is called by a non-root designer to initialize viewset
            in design time. In derived auto-generated typed viewset it contains
            all the code from InitializeComponent method except for event handler
            assignments.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.C1TypedDataView">
      <summary>
            The base class for a typed DataView.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.C1TypedViewRow">
      <summary>
            The base class for a typed ViewRow.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.BaseColumnStyleEnum">
      <summary>
            Defines the possible types of base column style determination 
            strategies.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.BaseColumnStyleEnum.BaseField">
      <summary>
            Base column style is in a corresponding <see cref="T:C1.C1DataExtender.SchemaExtender.DataColumnExtender" />.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.BaseColumnStyleEnum.ColumnStyleDefault">
      <summary>
            Base column style is determined by style mapping rules.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.BaseColumnStyleEnum.None">
      <summary>
            Base column style is defined explicitly.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.ViewSetColumnStyle">
      <summary>
            Represents Column Style definition for <see cref="T:C1.C1DataExtender.C1ViewColumn" /> - 
            a set of properties that affects <see cref="T:C1.C1DataExtender.C1ViewColumn" /> data 
            representation in ComponentOne user interface controls.
            </summary>
      <remarks>
            See <span style="LinkTopic">Defining Column Styles</span> topic for details.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.ViewSetColumnStyle.BaseColumnStyle">
      <summary>
            Defines the way to determine a base style, the one that
            this style properties are inherited from.
            </summary>
      <remarks>
        <para>
            Based on this property value, base column style is determined as 
            follows:
            </para>
        <para>
            (1) If <see cref="P:C1.C1DataExtender.ViewSetColumnStyle.BaseColumnStyle" /> = 
            <see cref="F:C1.C1DataExtender.BaseColumnStyleEnum.None" />, base column style is 
            determined by the <see cref="!:BaseStyleName" /> property. 
            Non-empty <see cref="!:BaseStyleName" /> explicitly specifies a base 
            column style from the global <see cref="P:C1.C1DataExtender.C1DataViewSet.ColumnStyles" /> 
            and <see cref="!:C1DataViewSet.SchemaExtender.ColumnStyles" /> column 
            style collections (<see cref="P:C1.C1DataExtender.C1DataViewSet.ColumnStyles" /> 
            collection is looked up first). 
            Empty <see cref="!:BaseStyleName" /> means there is no base column 
            style.
            </para>
        <para>
            (2) If <see cref="P:C1.C1DataExtender.ViewSetColumnStyle.BaseColumnStyle" /> = 
            <see cref="F:C1.C1DataExtender.BaseColumnStyleEnum.ColumnStyleDefault" />, base column 
            style is determined by column styles mapping rules defined in
            <see cref="P:C1.C1DataExtender.C1DataViewSet.ColumnStyleRules" /> and
            <see cref="!:C1DataViewSet.SchemaExtender.ColumnStyleRules" />
            (<see cref="P:C1.C1DataExtender.C1DataViewSet.ColumnStyleRules" /> has a priority).
            </para>
        <para>
            (3) If <see cref="P:C1.C1DataExtender.ViewSetColumnStyle.BaseColumnStyle" /> = 
            <see cref="F:C1.C1DataExtender.BaseColumnStyleEnum.BaseField" />, base column 
            style is the style of corresponding <see cref="T:C1.C1DataExtender.SchemaExtender.DataColumnExtender" />
            from <see cref="P:C1.C1DataExtender.C1DataViewSet.SchemaExtender" />. 
            If <see cref="P:C1.C1DataExtender.C1DataViewSet.SchemaExtender" /> is not defined then
            base style is determined as described for 
            <see cref="F:C1.C1DataExtender.BaseColumnStyleEnum.ColumnStyleDefault" /> value.
            </para>
      </remarks>
    </member>
    <member name="T:C1.C1DataExtender.ViewSetGlobalColumnStyle">
      <summary>
            Represents a global Column Style definition for 
            <see cref="T:C1.C1DataExtender.C1DataViewSet" /> - 
            a set of properties that affects <see cref="T:C1.C1DataExtender.C1ViewColumn" /> data 
            representation in ComponentOne user interface controls.
            </summary>
      <remarks>
            The style objects represented by this class are items of
            <see cref="P:C1.C1DataExtender.C1DataViewSet.ColumnStyles" /> collection. These styles
            are used as base styles for the <see cref="P:C1.C1DataExtender.C1ViewColumn.ColumnStyle" />
            styles. These styles, in turn, can inherit their values from styles
            defined in the <see cref="!:C1DataViewSet.SchemaExtender.ColumnStyles" />
            collection.
            </remarks>
    </member>
    <member name="P:C1.C1DataExtender.ViewSetGlobalColumnStyle.BaseStyleName">
      <summary>
            Defines a name of a base global style of the 
            <see cref="P:C1.C1DataExtender.SchemaExtender.DataSetExtender.ColumnStyles" /> collection 
            from which this style inherits its property values.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ViewSetGlobalColumnStyle.Inherit">
      <summary>
            Defines what style properties inherit their values from the
            base style.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.ViewSetColumnStyleCollection">
      <summary>
            Represents a collection of <see cref="T:C1.C1DataExtender.ViewSetGlobalColumnStyle" />
            objects for the <see cref="P:C1.C1DataExtender.C1DataViewSet.ColumnStyles" /> property.
            </summary>
    </member>
    <member name="P:C1.C1DataExtender.ViewSetColumnStyleCollection.Item(System.Int32)">
      <summary>
            Gets a <see cref="T:C1.C1DataExtender.ViewSetGlobalColumnStyle" /> at the specified
            index.
            </summary>
      <param name="index">
            An index of <see cref="T:C1.C1DataExtender.ViewSetGlobalColumnStyle" />.
            </param>
      <returns>
            A <see cref="T:C1.C1DataExtender.ViewSetGlobalColumnStyle" />.
            </returns>
    </member>
    <member name="P:C1.C1DataExtender.ViewSetColumnStyleCollection.Item(System.String)">
      <summary>
            Gets a <see cref="T:C1.C1DataExtender.ViewSetGlobalColumnStyle" /> with the specified
            name.
            </summary>
      <param name="name">
            A name of <see cref="T:C1.C1DataExtender.ViewSetGlobalColumnStyle" />.
            </param>
      <returns>
            A <see cref="T:C1.C1DataExtender.ViewSetGlobalColumnStyle" /> with the specified name
            if exists; otherwise, a null value.
            </returns>
    </member>
    <member name="T:C1.C1DataExtender.AutoFetchModeEnum">
      <summary>
            Describes the possible autofetching modes.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.AutoFetchModeEnum.Default">
      <summary>
            Indicates that autofetching mode is the same as for owning object.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.AutoFetchModeEnum.Yes">
      <summary>
            Autofetching is turned on.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.AutoFetchModeEnum.YesIfNoData">
      <summary>
            Fetch is performed only if corresponding DataTables has not been
            filled with data before.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.AutoFetchModeEnum.No">
      <summary>
            Autofetching is turned off.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.AutoFetchParentsModeEnum">
      <summary>
            Describes the possible autofetching modes for orphan rows' parents.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.AutoFetchParentsModeEnum.Default">
      <summary>
            Indicates that autofetching mode is specified in DataSet Extender.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.AutoFetchParentsModeEnum.Yes">
      <summary>
            Autofetching is turned on.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.AutoFetchParentsModeEnum.No">
      <summary>
            Autofetching is turned off.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.DuplicateKeyOccurenceEnum">
      <summary>
            Describes a place of a row in a list of rows with the same key.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.DuplicateKeyOccurenceEnum.Accidental">
      <summary>
            A row place in the list is not guaranteed.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.DuplicateKeyOccurenceEnum.First">
      <summary>
            The first row of the list.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.DuplicateKeyOccurenceEnum.Last">
      <summary>
            The last row of the list.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.C1ViewRowActionEnum">
      <summary>
            Describes an action performed on a <see cref="T:C1.C1DataExtender.C1ViewRow" />.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.C1ViewRowActionEnum.Add">
      <summary>
            Row has been added to the view.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.C1ViewRowActionEnum.Change">
      <summary>
            Row values have been changed.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.C1ViewRowActionEnum.Delete">
      <summary>
            Row has been deleted from the view.
            </summary>
    </member>
    <member name="T:C1.C1DataExtender.C1CurrentChangedReasonEnum">
      <summary>
            This enum contains members specifying the reason for the triggering of
            <see cref="E:C1.C1DataExtender.C1DataViewSet.CurrentChanged" /> 
            and <see cref="E:C1.C1DataExtender.C1DataView.CurrentChanged" /> events.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.C1CurrentChangedReasonEnum.AnotherCurrentRow">
      <summary>
            Another row became the current one.
            </summary>
    </member>
    <member name="F:C1.C1DataExtender.C1CurrentChangedReasonEnum.ColumnValueChange">
      <summary>
            Some column values of current row have been changed.
            </summary>
    </member>
  </members>
</doc>